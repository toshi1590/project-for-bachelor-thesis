angular.module('gridModule', ['ngStorage']).controller('GridController', function ($scope, $filter, $attrs, $element, dataService, ngDialog, $localStorage, $state, $rootScope, $timeout, gettextCatalog, Notification) {
  var grid = this; //VARIABLES

  grid.collapseMainData = false;
  grid.collapseWorkersData = true;
  grid.collapseFinanseData = true;
  grid.rows = [];
  grid.gridParams = {};
  grid.checkedRows = {};
  grid.checked = false;
  grid.spinner = false;
  grid.attrSaveFilters = $attrs.saveFilters;
  grid.attrModule = $attrs.module;
  grid.formatDate = $rootScope.formatDate;
  grid.formatDateTime = $rootScope.formatDateTime;
  grid.last_page = 1;
  grid.page = 1;
  grid.total = null;
  grid.selected = 0;
  grid.sort = {
    reversed: {},
    sort_key: null
  };

  Object.size = function (obj) {
    var size = 0;

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }

    return size;
  };

  if ($attrs.perPage) {
    grid.per_page = $attrs.perPage;
  } else {
    grid.per_page = 100;
  }

  grid.static_filters = {};
  grid.static_custom_filters = {};
  grid.params = {
    order_by: 'id',
    order_dir: 'asc',
    filters: {},
    custom_filters: {}
  }; //METHODS

  grid.init = init;
  grid.loadData = loadData;
  grid.sortBy = sortBy;
  grid.filter = filter;
  grid.resetFilters = resetFilters;
  grid.pagainate = pagainate;
  grid.spinnerOn = spinnerOn;
  grid.spinnerOff = spinnerOff;
  grid.getCheckState = getCheckState;
  grid.checkAll = checkAll;
  grid.addRemoveCheckedObject = addRemoveCheckedObject;
  grid.addCheckedObject = addCheckedObject;
  grid.removeCheckedObject = removeCheckedObject;
  grid.setGridParams = setGridParams;
  grid.changePerPage = changePerPage;
  grid.uncheckAll = uncheckAll;
  grid.updateCount = updateCount;
  grid.showAdvancedSearch = showAdvancedSearch;
  grid.intersect = intersect;
  grid.saveFilters = saveFilters;
  grid.getFilters = getFilters;
  grid.exportData = exportData;
  grid.deleteDataDialog = deleteDataDialog;
  grid.deleteSingleRowDialog = deleteSingleRowDialog;
  grid.saveGridParam = saveGridParam;

  grid.keyDown = function (event) {
    if (event.keyCode == 13) filter();
  }; //LISTENERS AND WATCHERS


  $scope.$on('refresh_grid', function (event, args) {
    if (args == $attrs.alias) {
      loadData();
    }
  });
  $scope.$on('set_filters', function (event, args) {
    if (args.alias == $attrs.alias) {
      if (args.filters) {
        grid.params.filters = angular.extend(grid.params.filters, args.filters);
      }

      if (args.custom_filters) {
        grid.params.custom_filters = angular.extend(grid.params.custom_filters, args.custom_filters);
      }

      filter();
    }
  });
  $scope.$on('set_static_filters', function (event, args) {
    if (args.alias == $attrs.alias) {
      if (args.filters) {
        grid.static_filters = args.filters;
      }

      if (args.custom_filters) {
        grid.static_custom_filters = args.custom_filters;
      }

      filter();
    }
  });

  function deleteDataDialog(callBackFunc) {
    ngDialog.openConfirm({
      template: 'shared/grid/deleteDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: grid.selected
      },
      scope: $scope
    }).then(function () {
      callBackFunc(grid.checkedRows).then(function (data) {
        if (data) {
          grid.total = grid.total - Object.keys(grid.checkedRows).length;

          if (grid.total <= 0) {
            grid.total = 0;
          } else {
            var newLastPage = Math.ceil(grid.total / grid.per_page);

            if (grid.page > newLastPage) {
              grid.page = newLastPage;
            }
          }

          grid.checkedRows = {};
          loadData();
        }
      });
    });
  }

  function deleteSingleRowDialog(id, callBackFunc) {
    ngDialog.openConfirm({
      template: 'shared/grid/deleteSingleRowDialog.html',
      className: 'ngdialog-theme-default dialog400',
      scope: $scope
    }).then(function () {
      callBackFunc(id).then(function (data) {
        if (data) {
          grid.total = grid.total - 1;

          if (grid.total <= 0) {
            grid.total = 0;
          } else {
            var newLastPage = Math.ceil(grid.total / grid.per_page);

            if (grid.page > newLastPage) {
              grid.page = newLastPage;
            }
          }

          grid.checkedRows = {};
          loadData();
        }
      });
    });
  }

  function saveFilters() {
    var userId = $rootScope.currentUser ? $rootScope.currentUser.id : 'anony';

    if (userId !== null) {
      if (grid.attrSaveFilters) {
        if (!$localStorage[userId]) {
          $localStorage[userId] = {};
        }

        if (!$localStorage[userId].grid_filters) {
          $localStorage[userId].grid_filters = {};
        }

        var filterCache = $localStorage[userId].grid_filters;

        if (!filterCache[$state.current.name + "_" + $attrs.alias]) {
          filterCache[$state.current.name + "_" + $attrs.alias] = {
            search: ""
          };
        }

        var currFC = filterCache[$state.current.name + "_" + $attrs.alias];
        currFC.search = grid.params.search;
      }
    }
  }

  function saveGridParam() {
    var userId = $rootScope.currentUser ? $rootScope.currentUser.id : 'anony';

    if (userId !== null) {
      if (!$localStorage[userId]) {
        $localStorage[userId] = {};
      }

      if (!$localStorage[userId].grid_filters) {
        $localStorage[userId].grid_filters = {};
      }

      var filterCache = $localStorage[userId].grid_filters;

      if (!filterCache[$state.current.name + "_" + $attrs.alias]) {
        filterCache[$state.current.name + "_" + $attrs.alias] = {
          page: grid.page,
          order_by: grid.params.order_by,
          order_dir: grid.params.order_dir,
          per_page: grid.per_page
        };
      } else {
        filterCache[$state.current.name + "_" + $attrs.alias].page = grid.page;
        filterCache[$state.current.name + "_" + $attrs.alias].order_by = grid.params.order_by;
        filterCache[$state.current.name + "_" + $attrs.alias].order_dir = grid.params.order_dir;
        filterCache[$state.current.name + "_" + $attrs.alias].per_page = grid.per_page;
      }
    }
  }

  function getFilters() {
    var userId = $rootScope.currentUser ? $rootScope.currentUser.id : 'anony';

    if (userId !== null) {
      if (grid.attrSaveFilters) {
        if ($localStorage[userId] && $localStorage[userId].grid_filters && $localStorage[userId].grid_filters[$state.current.name + "_" + $attrs.alias]) {
          if ($localStorage[userId].grid_filters[$state.current.name + "_" + $attrs.alias].search) {
            grid.params.search = $localStorage[userId].grid_filters[$state.current.name + "_" + $attrs.alias].search;
          }
        }
      }
    }
  }

  function setGridParams(params) {
    grid.gridParams = params;
    var userId = $rootScope.currentUser ? $rootScope.currentUser.id : 'anony';
    var filterCache = null;

    if (userId !== null) {
      if (!$localStorage[userId]) {
        $localStorage[userId] = {};
      }

      if (!$localStorage[userId].grid_filters) {
        $localStorage[userId].grid_filters = {};
      }

      filterCache = $localStorage[userId].grid_filters;
    }

    if (filterCache[$state.current.name + "_" + $attrs.alias] && filterCache[$state.current.name + "_" + $attrs.alias].order_by) {
      var found = false;
      angular.forEach(params.columns, function (c) {
        if (c.key === filterCache[$state.current.name + "_" + $attrs.alias].order_by) {
          found = true;
        }
      });

      if (found) {
        grid.params.order_by = filterCache[$state.current.name + "_" + $attrs.alias].order_by;
      } else {
        if (params.default_sort_col != null) {
          grid.params.order_by = params.default_sort_col;
        } else {
          grid.params.order_by = 'id';
        }

        saveGridParam();
      }
    } else {
      if (params.default_sort_col != null) {
        grid.params.order_by = params.default_sort_col;
      } else {
        grid.params.order_by = 'id';
      }
    }

    if (filterCache[$state.current.name + "_" + $attrs.alias] && filterCache[$state.current.name + "_" + $attrs.alias].order_dir) {
      grid.params.order_dir = filterCache[$state.current.name + "_" + $attrs.alias].order_dir;
    } else {
      if (params.default_sort_dir != null) {
        grid.params.order_dir = params.default_sort_dir;
      } else {
        grid.params.order_dir = 'asc';
      }
    }

    if (filterCache[$state.current.name + "_" + $attrs.alias] && filterCache[$state.current.name + "_" + $attrs.alias].per_page) {
      grid.per_page = filterCache[$state.current.name + "_" + $attrs.alias].per_page;
    }

    if (filterCache[$state.current.name + "_" + $attrs.alias] && filterCache[$state.current.name + "_" + $attrs.alias].page) {
      grid.page = filterCache[$state.current.name + "_" + $attrs.alias].page;
    } else {
      grid.page = 1;
    }

    grid.item = params.catalog_name;
    grid.create_function = params.create_function;
    loadData();
  }

  function showAdvancedSearch() {
    ngDialog.open({
      template: 'advancedSearchModal',
      className: 'ngdialog-theme-default theme-normal',
      scope: $scope
    });
  } //REALISATION


  function init() {
    getFilters();
  }

  function intersect(a, b) {
    var t;
    if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter

    return a.filter(function (e) {
      if (b.indexOf(e) !== -1) return true;
    });
  }

  function changePerPage(per_page) {
    grid.page = 1;
    grid.per_page = per_page;
    loadData();
  }

  function updateCount() {
    grid.selected = Object.size(grid.checkedRows);
  }

  function addRemoveCheckedObject(object, status) {
    if (status) {
      grid.addCheckedObject(object);
    } else {
      grid.removeCheckedObject(object.id);
    }

    grid.updateCount();
  }

  function addCheckedObject(object) {
    grid.checkedRows[object.id] = {
      checked: true,
      object: angular.copy(object),
      disabled: false
    };
  }

  function removeCheckedObject(objectId) {
    delete grid.checkedRows[objectId];
    grid.checked = false;
  }

  function loadData(spinner) {
    if (typeof spinner === 'undefined') {
      spinner = true;
    }

    if (spinner) {
      spinnerOn();
    }

    var params = grid.params;
    params.offset = (grid.page - 1) * grid.per_page;
    params.limit = grid.per_page; //for mock-ups

    params.start = (grid.page - 1) * grid.per_page;
    params.length = grid.per_page; //for mock-ups

    if ($attrs.dynamic) {
      grid.advanced_search_data = [];
      dataService.getData(grid.attrModule, params).then(function (data) {
        grid.saveGridParam();
        grid.rows = data.rows;
        grid.total = data.total_count;

        if (data.export_link) {
          grid.export_link = data.export_link;
        } else {
          grid.export_link = null;
        }

        if (data.file_name) {
          grid.file_name = data.file_name;
        } else {
          grid.file_name = null;
        }

        angular.forEach(params.search, function (searchVal, searchKey) {
          if (searchVal !== '' && grid.gridParams.columns) {
            angular.forEach(grid.gridParams.columns, function (item) {
              if (item.key == searchKey) {
                grid.advanced_search_data.push({
                  key: item.text,
                  value: searchVal,
                  ref: searchKey
                });
              }
            });
          }
        });
        getCheckState();
        spinnerOff();
      }, function () {
        Notification.error(gettextCatalog.getString('Datu pieprasījums beidzās ar kļūdu!'));
        getCheckState();
        spinnerOff();
      });
    } else {
      var data = dataService.getData(grid.attrModule, params);
      grid.rows = data.data;
      grid.total = data.total;
      grid.export_link = null;
      grid.export_link = null;
      getCheckState();
      spinnerOff();
    }
  }

  function sortBy(key, sortable) {
    if (typeof sortable === 'undefined') {
      sortable = true;
    } else {
      sortable = eval(sortable);
    }

    if (sortable) {
      var params = grid.params;
      grid.sort.sort_key = key;

      if (params.order_by == key) {
        params.order_dir = params.order_dir == 'asc' ? 'desc' : 'asc';
        grid.sort.reversed[key] = params.order_dir == 'asc' ? false : true;
      } else {
        params.order_by = key;
        params.order_dir = 'asc';
        grid.sort.reversed[key] = false;
      }

      saveGridParam();
      loadData();
    }
  }

  function filter() {
    grid.page = 1;
    saveFilters();
    loadData();
  }

  function resetFilters(filters) {
    if (typeof filters == 'undefined') {
      grid.params.filters = {};
      grid.params.custom_filters = {};
    } else {
      if (filters.filters) {
        filters.filters.forEach(function (filter) {
          delete grid.params.filters[filter];
        });
      }

      if (filters.custom_filters) {
        filters.custom_filters.forEach(function (filter) {
          delete grid.params.custom_filters[filter];
        });
      }
    }

    grid.filter();
  }

  function pagainate(page) {
    if (page === 'prev') {
      page = grid.page - 1;
    }

    if (page === 'next') {
      page = grid.page + 1;
    }

    if (page < 1) {
      page = 1;
    }

    if (page > grid.last_page) {
      page = grid.last_page;
    }

    grid.page = page;
    loadData();
  }

  function spinnerOn() {
    if (!grid.spinner) {
      // spinneris arī tērē resursus :)
      grid.spinner_timeout = $timeout(function () {
        grid.spinner = true;
        grid.spinnerEl = $element.find('.spinner');
        grid.spinnerEl.addClass('whirl standard');
      }, 200);
    }
  }

  function spinnerOff() {
    if (grid.spinner) {
      grid.spinnerEl.removeClass('whirl standard');
      grid.spinner = false;
    }

    $timeout.cancel(grid.spinner_timeout);
  }

  function getCheckState() {
    var checked = true;
    grid.rows.forEach(function (row) {
      if (!grid.checkedRows[row.id]) {
        checked = false;
      }
    });
    grid.checked = checked;
  }

  function checkAll() {
    grid.checked = !grid.checked;
    grid.rows.forEach(function (row) {
      if (typeof grid.checkedRows[row.id] == "undefined" || !grid.checkedRows[row.id].disabled) {
        grid.addRemoveCheckedObject(row, grid.checked);
      }
    });
  }

  function uncheckAll() {
    grid.checkedRows = {};
    grid.updateCount();
    grid.checked = null;
  }

  function exportData(fileType) {
    dataService.exportData(grid.attrModule, fileType, grid.checkedRows, grid.total, grid.params.search);
  }

  init();
});
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

window.msg = function (text) {
  msg.history = msg.history || []; // store logs to an array for reference

  msg.history.push(text);

  if (this.console) {
    console.log(text);
  }
}; // Declare app level module which depends on views, and components


angular.module('myApp', ['ngAria', 'ui.router', 'ngDialog', 'ui.bootstrap', 'ngCookies', 'xeditable', 'gettext', 'gridModule', 'restangular', 'ui-notification', 'ngStorage', 'checklist-model', 'ui.select', 'ngSanitize', 'ngMessages', 'ngFileUpload', 'dm.select2', 'monospaced.elastic', 'angular-clipboard', 'ngResource', 'ui.bootstrap.datepicker', 'ui.bootstrap.dropdown', 'uniso-data']).config(config).run(run);
config.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider', 'NotificationProvider', 'uibDatepickerConfig'];

function config($stateProvider, $urlRouterProvider, $httpProvider, NotificationProvider, uibDatepickerConfig) {
  NotificationProvider.setOptions({
    delay: 5000,
    startTop: 20,
    startRight: 10,
    verticalSpacing: 20,
    horizontalSpacing: 20,
    positionX: 'right',
    positionY: 'top'
  });
  uibDatepickerConfig.startingDay = 1;
  $urlRouterProvider.otherwise('pub/home'); // stop cacheing $http requests

  $httpProvider.defaults.cache = false;

  if (!$httpProvider.defaults.headers.get) {
    $httpProvider.defaults.headers.get = {};
  } // disable IE ajax request caching


  $httpProvider.defaults.headers.get['If-Modified-Since'] = '0'; // šis ir jāorganizē savādāk, citādi tas čakarē flowu metoties pa vidu normāliem erroriem ar redirektu uz loginu

  $httpProvider.interceptors.push(function ($q, $injector) {
    return {
      responseError: function responseError(response) {
        if (response.status == 401) {
          var authService = $injector.get('authService');
          return authService.handle_401(response, $q, $injector);
        }

        return $q.reject(response);
      }
    };
  });

  var preloadRequiredData = function preloadRequiredData($q, $cookies, $timeout, gettextCatalog, $rootScope, dataService, authService, uuiData) {
    // 1. gaidām authService.getCurrentUserData
    // kamēr viņa nav, uzskatām, ka serveris nav uztartējies. Lēnām mēģinām, kamēr pamodīsies.
    // 2. Pēc tam ielādējam uuiData un langData.
    var when_all_ready = $q.defer();
    var retries = 0;
    $rootScope.showLoader = true;

    var retry = function retry() {
      var p = authService.getCurrentUserData().then(function () {
        if (!$rootScope.current_language || $rootScope.current_language != $cookies.get("current_language")) {
          $rootScope.current_language = $cookies.get("current_language");
          gettextCatalog.setCurrentLanguage($cookies.get("current_language"));
          gettextCatalog.loadRemote("data/translations/" + $cookies.get("current_language")).then(function () {
            dataService.initAdvancedSearchObject();

            for (var key in $rootScope.mainNavAlias) {
              $rootScope.mainNavAlias[key] = gettextCatalog.getString($rootScope.mainNavAlias[key], null, 'Galvenā izvēlne');
            }

            when_all_ready.resolve();
          });
        } else {
          when_all_ready.resolve();
        }
      }).then(function () {
        $rootScope.showLoader = false;
      });
      p["catch"](function () {
        $rootScope.showLoader = true;
        retries += 1;
        msg("No userdata, server down? Retrying in 5s. Attempt #" + retries);
        $timeout(retry, 5000);
      });
    };

    retry();
    return when_all_ready.promise;
  };

  $stateProvider.state('app', {
    url: "/:context",
    templateUrl: 'shared/main/app.html',
    cache: false,
    controller: 'CurrentContextController',
    resolve: {
      preloadRequiredData: preloadRequiredData
    }
  })
  /*state('app',{
       url: "/app",
       abstract: true,
       cache: false,
       templateUrl: "shared/main/app.html"
  })*/
  .state('app.user_material', {
    group: "user_material",
    "abstract": true,
    url: "/user_material",
    templateUrl: 'components/blank.html',
    controller: 'UserMaterialController',
    controllerAs: 'um'
  }).state('app.user_material.list', {
    group: "user_material",
    url: "/list",
    templateUrl: 'components/user_materials/user_material.html',
    controller: 'UserMaterialController',
    controllerAs: 'um',
    icon: 'fa fa-folder-open',
    permission: 'lietotaja_materiali_list',
    gridPermission: 'lietotaja_materiali',
    level: 0
  }).state('app.user_material.edit', {
    group: "user_material",
    url: '/{id:int}',
    templateUrl: 'components/user_materials/user_material_edit.html',
    controller: 'UserMaterialFormController',
    permission: 'lietotaja_materiali',
    controllerAs: 'umf'
  }).state('app.user_material.new', {
    group: "user_material",
    url: '/new',
    templateUrl: 'components/user_materials/user_material_edit.html',
    controller: 'UserMaterialFormController',
    controllerAs: 'umf',
    permission: 'lietotaja_materiali'
  }).state('app.scientific_institution', {
    group: "scientific_institution",
    "abstract": true,
    url: "/scientific_institution",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionController',
    controllerAs: 'si'
  }).state('app.scientific_institution.list', {
    group: "scientific_institution",
    url: "/list",
    templateUrl: 'components/scientific_institution/scientific_institution.html',
    controller: 'ScientificInstitutionController',
    controllerAs: 'si',
    icon: 'fa fa-university',
    permission: 'institucija_list',
    gridPermission: 'institucija_editable',
    level: 0,
    reload: true
  }).state('app.scientific_institution.edit', {
    group: "scientific_institution",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    permission: 'institucija_editable',
    controllerAs: 'sif'
  }).state('app.scientific_institution.new', {
    group: "scientific_institution",
    url: '/new',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    controllerAs: 'sif',
    permission: 'institucija_editable'
  }).state('app.business', {
    group: "business",
    "abstract": true,
    url: "/business",
    templateUrl: 'components/blank.html',
    controller: 'BusinessController',
    controllerAs: 'bu'
  }).state('app.business.list', {
    group: "business",
    url: "/list",
    templateUrl: 'components/business/business.html',
    controller: 'BusinessController',
    controllerAs: 'bu',
    icon: 'fa fa-cubes',
    permission: 'komersants_list',
    gridPermission: 'institucija_editable',
    level: 0,
    reload: true
  }).state('app.business.edit', {
    group: "business",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    permission: 'institucija_editable',
    controllerAs: 'sif'
  }).state('app.business.new', {
    group: "business",
    url: '/new',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    controllerAs: 'sif',
    permission: 'institucija_editable'
  }).state('app.he_institution', {
    group: "he_institution",
    "abstract": true,
    url: "/he_institution",
    templateUrl: 'components/blank.html',
    controller: 'HeInstitutionController',
    controllerAs: 'hei'
  }).state('app.he_institution.list', {
    group: "he_institution",
    url: "/list",
    templateUrl: 'components/he_institution/he_institution.html',
    controller: 'HeInstitutionController',
    controllerAs: 'hei',
    icon: 'fa fa-building',
    permission: 'aii_list',
    gridPermission: 'institucija_editable',
    level: 0,
    reload: true
  }).state('app.he_institution.edit', {
    group: "he_institution",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    permission: 'institucija_editable',
    controllerAs: 'sif'
  }).state('app.he_institution.new', {
    group: "he_institution",
    url: '/new/',
    templateUrl: 'components/scientific_institution/institution_edit.html',
    controller: 'ScientificInstitutionFormController',
    controllerAs: 'sif',
    permission: 'institucija_editable'
  }).state('app.cu_personal', {
    group: "cu_personal",
    "abstract": true,
    url: "/my_personal_data",
    templateUrl: 'components/blank.html'
  }).state('app.cu_personal.form', {
    group: "cu_personal",
    "abstract": false,
    url: '/0',
    templateUrl: 'components/my_personal_data/person_edit.html',
    controller: 'MyPersonalDataEditController',
    controllerAs: 'spe',
    permission: 'lietotaja_personas_dati',
    icon: 'fa fa-address-card',
    level: 0
  }).state('app.personal', {
    group: 'personal',
    "abstract": true,
    url: "/personal",
    templateUrl: 'components/blank.html',
    controller: 'PersonalController',
    controllerAs: 'pc'
  }).state('app.personal.list', {
    group: 'personal',
    url: "/list",
    templateUrl: 'components/personal/personal.html',
    controller: 'PersonalController',
    controllerAs: 'pc',
    icon: 'fa fa-graduation-cap',
    permission: 'personals_list',
    gridPermission: 'zin_personals_editable',
    level: 0,
    reload: true
  }).state('app.authors', {
    group: 'authors',
    "abstract": true,
    url: "/authors",
    templateUrl: 'components/blank.html',
    controller: 'AuthorsController',
    controllerAs: 'pc'
  }).state('app.authors.list', {
    group: 'authors',
    url: "/list",
    templateUrl: 'components/personal/authors.html',
    controller: 'AuthorsController',
    controllerAs: 'pc',
    icon: 'fa fa-graduation-cap',
    permission: 'autori_list',
    gridPermission: 'zin_rezultats_base'
  }).state('app.personal.edit', {
    group: 'personal',
    url: '/{id:int}/{tab}',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  }).state('app.personal.new', {
    group: 'personal',
    url: '/new',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  }).state('app.scientific_personal', {
    group: "scientific_personal",
    "abstract": true,
    url: "/scientific_personal",
    templateUrl: 'components/blank.html',
    controller: 'ScientificPersonalController',
    controllerAs: 'sp'
  }).state('app.scientific_personal.list', {
    group: "scientific_personal",
    url: "/list",
    templateUrl: 'components/scientific_personal/scientific_personal.html',
    controller: 'ScientificPersonalController',
    controllerAs: 'sp',
    icon: 'fa fa-user-circle-o',
    permission: 'zin_personals_list',
    gridPermission: 'personals_vards_uzvards',
    level: 0,
    reload: true
  }).state('app.scientific_personal.edit', {
    group: "scientific_personal",
    url: '/{id:int}/{tab}',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    controllerAs: 'spe',
    permission: 'zin_personals_editable'
  }).state('app.scientific_personal.new', {
    group: "scientific_personal",
    url: '/new',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    controllerAs: 'spe',
    permission: 'zin_personals_editable'
  }).state('app.academic_personal', {
    group: "academic_personal",
    "abstract": true,
    url: "/academic_personal",
    templateUrl: 'components/blank.html',
    controller: 'AcademicPersonalController',
    controllerAs: 'ap'
  }).state('app.academic_personal.list', {
    group: "academic_personal",
    url: "/list",
    templateUrl: 'components/academic_personal/academic_personal.html',
    controller: 'AcademicPersonalController',
    controllerAs: 'ap',
    icon: 'fa fa-user-circle',
    permission: 'akad_personals_list',
    gridPermission: 'zin_personals_editable',
    level: 0,
    reload: true
  }).state('app.academic_personal.edit', {
    group: "academic_personal",
    url: '/{id:int}/{tab}',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  }).state('app.academic_personal.new', {
    group: "academic_personal",
    url: '/new',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  }).state('app.eksperti', {
    group: 'eksperti',
    "abstract": true,
    url: "/eksperti",
    templateUrl: 'components/blank.html',
    controller: 'PersonalController2',
    controllerAs: 'ep'
  }).state('app.eksperti.list', {
    group: 'eksperti',
    url: "/list",
    templateUrl: 'components/eksperti/personal.html',
    controller: 'PersonalController2',
    controllerAs: 'pc',
    icon: 'fa fa-flask',
    permission: 'zin_personals_list',
    gridPermission: 'personals_lzp_eksperts_1',
    level: 0,
    reload: true
  }).state('app.eksperti.edit', {
    group: 'eksperti',
    url: '/{id:int}/{tab}',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  }).state('app.eksperti.new', {
    group: 'eksperti',
    url: '/new',
    templateUrl: 'components/scientific_personal/person_edit.html',
    controller: 'ScientificPersonalEditController',
    permission: 'zin_personals_editable',
    controllerAs: 'spe'
  })
  /*.state('app.eksperti2', {
      group: 'eksperti2',
      abstract: true,
      url: "/pieteikums",
      templateUrl: 'components/blank.html',
      controller: 'PersonalController2',
      controllerAs: 'ep'
  })
   .state('app.eksperti2.list', {
      group: 'eksperti2',
      url: "/list",
      templateUrl: 'components/eksperti/personal.html',
      controller: 'PersonalController2',
      controllerAs: 'pc',
      icon: 'fa fa-flask',
      permission: 'personals_list',
      gridPermission: 'personals_lzp_eksperts_1',
      level: 0,
      reload: true
  })*/
  .state('app.user_expert_application', {
    group: 'user_expert_application',
    "abstract": true,
    url: "/pieteikumsl",
    templateUrl: 'components/blank.html',
    controller: 'UserExpertApplicationController',
    controllerAs: 'ea'
  }).state('app.user_expert_application.list', {
    group: 'user_expert_application',
    url: "/list",
    templateUrl: 'components/expert_application/user_expert_application.html',
    controller: 'UserExpertApplicationController',
    controllerAs: 'ea',
    icon: 'fa fa-id-card-o',
    permission: 'pieteikumsl_list',
    gridPermission: 'pieteikumsl_editable',
    level: 0,
    reload: true
  }).state('app.user_expert_application.edit', {
    group: "user_expert_application",
    url: '/{id:int}',
    templateUrl: 'components/expert_application/user_expert_application_edit.html',
    controller: 'UserExpertApplicationFormController',
    permission: 'pieteikumsl_editable',
    controllerAs: 'eae'
  }).state('app.user_expert_application.new', {
    group: 'user_expert_application',
    url: '/new',
    templateUrl: 'components/expert_application/user_expert_application_edit.html',
    controller: 'UserExpertApplicationFormController',
    permission: 'pieteikumsl_editable',
    controllerAs: 'eae',
    params: {
      eaId: null
    }
  }).state('app.expert_application', {
    group: 'expert_application',
    "abstract": true,
    url: "/pieteikums",
    templateUrl: 'components/blank.html',
    controller: 'ExpertApplicationController',
    controllerAs: 'ea'
  }).state('app.expert_application.list', {
    group: 'expert_application',
    url: "/list",
    templateUrl: 'components/expert_application/expert_application.html',
    controller: 'ExpertApplicationController',
    controllerAs: 'ea',
    icon: 'fa fa-plus-square',
    permission: 'pieteikums_list',
    gridPermission: 'pieteikums_editable',
    level: 0,
    reload: true
  }).state('app.expert_application.edit', {
    group: "expert_application",
    url: '/{id:int}',
    templateUrl: 'components/expert_application/expert_application_edit.html',
    controller: 'ExpertApplicationFormController',
    permission: 'pieteikums_editable',
    controllerAs: 'eae'
  }).state('app.user_election_application', {
    group: 'user_election_application',
    "abstract": true,
    url: "/velesanu_pieteikumsl",
    templateUrl: 'components/blank.html',
    controller: 'UserElectionApplicationController',
    controllerAs: 'ea'
  }).state('app.user_election_application.list', {
    group: 'user_election_application',
    url: "/list",
    templateUrl: 'components/committee_elections/user_election_application.html',
    controller: 'UserElectionApplicationController',
    controllerAs: 'ea',
    icon: 'fa fa-address-book-o',
    permission: 'velesanu_pieteikumsl_list',
    gridPermission: 'velesanu_pieteikumsl_editable',
    level: 0,
    reload: true
  }).state('app.user_election_application.edit', {
    group: "user_election_application",
    url: '/{id:int}',
    templateUrl: 'components/committee_elections/user_election_application_edit.html',
    controller: 'UserElectionApplicationFormController',
    permission: 'velesanu_pieteikumsl_editable',
    controllerAs: 'eae'
  }).state('app.user_election_application.new', {
    group: 'user_election_application',
    url: '/new',
    templateUrl: 'components/committee_elections/user_election_application_edit.html',
    controller: 'UserElectionApplicationFormController',
    permission: 'velesanu_pieteikumsl_editable',
    controllerAs: 'eae'
  }).state('app.user_committee_elections', {
    group: 'user_committee_elections',
    "abstract": true,
    url: "/komisiju_velesanasl",
    templateUrl: 'components/blank.html'
  }).state('app.user_committee_elections.list', {
    group: 'user_committee_elections',
    url: "/view",
    templateUrl: 'components/committee_elections/user_committee_elections_edit.html',
    controller: 'UserCommitteeElectionsFormController',
    controllerAs: 'cee',
    icon: 'fa fa-thumbs-o-up',
    permission: 'komisiju_velesanasl_editable',
    level: 0,
    reload: true
  }).state('app.committee_elections', {
    group: 'committee_elections',
    "abstract": true,
    url: "/komisiju_velesanas",
    templateUrl: 'components/blank.html',
    controller: 'CommitteeElectionsController',
    controllerAs: 'ce'
  }).state('app.committee_elections.list', {
    group: 'committee_elections',
    url: "/list",
    templateUrl: 'components/committee_elections/committee_elections.html',
    controller: 'CommitteeElectionsController',
    controllerAs: 'ce',
    icon: 'fa fa-thumbs-o-up',
    permission: 'komisiju_velesanas_list',
    gridPermission: 'komisiju_velesanas_editable',
    reload: true
  }).state('app.committee_elections.edit', {
    group: "committee_elections",
    url: '/{id:int}',
    templateUrl: 'components/committee_elections/committee_elections_edit.html',
    controller: 'CommitteeElectionsFormController',
    permission: 'komisiju_velesanas_editable',
    controllerAs: 'cee'
  }).state('app.committee_elections.new', {
    group: "committee_elections",
    url: '/new',
    templateUrl: 'components/committee_elections/committee_elections_edit.html',
    controller: 'CommitteeElectionsFormController',
    permission: 'komisiju_velesanas_editable',
    controllerAs: 'cee'
  }).state('app.election_application', {
    group: 'election_application',
    "abstract": true,
    url: "/velesanu_pieteikums",
    templateUrl: 'components/blank.html'
  }).state('app.election_application.edit', {
    group: "election_application",
    url: '/{id:int}',
    templateUrl: 'components/committee_elections/election_application_edit.html',
    controller: 'ElectionApplicationFormController',
    permission: 'velesanu_pieteikums_editable',
    controllerAs: 'eae'
  }).state('app.contract_research', {
    group: "contract_research",
    "abstract": true,
    url: "/contract_research",
    templateUrl: 'components/blank.html',
    controller: 'ContractResearchController',
    controllerAs: 'cr'
  }).state('app.contract_research.list', {
    group: "contract_research",
    url: "/list",
    templateUrl: 'components/contract_research/contract_research.html',
    controller: 'ContractResearchController',
    controllerAs: 'cr',
    icon: 'fa fa-eur',
    permission: 'ligumpetijums_list',
    gridPermission: 'ligumpetijums',
    level: 0
  }).state('app.contract_research.edit', {
    group: "he_institution",
    url: '/{id:int}',
    templateUrl: 'components/contract_research/contract_research_edit.html',
    controller: 'ContractResearchFormController',
    permission: 'ligumpetijums',
    controllerAs: 'cre'
  }).state('app.contract_research.new', {
    group: "he_institution",
    url: '/new/',
    templateUrl: 'components/contract_research/contract_research_edit.html',
    controller: 'ContractResearchFormController',
    controllerAs: 'cre',
    permission: 'ligumpetijums'
  }).state('app.project_catalog', {
    group: "project_catalog",
    url: "/project_catalog",
    "abstract": true,
    templateUrl: 'components/blank.html',
    controller: 'ProjectCatalogController',
    controllerAs: 'pc'
  }).state('app.project_catalog.list', {
    group: "project_catalog",
    url: "/list",
    templateUrl: 'components/project_catalog/project_catalog.html',
    controller: 'ProjectCatalogController',
    controllerAs: 'pc',
    icon: 'fa fa-book',
    permission: 'projekts_list',
    gridPermission: 'projekts_pamatdati',
    level: 0,
    reload: true
  }).state('app.project_catalog.edit', {
    group: "project_catalog",
    url: '/{id:int}',
    templateUrl: 'components/project_catalog/project_edit.html',
    controller: 'ProjectCatalogEditController',
    controllerAs: 'pce',
    permission: 'projekts'
  }).state('app.project_catalog.new', {
    group: "project_catalog",
    url: '/new',
    templateUrl: 'components/project_catalog/project_edit.html',
    controller: 'ProjectCatalogEditController',
    controllerAs: 'pce',
    permission: 'projekts'
  }).state('app.project_overview', {
    group: "project_overview",
    "abstract": true,
    url: "/project_overview",
    templateUrl: 'components/blank.html',
    controller: 'ScientificOverviewController',
    controllerAs: 'po'
  }).state('app.project_overview.list', {
    group: "project_overview",
    url: "/list",
    templateUrl: 'components/project_overview/project_overview.html',
    controller: 'ScientificOverviewController',
    controllerAs: 'po',
    permission: 'projekta_parskats_list',
    gridPermission: 'projekta_parskats',
    icon: 'fa fa-table',
    level: 0
  }).state('app.project_overview.edit', {
    group: "project_overview",
    url: '/{id:int}',
    permission: 'projekta_parskats',
    templateUrl: 'components/project_overview/project_overview_edit.html',
    controller: 'ScientificOverviewEditController',
    controllerAs: 'poe'
  }).state('app.project_overview.new', {
    group: "project_overview",
    url: '/new',
    permission: 'projekta_parskats',
    templateUrl: 'components/project_overview/project_overview_edit.html',
    controller: 'ScientificOverviewEditController',
    controllerAs: 'poe',
    params: {
      type: null,
      poId: null
    }
  }).state('app.scientific_action_results', {
    group: "scientific_action_results",
    "abstract": true,
    url: "/scientific_action_results",
    templateUrl: 'components/blank.html',
    controller: 'ScientificActionResultsController',
    controllerAs: 'sar'
  }).state('app.scientific_action_results.list', {
    group: "scientific_action_results",
    url: "/list",
    templateUrl: 'components/scientific_action_results/scientific_action_results.html',
    controller: 'ScientificActionResultsController',
    controllerAs: 'sar',
    icon: 'fa fa-folder',
    permission: 'zin_rezultats_list',
    gridPermission: 'zin_rezultats_base',
    level: 0
  }).state('app.scientific_action_results.edit', {
    group: "scientific_action_results",
    url: '/{id:int}/{type:int}',
    templateUrl: 'components/scientific_action_results/scientific_action_result_edit.html',
    controller: 'ScientificActionResultsEditController',
    controllerAs: 'sarf',
    permission: 'zin_rezultats_base'
  }).state('app.scientific_action_results.new', {
    group: "scientific_action_results",
    url: '/new',
    templateUrl: 'components/scientific_action_results/scientific_action_result_edit.html',
    controller: 'ScientificActionResultsEditController',
    controllerAs: 'sarf',
    permission: 'zin_rezultats_base',
    params: {
      type: null,
      nosaukums: null,
      izdosanas_gads: null,
      registracijas_datums: null,
      konference_no: null,
      konference_lidz: null
    }
  }).state('app.scientific_action_results_merge_tool', {
    group: "scientific_action_results_merge_tool",
    "abstract": true,
    url: "/scientific_action_results_merge_tool",
    templateUrl: 'components/blank.html'
  }).state('app.scientific_action_results_merge_tool.edit', {
    group: "scientific_action_results_merge_tool",
    url: '/edit',
    templateUrl: 'components/scientific_action_results/scientific_action_results_merge_tool_edit.html',
    controller: 'ScientificActionResultsMergeToolEditController',
    permission: 'zin_rezultats_apvienosana',
    controllerAs: 'sarf',
    params: {
      type: null,
      zin_rez1_id: null,
      zin_rez2_id: null
    }
  }).state('app.equipment', {
    group: 'equipment',
    "abstract": true,
    url: "/iekarta",
    templateUrl: 'components/blank.html',
    controller: 'EquipmentController',
    controllerAs: 'en'
  }).state('app.equipment.list', {
    group: 'equipment',
    url: "/list",
    templateUrl: 'components/equipment/equipment.html',
    controller: 'EquipmentController',
    controllerAs: 'en',
    icon: 'fa fa-database',
    permission: 'iekarta_list',
    gridPermission: 'iekarta_pamatdati',
    level: 0,
    reload: true
  }).state('app.equipment.edit', {
    group: "equipment",
    url: '/{id:int}',
    templateUrl: 'components/equipment/equipment_edit.html',
    controller: 'EquipmentFormController',
    permission: 'iekarta_editable',
    controllerAs: 'ene'
  }).state('app.equipment.new', {
    group: "equipment",
    url: '/new',
    templateUrl: 'components/equipment/equipment_edit.html',
    controller: 'EquipmentFormController',
    permission: 'iekarta_editable',
    controllerAs: 'ene'
  }).state('app.scientific_institution_report', {
    group: 'scientific_institution_report',
    "abstract": true,
    url: "/institucijas_gada_parskats",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report.list', {
    group: 'scientific_institution_report',
    url: "/list",
    templateUrl: 'components/scientific_institution_report/scientific_institution_report.html',
    controller: 'ScientificInstitutionReportController',
    controllerAs: 'cnrl',
    icon: 'fa fa-line-chart',
    permission: 'institucijas_gada_parskats_list',
    gridPermission: 'institucijas_gada_parskats_editable',
    level: 0,
    reload: true
  }).state('app.scientific_institution_report.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_edit.html',
    controller: 'ScientificInstitutionReportFormController',
    permission: 'institucijas_gada_parskats_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report.new', {
    group: 'scientific_institution_report',
    url: '/new',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_edit.html',
    controller: 'ScientificInstitutionReportFormController',
    permission: 'institucijas_gada_parskats_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p1', {
    group: 'scientific_institution_report_p1',
    "abstract": true,
    url: "/institucijas_gada_parskats_sa",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP1FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p1.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p1_edit.html',
    controller: 'ScientificInstitutionReportP1FormController',
    permission: 'institucijas_gada_parskats_sa_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p2', {
    group: 'scientific_institution_report_p2',
    "abstract": true,
    url: "/institucijas_gada_parskats_sb",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP2FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p2.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p2_edit.html',
    controller: 'ScientificInstitutionReportP2FormController',
    permission: 'institucijas_gada_parskats_sb_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p3', {
    group: 'scientific_institution_report_p3',
    "abstract": true,
    url: "/institucijas_gada_parskats_sc",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP3FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p3.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p3_edit.html',
    controller: 'ScientificInstitutionReportP3FormController',
    permission: 'institucijas_gada_parskats_sc_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p4', {
    group: 'scientific_institution_report_p4',
    "abstract": true,
    url: "/institucijas_gada_parskats_sd",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP4FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p4.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p4_edit.html',
    controller: 'ScientificInstitutionReportP4FormController',
    permission: 'institucijas_gada_parskats_sd_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p5', {
    group: 'scientific_institution_report_p5',
    "abstract": true,
    url: "/institucijas_gada_parskats_se",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP5FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p5.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p5_edit.html',
    controller: 'ScientificInstitutionReportP5FormController',
    permission: 'institucijas_gada_parskats_se_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p6', {
    group: 'scientific_institution_report_p6',
    "abstract": true,
    url: "/institucijas_gada_parskats_sf",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionReportP6FormController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_report_p6.edit', {
    group: "scientific_institution_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_report_p6_edit.html',
    controller: 'ScientificInstitutionReportP6FormController',
    permission: 'institucijas_gada_parskats_sf_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_pub_report', {
    group: 'scientific_institution_pub_report',
    "abstract": true,
    url: "/institucijas_publ_parskats",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionPubReportController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_pub_report.list', {
    group: 'scientific_institution_pub_report',
    url: "/list",
    templateUrl: 'components/scientific_institution_report/scientific_institution_pub_report.html',
    controller: 'ScientificInstitutionPubReportController',
    controllerAs: 'cnrl',
    icon: 'fa fa-bar-chart',
    permission: 'institucijas_publ_parskats_list',
    gridPermission: 'institucijas_publ_parskats_editable',
    level: 0,
    reload: true
  }).state('app.scientific_institution_pub_report.edit', {
    group: "scientific_institution_pub_report",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_report/scientific_institution_pub_report_edit.html',
    controller: 'ScientificInstitutionPubReportFormController',
    permission: 'institucijas_publ_parskats_editable',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_evaluation', {
    group: 'scientific_institution_evaluation',
    "abstract": true,
    url: "/institucijas_novertejums",
    templateUrl: 'components/blank.html',
    controller: 'ScientificInstitutionEvaluationController',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_evaluation.list', {
    group: 'scientific_institution_evaluation',
    url: "/list",
    templateUrl: 'components/scientific_institution_evaluation/scientific_institution_evaluation.html',
    controller: 'ScientificInstitutionEvaluationController',
    controllerAs: 'cnrl',
    icon: 'fa fa-balance-scale',
    permission: 'institucijas_novertejums_list',
    gridPermission: 'institucijas_novertejums',
    level: 0,
    reload: true
  }).state('app.scientific_institution_evaluation.edit', {
    group: "scientific_institution_evaluation",
    url: '/{id:int}',
    templateUrl: 'components/scientific_institution_evaluation/scientific_institution_evaluation_edit.html',
    controller: 'ScientificInstitutionEvaluationFormController',
    permission: 'institucijas_novertejums',
    controllerAs: 'cnrl'
  }).state('app.scientific_institution_evaluation.new', {
    group: 'scientific_institution_evaluation',
    url: '/new',
    templateUrl: 'components/scientific_institution_evaluation/scientific_institution_evaluation_edit.html',
    controller: 'ScientificInstitutionEvaluationFormController',
    permission: 'institucijas_novertejums',
    controllerAs: 'cnrl'
  }).state('app.scientific_branch_classifier', {
    group: "scientific_branch_classifier",
    "abstract": true,
    url: "/scientific_branch_classifier",
    templateUrl: 'components/blank.html',
    controller: 'ScientificBranchClassifierController',
    controllerAs: 'sbc'
  }).state('app.scientific_branch_classifier.list', {
    group: "scientific_branch_classifier",
    url: "/list",
    templateUrl: 'components/scientific_branch_classifier/scientific_branch_classifier.html',
    controller: 'ScientificBranchClassifierController',
    controllerAs: 'sbc',
    icon: 'fa fa-tasks',
    permission: 'zinatnes_nozares_list',
    gridPermission: 'zinatnes_nozare',
    level: 0
  }).state('app.scientific_branch_classifier.edit', {
    group: "scientific_branch_classifier",
    url: '/{id:int}',
    templateUrl: 'components/scientific_branch_classifier/scientific_branch_classifier_edit.html',
    controller: 'ScientificBranchClassifierFormController',
    permission: 'zinatnes_nozare',
    controllerAs: 'sbcf'
  }).state('app.scientific_branch_classifier.new', {
    group: "scientific_branch_classifier",
    url: '/new',
    templateUrl: 'components/scientific_branch_classifier/scientific_branch_classifier_edit.html',
    controller: 'ScientificBranchClassifierFormController',
    permission: 'zinatnes_nozare',
    controllerAs: 'sbcf'
  }).state('app.users', {
    group: "users",
    url: "/users",
    "abstract": true,
    templateUrl: 'components/blank.html',
    controller: 'UsersController',
    controllerAs: 'uc'
  }).state('app.users.list', {
    group: "users",
    url: "/list",
    templateUrl: 'components/users/users.html',
    controller: 'UsersController',
    controllerAs: 'uc',
    icon: 'fa fa-user',
    permission: 'lietotajs_list',
    gridPermission: 'lietotajs_editable_admin',
    level: 0
  }).state('app.users.edit', {
    group: "users",
    url: '/{id:int}',
    templateUrl: 'components/users/users_edit.html',
    controller: 'UsersManageController',
    controllerAs: 'uec',
    permission: 'lietotajs_editable_admin'
  }).state('app.profile', {
    group: "profile",
    url: '/profile',
    templateUrl: 'components/users/users_edit.html',
    controller: 'UsersProfileController',
    controllerAs: 'uec',
    permission: 'paroles_maina_lietotajs'
  }).state('app.users.new', {
    group: "users",
    url: '/new',
    templateUrl: 'components/users/users_edit.html',
    controller: 'UsersManageController',
    controllerAs: 'uec',
    permission: 'lietotajs_editable_admin'
  }).state('app.roles', {
    group: "roles",
    url: "/roles",
    "abstract": true,
    templateUrl: 'components/blank.html',
    controller: 'RolesController',
    controllerAs: 'rc'
  }).state('app.roles.list', {
    group: "roles",
    url: "/list",
    templateUrl: 'components/roles/roles.html',
    controller: 'RolesController',
    controllerAs: 'rc',
    icon: 'fa fa-group',
    permission: 'loma_list',
    gridPermission: 'loma',
    level: 0
  }).state('app.roles.edit', {
    group: "roles",
    url: '/{id:int}',
    templateUrl: 'components/roles/roles_edit.html',
    controller: 'RolesEditController',
    permission: 'loma',
    controllerAs: 'rec'
  }).state('app.roles.new', {
    group: "roles",
    url: '/new',
    templateUrl: 'components/roles/roles_edit.html',
    controller: 'RolesEditController',
    permission: 'loma',
    controllerAs: 'rec'
  }).state('app.codificators', {
    group: "codificators",
    "abstract": true,
    url: "/codificators",
    templateUrl: 'components/blank.html',
    controller: 'CodificatorController',
    controllerAs: 'cc'
  }).state('app.codificators.list', {
    group: "codificators",
    url: "/list",
    templateUrl: 'components/codificators/codificator.html',
    controller: 'CodificatorController',
    controllerAs: 'cc',
    icon: 'fa fa-gear',
    permission: 'kodifikators_list',
    gridPermission: 'kodifikatora_ieraksts',
    level: 0
  }).state('app.codificators.edit', {
    group: "codificators",
    url: '/{id:int}',
    templateUrl: 'components/codificators/codificator_edit.html',
    controller: 'CodificatorEditController',
    permission: 'kodifikatora_ieraksts',
    controllerAs: 'cce'
  }).state('app.codif_merge_tool', {
    group: "codif_merge_tool",
    "abstract": true,
    url: "/codif_merge_tool",
    templateUrl: 'components/blank.html'
  }).state('app.codif_merge_tool.edit', {
    group: "codif_merge_tool",
    url: '/{id:int}',
    templateUrl: 'components/codificators/codif_merge_tool_edit.html',
    controller: 'CodifMergeToolEditController',
    permission: 'kodifikators_administret',
    controllerAs: 'cce'
  }).state('app.email_notification', {
    group: 'email_notification',
    "abstract": true,
    url: "/epasta_pazinojums",
    templateUrl: 'components/blank.html',
    controller: 'EmailNotificationController',
    controllerAs: 'en'
  }).state('app.email_notification.list', {
    group: 'email_notification',
    url: "/list",
    templateUrl: 'components/email_notification/email_notification.html',
    controller: 'EmailNotificationController',
    controllerAs: 'en',
    icon: 'fa fa-envelope',
    permission: 'epasta_pazinojums_list',
    gridPermission: 'epasta_pazinojums_editable',
    level: 0,
    reload: true
  }).state('app.email_notification.edit', {
    group: "email_notification",
    url: '/{id:int}',
    templateUrl: 'components/email_notification/email_notification_edit.html',
    controller: 'EmailNotificationFormController',
    permission: 'epasta_pazinojums_editable',
    controllerAs: 'ene'
  }).state('app.supervisory_board', {
    group: 'supervisory_board',
    "abstract": true,
    url: "/uzraudzibas_komisija",
    templateUrl: 'components/blank.html',
    controller: 'SupervisoryBoardController',
    controllerAs: 'sb'
  }).state('app.supervisory_board.list', {
    group: 'supervisory_board',
    url: "/list",
    templateUrl: 'components/supervisory_board/supervisory_board.html',
    controller: 'SupervisoryBoardController',
    controllerAs: 'sb',
    icon: 'fa fa-bell',
    permission: 'uzraudzibas_komisija_list',
    gridPermission: 'uzraudzibas_komisija_editable',
    level: 0,
    reload: true
  }).state('app.supervisory_board.edit', {
    group: "supervisory_board",
    url: '/{id:int}',
    templateUrl: 'components/supervisory_board/supervisory_board_edit.html',
    controller: 'SupervisoryBoardFormController',
    permission: 'uzraudzibas_komisija_editable',
    controllerAs: 'sbe'
  }).state('app.supervisory_board.new', {
    group: "supervisory_board",
    url: '/new',
    templateUrl: 'components/supervisory_board/supervisory_board_edit.html',
    controller: 'SupervisoryBoardFormController',
    permission: 'uzraudzibas_komisija_editable',
    controllerAs: 'sbe'
  }).state('app.budget_expenses_position', {
    group: 'budget_expenses_position',
    "abstract": true,
    url: "/budzeta_izdevumu_klasifikacija",
    templateUrl: 'components/blank.html',
    controller: 'BudgetExpensesPositionController',
    controllerAs: 'en'
  }).state('app.budget_expenses_position.list', {
    group: 'budget_expenses_position',
    url: "/list",
    templateUrl: 'components/budget_expenses_position/budget_expenses_position.html',
    controller: 'BudgetExpensesPositionController',
    controllerAs: 'en',
    icon: 'fa fa-money',
    permission: 'budzeta_izdevumu_klasifikacija_list',
    gridPermission: 'budzeta_izdevumu_klasifikacija_editable',
    level: 0,
    reload: true
  }).state('app.budget_expenses_position.edit', {
    group: "budget_expenses_position",
    url: '/{id:int}',
    templateUrl: 'components/budget_expenses_position/budget_expenses_position_edit.html',
    controller: 'BudgetExpensesPositionFormController',
    permission: 'budzeta_izdevumu_klasifikacija_editable',
    controllerAs: 'ene'
  }).state('app.budget_expenses_position.new', {
    group: "budget_expenses_position",
    url: '/new',
    templateUrl: 'components/budget_expenses_position/budget_expenses_position_edit.html',
    controller: 'BudgetExpensesPositionFormController',
    permission: 'budzeta_izdevumu_klasifikacija_editable',
    controllerAs: 'ene'
  }).state('app.sci_branch_lzp', {
    group: "sci_branch_lzp",
    "abstract": true,
    url: "/sci_branch_lzp",
    templateUrl: 'components/blank.html',
    controller: 'LZPController',
    controllerAs: 'lzp'
  }).state('app.sci_branch_lzp.list', {
    group: "sci_branch_lzp",
    url: "/list",
    templateUrl: 'components/sci_branch_lzp/sci_branch_lzp.html',
    controller: 'LZPController',
    controllerAs: 'lzp',
    permission: 'zinatnes_nozare_lzp_list',
    gridPermission: 'zinatnes_nozare_lzp'
  }).state('app.sci_branch_lzp.edit', {
    group: "sci_branch_lzp",
    url: '/{id:int}',
    templateUrl: 'components/sci_branch_lzp/sci_branch_lzp_edit.html',
    controller: 'LZPEditController',
    permission: 'zinatnes_nozare_lzp',
    controllerAs: 'lzpe'
  }).state('app.sci_branch_lzp.new', {
    group: "sci_branch_lzp",
    url: '/new',
    templateUrl: 'components/sci_branch_lzp/sci_branch_lzp_edit.html',
    controller: 'LZPEditController',
    permission: 'zinatnes_nozare_lzp',
    controllerAs: 'lzpe'
  }).state('app.audit', {
    group: "audit",
    "abstract": true,
    url: "/audit",
    templateUrl: 'components/blank.html',
    controller: 'AuditController',
    controllerAs: 'au'
  }).state('app.audit.list', {
    group: "audit",
    url: "/list",
    templateUrl: 'components/audit/audit.html',
    controller: 'AuditController',
    controllerAs: 'au',
    icon: 'fa fa-eye',
    permission: 'audit',
    gridPermission: 'audit',
    level: 0
  }).state('app.sso', {
    group: "sso",
    "abstract": true,
    url: "/sso",
    templateUrl: 'components/blank.html',
    controller: 'SSOController',
    controllerAs: 'sso'
  }).state('app.sso.list', {
    group: "sso",
    url: "/list",
    templateUrl: 'components/sso/sso.html',
    controller: 'SSOController',
    controllerAs: 'sso',
    icon: 'fa fa-external-link',
    permission: 'sso',
    gridPermission: 'sso',
    level: 0
  }).state('app.sso.edit', {
    group: "sso",
    url: '/{id:int}',
    templateUrl: 'components/sso/sso_edit.html',
    controller: 'SSOEditController',
    permission: 'sso',
    controllerAs: 'ssof'
  }).state('app.sso.new', {
    group: "sso",
    url: '/new',
    templateUrl: 'components/sso/sso_edit.html',
    controller: 'SSOEditController',
    permission: 'sso',
    controllerAs: 'ssof'
  }).state('app.xlsimport', {
    group: "xlsimport",
    "abstract": true,
    url: "/xls",
    templateUrl: 'components/blank.html'
  }).state('app.xlsimport.form', {
    group: "xlsimport",
    "abstract": false,
    url: "/form",
    templateUrl: 'components/xlsimport/main.html',
    permission: 'xlsx_imports',
    icon: 'fa fa-upload',
    level: 0
  }).state('app.import', {
    group: "import",
    url: "/import",
    "abstract": true,
    templateUrl: 'components/blank.html',
    controller: 'ImportController',
    controllerAs: 'im'
  }).state('app.import.list', {
    group: "import",
    url: "/list",
    templateUrl: 'components/import/import.html',
    controller: 'ImportController',
    controllerAs: 'im',
    icon: 'fa fa-check-square-o',
    permission: 'imports_list',
    gridPermission: 'imports_list',
    level: 0,
    reload: true
  }).state('app.translations', {
    group: "translations",
    "abstract": true,
    url: "/translations",
    templateUrl: 'components/blank.html'
  }).state('app.translations.form', {
    group: "translations",
    "abstract": false,
    url: "/form",
    templateUrl: 'components/translations/translations_edit.html',
    controller: 'TranslationsFormController',
    controllerAs: 'cnrl',
    permission: 'valoda_editable',
    icon: 'fa fa-pencil-square-o',
    level: 0
  }).state('app.system_config', {
    group: "system_config",
    "abstract": true,
    url: "/system_config",
    templateUrl: 'components/blank.html'
  }).state('app.system_config.form', {
    group: "system_config",
    "abstract": false,
    url: "/form",
    templateUrl: 'components/system_config/system_config_edit.html',
    controller: 'SystemConfigFormController',
    controllerAs: 'cnrl',
    permission: 'sistemas_konfiguracija_editable',
    icon: 'fa fa-cogs',
    level: 0
  }).state('app.notifications1', {
    group: "notifications1",
    "abstract": true,
    url: "/notifications1",
    templateUrl: 'components/blank.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf'
  }).state('app.notifications2', {
    group: "notifications2",
    "abstract": true,
    url: "/notifications2",
    templateUrl: 'components/blank.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf'
  }).state('app.notifications3', {
    group: "notifications3",
    "abstract": true,
    url: "/notifications3",
    templateUrl: 'components/blank.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf'
  }).state('app.notifications1.edit', {
    group: "notifications1",
    url: '/{id:int}',
    templateUrl: 'components/notifications/notifications_edit.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf',
    permission: 'pazinojums_1'
  }).state('app.notifications2.edit', {
    group: "notifications2",
    url: '/{id:int}',
    templateUrl: 'components/notifications/notifications_edit.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf',
    permission: 'pazinojums_2'
  }).state('app.notifications3.edit', {
    group: "notifications3",
    url: '/{id:int}',
    templateUrl: 'components/notifications/notifications_edit.html',
    controller: 'NotificationsEditController',
    controllerAs: 'ntf',
    permission: 'pazinojums_3'
  }).state('app.home', {
    group: "home",
    url: "/home",
    templateUrl: 'components/home/home.html',
    controller: 'HomeController',
    permission: 'public',
    controllerAs: 'ho',
    reload: true
  }).state('app.about', {
    group: "about",
    url: "/about",
    templateUrl: 'components/about/about.html',
    controller: 'AboutController',
    controllerAs: 'ab',
    permission: 'public'
  }).state('app.404', {
    group: "404",
    url: "/404",
    templateUrl: 'components/404.html',
    permission: 'public'
  }).state('app.no_access', {
    url: "/nav-pieejas",
    templateUrl: 'components/nav-pieejas.html',
    controller: 'AuthController',
    permission: 'public',
    params: {
      missing_permission: null
    }
  }) // re-enabled because sso login needs some uri to redirect to
  .state('app.login', {
    url: "/login",
    templateUrl: "components/authentification/authentification.html",
    controller: 'AuthController',
    controllerAs: 'au',
    permission: 'public',
    params: {
      showLoginDialog: true,
      showLogoutMessage: null,
      ret: null,
      retParams: null
    }
  });
}

function run($rootScope, uuiData, ngDialog, $location, dataService, $cookies, $http, $timeout, $state, gettextCatalog, $document, authService, Notification, $filter) {
  dataService.listDefault('valoda_list').then(function (data) {
    $rootScope.languages = data;
  }); // nevajag nekur kontrolieros kopīpeistot un lietot ng-click="ctl.gotoState('app.zzz', ...)", ja var vienkārši ng-click="goto('app.zzz', ...)"

  $rootScope["goto"] = function (s, id, type) {
    return $state.go(s, {
      id: id,
      type: type
    });
  };

  $rootScope.mainNavAlias = {
    'scientific_branch_classifier': gettextCatalog.getString('Zinātnisko nozaru klasifikators', null, 'Galvenā izvēlne'),
    'academic_personal': gettextCatalog.getString('Akadēmiskais personāls', null, 'Galvenā izvēlne'),
    'scientific_personal': gettextCatalog.getString('Zinātniskie darbinieki', null, 'Galvenā izvēlne'),
    'scientific_institution': gettextCatalog.getString('Zinātniskās institūcijas', null, 'Galvenā izvēlne'),
    'business': gettextCatalog.getString('Komersanti', null, 'Galvenā izvēlne'),
    'he_institution': gettextCatalog.getString('Augstākās izglītības iestāde', null, 'Galvenā izvēlne'),
    'contract_research': gettextCatalog.getString('Līgumpētījumi', null, 'Galvenā izvēlne'),
    'project_catalog': gettextCatalog.getString('Projekti', null, 'Galvenā izvēlne'),
    'scientific_action_results': gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Galvenā izvēlne'),
    'project_overview': gettextCatalog.getString('Projektu īstenošanas dokumentācija', null, 'Galvenā izvēlne'),
    'personal': gettextCatalog.getString('Personāls', null, 'Galvenā izvēlne'),
    'cu_personal': gettextCatalog.getString('Mani personas dati', null, 'Galvenā izvēlne'),
    'eksperti': gettextCatalog.getString('Eksperti', null, 'Galvenā izvēlne'),
    'users': gettextCatalog.getString('Lietotāji', null, 'Galvenā izvēlne'),
    'roles': gettextCatalog.getString('Lomas', null, 'Galvenā izvēlne'),
    'codificators': gettextCatalog.getString('Kodifikatori', null, 'Galvenā izvēlne'),
    'home': gettextCatalog.getString('Mājas', null, 'Galvenā izvēlne'),
    'about': gettextCatalog.getString('Par sistēmu', null, 'Galvenā izvēlne'),
    'test': gettextCatalog.getString('Test', null, 'Galvenā izvēlne'),
    'user_material': gettextCatalog.getString('Sistēmas lietotāja materiāli', null, 'Galvenā izvēlne'),
    'import': gettextCatalog.getString('Augšupielādēto datu apstiprināšana', null, 'Galvenā izvēlne'),
    'xlsimport': gettextCatalog.getString('XLSX imports', null, 'Galvenā izvēlne'),
    'sso': gettextCatalog.getString('Ārējās sistēmas', null, 'Galvenā izvēlne'),
    'audit': gettextCatalog.getString('Darbību vēsture', null, 'Galvenā izvēlne'),
    'expert_application': gettextCatalog.getString('LZP eksperta tiesību pieteikumi', null, 'Galvenā izvēlne'),
    'user_expert_application': gettextCatalog.getString('Mani LZP eksperta tiesību pieteikumi', null, 'Galvenā izvēlne'),
    'user_committee_elections': gettextCatalog.getString('LZP ekspertu komisiju vēlēšanas', null, 'Galvenā izvēlne'),
    'user_election_application': gettextCatalog.getString('Mani LZP ekspertu komisiju vēlēšanu pieteikumi', null, 'Galvenā izvēlne'),
    'email_notification': gettextCatalog.getString('Epasta paziņojumi', null, 'Galvenā izvēlne'),
    'supervisory_board': gettextCatalog.getString('Projektu uzraudzības komisijas', null, 'Galvenā izvēlne'),
    'scientific_institution_report': gettextCatalog.getString('Zinātnisko institūciju gada pārskati', null, 'Galvenā izvēlne'),
    'scientific_institution_pub_report': gettextCatalog.getString('Zinātnisko institūciju publiskie pārskati', null, 'Galvenā izvēlne'),
    'scientific_institution_evaluation': gettextCatalog.getString('Zinātnisko institūciju starptautiskie novērtējumi', null, 'Galvenā izvēlne'),
    'budget_expenses_position': gettextCatalog.getString('Budžeta izdevumu klasifikators', null, 'Galvenā izvēlne'),
    'equipment': gettextCatalog.getString('Zinātnisko iekārtu datubāze', null, 'Galvenā izvēlne'),
    'translations': gettextCatalog.getString('Tulkojumi', null, 'Galvenā izvēlne'),
    'system_config': gettextCatalog.getString('Sistēmas konfigurācija', null, 'Galvenā izvēlne')
  };
  $rootScope.currentUserRights = null;
  $rootScope.fromState = null;
  $rootScope.allowPrint = false;
  $rootScope.allowEdit = false;
  $rootScope.checkUnsavedData = false;
  $rootScope.showUnsavedDataDialog = true;

  var updatePageTitle = function updatePageTitle(state) {
    var title = 'NZDIS';

    if (state.group && state.group != 'home') {
      if ($rootScope.mainNavAlias[state.group]) {
        title = $rootScope.mainNavAlias[state.group] + ' — NZDIS';
      }
    }

    document.title = title;
  };

  $rootScope.stateTransitionCheck = function (state, params) {
    var event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var user = authService.u; // kamēr notiek transition checks, nekādas paralēlas darbības

    authService.handle_401_enabled = false;

    if (!user.contexts_ready || !uuiData.$api) {
      msg("stateTransitionCheck will wait for data ready");
      return authService.promise.then(function () {
        // pamēģināsim vēlreiz, kad dati būs ielādēti, bet eventu nerejectosim
        $rootScope.stateTransitionCheck(state, params, null);
      });
    }

    var my_context = user.context || Object.keys(user.contexts)[0];
    var url_context = params.context; // kāds konteksts nāk ar saiti?

    msg("State transition check running for ".concat(state.name, "; my_context: ").concat(my_context, ", url_context: ").concat(url_context));

    do {
      // mums pastāv steita prasītais konteksts, bet šobrīd esam citā? svičojam, dodot ziņu userim
      if (url_context !== my_context && !!user.contexts[url_context]) {
        event && event.preventDefault();
        return authService.setContext(params.context).then(function () {
          $state.go(state.name, params, {
            reload: true
          });
        });
      } // šobrīd mēs esam tajā pašā kontekstā, kurš requestots VAI citā, bet tāda, kura mums nav
      // skatāmies tīri uz steitam nepieciešamajām permīcijām un, vai nu lietojam esošo kontekstu, ja tas der, vai errorojam


      var permission = state.permission; // steits neprasa nekādas permīcijas? lieliski, lietojam to pašu steitu, kas mums jau ir

      if (!permission || permission === 'public') {
        break;
      } // steits prasa kādas permīcijas, un mums tās ir? lieliski


      var user_perms = uuiData.$api;
      msg("Required permissions ".concat(permission, ", ours: ").concat(JSON.stringify(user_perms[permission])));

      if (user_perms[permission]) {
        // mums ir korektā permīcija
        break;
      } // tricky: steits prasa kaut kādas permīcijas, un mēs neesam tai kontekstā, kas nāk līdz ar saiti


      if (!user.is_logged_in) {
        // neesi ielogojies? pienāc vēlāk
        msg('Transition to login');
        event && event.preventDefault();
        $state.go('app.login', {
          context: my_context,
          ret: state.name,
          retParams: params,
          notify: false
        });
        return;
      }

      msg('would transition to no-access-page');
      event && event.preventDefault();
      $state.go('app.no_access', {
        missing_permission: permission
      });
      authService.handle_401_enabled = true;
      return;
    } while (false);

    authService.handle_401_enabled = true;

    if (url_context == 'authentication') {
      $state.go('app.login', _objectSpread(_objectSpread({}, params), {}, {
        context: my_context
      }), {
        reload: true,
        notify: true
      });
    } else if (url_context != my_context) {
      event && event.preventDefault();
      msg("Apdeito saiti, lai atbilstu mūsu cur. kontekstam");
      authService.setContext(my_context).then(function () {
        $state.go(state.name, _objectSpread(_objectSpread({}, params), {}, {
          context: my_context
        }), {
          reload: true,
          notify: true
        });
      });
    }
  }; //FIXME re-enable to avoid basic auth popup, when login/logout fixed


  $http.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

  function checkPermissions(event, toState) {
    function redirectTo404() {
      event.preventDefault();
      $timeout(function () {
        $state.go('app.404');
      });
    }

    if (toState.permission == 'public' || !toState.permission) {
      $rootScope.allowPrint = true;
      return;
    }

    var p = authService.perms[toState.permission];

    if (!p) {
      return redirectTo404();
    }

    if (toState.name.substr(-4, 4) == '.new') {
      if (!p.save) return redirectTo404();
      $rootScope.allowPrint = false;
    } else if (toState.name.substr(-5, 5) == '.edit') {
      if (!p.get) return redirectTo404();
      $rootScope.allowPrint = true;
    } else if (toState.name.substr(-5, 5) == '.list') {
      if (!p.list) return redirectTo404();
      $rootScope.allowPrint = true;
    }
  } // loade language json file


  if (!$cookies.get("current_language")) {
    $cookies.put("current_language", 'lv');
  }

  $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
    $rootScope.stateTransitionCheck(toState, toParams, event); // trīs gadus kļūdaini nedarbojās, tapēc ar Jūliju vienojāmies atpakaļ neslēgt

    if (false && $rootScope.checkUnsavedData) {
      event.preventDefault();

      if ($rootScope.showUnsavedDataDialog) {
        $rootScope.showUnsavedDataDialog = false;
        ngDialog.openConfirm({
          template: 'shared/factories/tpl/discard-unsaved-changes.html'
        }).then(function (value) {
          $rootScope.checkUnsavedData = false;
          $rootScope.showUnsavedDataDialog = true;
          $state.go(toState.name, toParams);
        }, function () {
          $rootScope.showUnsavedDataDialog = true;
        });
      }
    }
  });

  $rootScope.handleError = function (err) {
    $rootScope.showLoader = false;
    console.log(err);

    if (typeof err.data === 'string') {
      Notification.error(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
    } else {
      Notification.error(gettextCatalog.getString('Sistēmas kļūda!'));
    } // throw err;

  };

  $rootScope.handleErrorNew = function (err) {
    $rootScope.showLoader = false;
    console.log(err);
    var data = {
      type: 'ERR'
    };

    if (typeof err.data === 'string') {
      data.msg = err.data;
    }

    ngDialog.openConfirm({
      template: 'shared/factories/tpl/msgDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: data
    }).then(function () {});
  };

  $rootScope.showErrorMsg = function (msg) {
    var data = {
      type: 'ERR'
    };

    if (msg) {
      data.msg = msg;
    }

    ngDialog.openConfirm({
      template: 'shared/factories/tpl/msgDialog.html',
      className: 'ngdialog-theme-default dialog600',
      data: data
    }).then(function () {});
  };

  $rootScope.showWarningMsg = function (msg) {
    var data = {
      type: 'WARN'
    };

    if (msg) {
      data.msg = msg;
    }

    ngDialog.openConfirm({
      template: 'shared/factories/tpl/msgDialog.html',
      className: 'ngdialog-theme-default dialog600',
      data: data
    }).then(function () {});
  };

  $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
    updatePageTitle(toState);
    $rootScope.allowEdit = false;

    if (toState.name.indexOf(".new") > -1) {
      $rootScope.editUrl = toState.name.replace(".new", ".edit");
      $rootScope.backUrl = toState.name.replace(".new", ".list");
    }

    if (toState.name.indexOf(".edit") > -1) {
      if (fromState.name.indexOf(".edit") > -1) {
        $rootScope.backUrl = fromState.name + '(' + JSON.stringify(fromParams) + ')';
      } else {
        $rootScope.backUrl = toState.name.replace(".edit", ".list");
      }
    }

    if (toState.name.indexOf(".new") == -1 && toState.name.indexOf(".edit") == -1) {
      $rootScope.checkUnsavedData = false;
    }
  });
  var history = [];
  $rootScope.$on('$locationChangeSuccess', function () {
    history.push($location.$$path);
  });

  $rootScope.back = function () {
    var prevUrl = history.length > 1 ? history.splice(-2)[0] : "/";
    $location.path(prevUrl);
  };

  $rootScope.formatDate = function (val) {
    var valTmp = val;

    if (angular.isString(valTmp)) {
      valTmp = new Date(valTmp);
    }

    return $filter('date')(valTmp, "dd.MM.yyyy");
  };

  $rootScope.formatDateTime = function (val) {
    var valTmp = val;

    if (angular.isString(valTmp)) {
      valTmp = new Date(valTmp);
    }

    return $filter('date')(valTmp, "dd.MM.yyyy HH:mm:ss");
  };

  $rootScope.onChangeInstitucijaiPieejamsNoChecked = function (data) {
    if (data.institucijai_pieejams_no_checked) {
      data.institucijai_pieejams_no = new Date();
    } else {
      data.institucijai_pieejams_no = null;
    }
  };

  $rootScope.onChangeRegistretiemPieejamsNoChecked = function (data) {
    if (data.registretiem_pieejams_no_checked) {
      data.registretiem_pieejams_no = new Date();
    } else {
      data.registretiem_pieejams_no = null;
    }
  };

  $rootScope.onChangePubliskiPieejamsNoChecked = function (data) {
    if (data.publiski_pieejams_no_checked) {
      data.publiski_pieejams_no = new Date();
    } else {
      data.publiski_pieejams_no = null;
    }
  };

  $rootScope.current_font_size = 1.4;
  $document[0].body.style.fontSize = $rootScope.current_font_size + 'em';
}

angular.module('myApp').controller('CurrentContextController', function (authService, $state, $stateParams, Notification, $q, $cookies, gettextCatalog, $rootScope, dataService, $location, uuiData) {/// stateChangeStart jau visu izdara
  /// te bija ērti, bet neapdeitojās pie vienkāršas navigācijas
  // const state = $state.current
  // $rootScope.stateTransitionCheck($state.current, $stateParams)
}).config(function ($provide) {
  var models = {
    WebImportPersonals: 'web_import_personals',
    WebImportProjekti: 'web_import_projekti',
    WebImportRezultati: 'web_import_rezultati',
    WebImportIekartas: 'web_import_iekartas',
    WebImportSlodzesDati: 'web_import_sl_dati',
    WebImportZinIds: 'web_import_zin_ids',
    LastPlaceholder: 'last_placeholder' // pēdējais elements, lai nečakarētos ar komatiem

  };

  _.each(models, function (v, k) {
    $provide.factory(k, function ($resource) {
      return $resource('./data/' + v + '/:id', {
        id: '@id'
      }, {
        create: {
          method: 'POST'
        },
        save: {
          method: 'POST'
        }
      });
    });
  });
});
/*! AdminLTE app.js
 * ================
 * Main JS application file for AdminLTE v2. This file
 * should be included in all pages. It controls some layout
 * options and implements exclusive AdminLTE plugins.
 *
 * @Author  Almsaeed Studio
 * @Support <http://www.almsaeedstudio.com>
 * @Email   <abdullah@almsaeedstudio.com>
 * @version 2.3.8
 * @license MIT <http://opensource.org/licenses/MIT>
 */
//Make sure jQuery has been loaded before app.js
if (typeof jQuery === "undefined") {
  throw new Error("AdminLTE requires jQuery");
}
/* AdminLTE
 *
 * @type Object
 * @description $.AdminLTE is the main object for the template's app.
 *              It's used for implementing functions and options related
 *              to the template. Keeping everything wrapped in an object
 *              prevents conflict with other plugins and is a better
 *              way to organize our code.
 */


$.AdminLTE = {};
/* --------------------
 * - AdminLTE Options -
 * --------------------
 * Modify these options to suit your implementation
 */

$.AdminLTE.options = {
  //Add slimscroll to navbar menus
  //This requires you to load the slimscroll plugin
  //in every page before app.js
  navbarMenuSlimscroll: true,
  navbarMenuSlimscrollWidth: "3px",
  //The width of the scroll bar
  navbarMenuHeight: "200px",
  //The height of the inner menu
  //General animation speed for JS animated elements such as box collapse/expand and
  //sidebar treeview slide up/down. This options accepts an integer as milliseconds,
  //'fast', 'normal', or 'slow'
  animationSpeed: 500,
  //Sidebar push menu toggle button selector
  sidebarToggleSelector: "[data-toggle='offcanvas']",
  //Activate sidebar push menu
  sidebarPushMenu: true,
  //Activate sidebar slimscroll if the fixed layout is set (requires SlimScroll Plugin)
  sidebarSlimScroll: true,
  //Enable sidebar expand on hover effect for sidebar mini
  //This option is forced to true if both the fixed layout and sidebar mini
  //are used together
  sidebarExpandOnHover: false,
  //BoxRefresh Plugin
  enableBoxRefresh: true,
  //Bootstrap.js tooltip
  enableBSToppltip: true,
  BSTooltipSelector: "[data-toggle='tooltip']",
  //Enable Fast Click. Fastclick.js creates a more
  //native touch experience with touch devices. If you
  //choose to enable the plugin, make sure you load the script
  //before AdminLTE's app.js
  enableFastclick: false,
  //Control Sidebar Tree views
  enableControlTreeView: true,
  //Control Sidebar Options
  enableControlSidebar: true,
  controlSidebarOptions: {
    //Which button should trigger the open/close event
    toggleBtnSelector: "[data-toggle='control-sidebar']",
    //The sidebar selector
    selector: ".control-sidebar",
    //Enable slide over content
    slide: true
  },
  //Box Widget Plugin. Enable this plugin
  //to allow boxes to be collapsed and/or removed
  enableBoxWidget: true,
  //Box Widget plugin options
  boxWidgetOptions: {
    boxWidgetIcons: {
      //Collapse icon
      collapse: 'fa-minus',
      //Open icon
      open: 'fa-plus',
      //Remove icon
      remove: 'fa-times'
    },
    boxWidgetSelectors: {
      //Remove button selector
      remove: '[data-widget="remove"]',
      //Collapse button selector
      collapse: '[data-widget="collapse"]'
    }
  },
  //Direct Chat plugin options
  directChat: {
    //Enable direct chat by default
    enable: true,
    //The button to open and close the chat contacts pane
    contactToggleSelector: '[data-widget="chat-pane-toggle"]'
  },
  //Define the set of colors to use globally around the website
  colors: {
    lightBlue: "#3c8dbc",
    red: "#f56954",
    green: "#00a65a",
    aqua: "#00c0ef",
    yellow: "#f39c12",
    blue: "#0073b7",
    navy: "#001F3F",
    teal: "#39CCCC",
    olive: "#3D9970",
    lime: "#01FF70",
    orange: "#FF851B",
    fuchsia: "#F012BE",
    purple: "#8E24AA",
    maroon: "#D81B60",
    black: "#222222",
    gray: "#d2d6de"
  },
  //The standard screen sizes that bootstrap uses.
  //If you change these in the variables.less file, change
  //them here too.
  screenSizes: {
    xs: 480,
    sm: 768,
    md: 992,
    lg: 1200
  }
};
/* ------------------
 * - Implementation -
 * ------------------
 * The next block of code implements AdminLTE's
 * functions and plugins as specified by the
 * options above.
 */

$(function () {
  "use strict"; //Fix for IE page transitions

  $("body").removeClass("hold-transition"); //Extend options if external options exist

  if (typeof AdminLTEOptions !== "undefined") {
    $.extend(true, $.AdminLTE.options, AdminLTEOptions);
  } //Easy access to options


  var o = $.AdminLTE.options; //Set up the object

  _init(); //Activate the layout maker


  $.AdminLTE.layout.activate(); //Enable sidebar tree view controls

  if (o.enableControlTreeView) {
    $.AdminLTE.tree('.sidebar');
  } //Enable control sidebar


  if (o.enableControlSidebar) {
    $.AdminLTE.controlSidebar.activate();
  } //Add slimscroll to navbar dropdown


  if (o.navbarMenuSlimscroll && typeof $.fn.slimscroll != 'undefined') {
    $(".navbar .menu").slimscroll({
      height: o.navbarMenuHeight,
      alwaysVisible: false,
      size: o.navbarMenuSlimscrollWidth
    }).css("width", "100%");
  } //Activate sidebar push menu


  if (o.sidebarPushMenu) {
    $.AdminLTE.pushMenu.activate(o.sidebarToggleSelector);
  } //Activate Bootstrap tooltip


  if (o.enableBSToppltip) {
    $('body').tooltip({
      selector: o.BSTooltipSelector,
      container: 'body'
    });
  } //Activate box widget


  if (o.enableBoxWidget) {
    $.AdminLTE.boxWidget.activate();
  } //Activate fast click


  if (o.enableFastclick && typeof FastClick != 'undefined') {
    FastClick.attach(document.body);
  } //Activate direct chat widget


  if (o.directChat.enable) {
    $(document).on('click', o.directChat.contactToggleSelector, function () {
      var box = $(this).parents('.direct-chat').first();
      box.toggleClass('direct-chat-contacts-open');
    });
  }
  /*
   * INITIALIZE BUTTON TOGGLE
   * ------------------------
   */


  $('.btn-group[data-toggle="btn-toggle"]').each(function () {
    var group = $(this);
    $(this).find(".btn").on('click', function (e) {
      group.find(".btn.active").removeClass("active");
      $(this).addClass("active");
      e.preventDefault();
    });
  });
});
/* ----------------------------------
 * - Initialize the AdminLTE Object -
 * ----------------------------------
 * All AdminLTE functions are implemented below.
 */

function _init() {
  'use strict';
  /* Layout
   * ======
   * Fixes the layout height in case min-height fails.
   *
   * @type Object
   * @usage $.AdminLTE.layout.activate()
   *        $.AdminLTE.layout.fix()
   *        $.AdminLTE.layout.fixSidebar()
   */

  $.AdminLTE.layout = {
    activate: function activate() {
      var _this = this;

      _this.fix();

      _this.fixSidebar();

      $('body, html, .wrapper').css('height', 'auto');
      $(window, ".wrapper").resize(function () {
        _this.fix();

        _this.fixSidebar();
      });
    },
    fix: function fix() {
      // Remove overflow from .wrapper if layout-boxed exists
      $(".layout-boxed > .wrapper").css('overflow', 'hidden'); //Get window height and the wrapper height

      var footer_height = $('.main-footer').outerHeight() || 0;
      var neg = $('.main-header').outerHeight() + footer_height;
      var window_height = $(window).height();
      var sidebar_height = $(".sidebar").height() || 0; //Set the min-height of the content and sidebar based on the
      //the height of the document.

      if ($("body").hasClass("fixed")) {
        $(".content-wrapper, .right-side").css('min-height', window_height - footer_height);
      } else {
        var postSetWidth;

        if (window_height >= sidebar_height) {
          $(".content-wrapper, .right-side").css('min-height', window_height - neg);
          postSetWidth = window_height - neg;
        } else {
          $(".content-wrapper, .right-side").css('min-height', sidebar_height);
          postSetWidth = sidebar_height;
        } //Fix for the control sidebar height


        var controlSidebar = $($.AdminLTE.options.controlSidebarOptions.selector);

        if (typeof controlSidebar !== "undefined") {
          if (controlSidebar.height() > postSetWidth) $(".content-wrapper, .right-side").css('min-height', controlSidebar.height());
        }
      }
    },
    fixSidebar: function fixSidebar() {
      //Make sure the body tag has the .fixed class
      if (!$("body").hasClass("fixed")) {
        if (typeof $.fn.slimScroll != 'undefined') {
          $(".sidebar").slimScroll({
            destroy: true
          }).height("auto");
        }

        return;
      } else if (typeof $.fn.slimScroll == 'undefined' && window.console) {
        window.console.error("Error: the fixed layout requires the slimscroll plugin!");
      } //Enable slimscroll for fixed layout


      if ($.AdminLTE.options.sidebarSlimScroll) {
        if (typeof $.fn.slimScroll != 'undefined') {
          //Destroy if it exists
          $(".sidebar").slimScroll({
            destroy: true
          }).height("auto"); //Add slimscroll

          $(".sidebar").slimScroll({
            height: $(window).height() - $(".main-header").height() + "px",
            color: "rgba(0,0,0,0.2)",
            size: "3px"
          });
        }
      }
    }
  };
  /* PushMenu()
   * ==========
   * Adds the push menu functionality to the sidebar.
   *
   * @type Function
   * @usage: $.AdminLTE.pushMenu("[data-toggle='offcanvas']")
   */

  $.AdminLTE.pushMenu = {
    activate: function activate(toggleBtn) {
      //Get the screen sizes
      var screenSizes = $.AdminLTE.options.screenSizes; //Enable sidebar toggle

      $(document).on('click', toggleBtn, function (e) {
        e.preventDefault(); //Enable sidebar push menu

        if ($(window).width() > screenSizes.sm - 1) {
          if ($("body").hasClass('sidebar-collapse')) {
            $("body").removeClass('sidebar-collapse').trigger('expanded.pushMenu');
          } else {
            $("body").addClass('sidebar-collapse').trigger('collapsed.pushMenu');
          }
        } //Handle sidebar push menu for small screens
        else {
            if ($("body").hasClass('sidebar-open')) {
              $("body").removeClass('sidebar-open').removeClass('sidebar-collapse').trigger('collapsed.pushMenu');
            } else {
              $("body").addClass('sidebar-open').trigger('expanded.pushMenu');
            }
          }
      });
      $(".content-wrapper").click(function () {
        //Enable hide menu when clicking on the content-wrapper on small screens
        if ($(window).width() <= screenSizes.sm - 1 && $("body").hasClass("sidebar-open")) {
          $("body").removeClass('sidebar-open');
        }
      }); //Enable expand on hover for sidebar mini

      if ($.AdminLTE.options.sidebarExpandOnHover || $('body').hasClass('fixed') && $('body').hasClass('sidebar-mini')) {
        this.expandOnHover();
      }
    },
    expandOnHover: function expandOnHover() {
      var _this = this;

      var screenWidth = $.AdminLTE.options.screenSizes.sm - 1; //Expand sidebar on hover

      $('.main-sidebar').hover(function () {
        if ($('body').hasClass('sidebar-mini') && $("body").hasClass('sidebar-collapse') && $(window).width() > screenWidth) {
          _this.expand();
        }
      }, function () {
        if ($('body').hasClass('sidebar-mini') && $('body').hasClass('sidebar-expanded-on-hover') && $(window).width() > screenWidth) {
          _this.collapse();
        }
      });
    },
    expand: function expand() {
      $("body").removeClass('sidebar-collapse').addClass('sidebar-expanded-on-hover');
    },
    collapse: function collapse() {
      if ($('body').hasClass('sidebar-expanded-on-hover')) {
        $('body').removeClass('sidebar-expanded-on-hover').addClass('sidebar-collapse');
      }
    }
  };
  /* Tree()
   * ======
   * Converts the sidebar into a multilevel
   * tree view menu.
   *
   * @type Function
   * @Usage: $.AdminLTE.tree('.sidebar')
   */

  $.AdminLTE.tree = function (menu) {
    var _this = this;

    var animationSpeed = $.AdminLTE.options.animationSpeed;
    $(document).off('click', menu + ' li a').on('click', menu + ' li a', function (e) {
      //Get the clicked link and the next element
      var $this = $(this);
      var checkElement = $this.next(); //Check if the next element is a menu and is visible

      if (checkElement.is('.treeview-menu') && checkElement.is(':visible') && !$('body').hasClass('sidebar-collapse')) {
        //Close the menu
        checkElement.slideUp(animationSpeed, function () {
          checkElement.removeClass('menu-open'); //Fix the layout in case the sidebar stretches over the height of the window
          //_this.layout.fix();
        });
        checkElement.parent("li").removeClass("active");
      } //If the menu is not visible
      else if (checkElement.is('.treeview-menu') && !checkElement.is(':visible')) {
          //Get the parent menu
          var parent = $this.parents('ul').first(); //Close all open menus within the parent

          var ul = parent.find('ul:visible').slideUp(animationSpeed); //Remove the menu-open class from the parent

          ul.removeClass('menu-open'); //Get the parent li

          var parent_li = $this.parent("li"); //Open the target menu and add the menu-open class

          checkElement.slideDown(animationSpeed, function () {
            //Add the class active to the parent li
            checkElement.addClass('menu-open');
            parent.find('li.active').removeClass('active');
            parent_li.addClass('active'); //Fix the layout in case the sidebar stretches over the height of the window

            _this.layout.fix();
          });
        } //if this isn't a link, prevent the page from being redirected


      if (checkElement.is('.treeview-menu')) {
        e.preventDefault();
      }
    });
  };
  /* ControlSidebar
   * ==============
   * Adds functionality to the right sidebar
   *
   * @type Object
   * @usage $.AdminLTE.controlSidebar.activate(options)
   */


  $.AdminLTE.controlSidebar = {
    //instantiate the object
    activate: function activate() {
      //Get the object
      var _this = this; //Update options


      var o = $.AdminLTE.options.controlSidebarOptions; //Get the sidebar

      var sidebar = $(o.selector); //The toggle button

      var btn = $(o.toggleBtnSelector); //Listen to the click event

      btn.on('click', function (e) {
        e.preventDefault(); //If the sidebar is not open

        if (!sidebar.hasClass('control-sidebar-open') && !$('body').hasClass('control-sidebar-open')) {
          //Open the sidebar
          _this.open(sidebar, o.slide);
        } else {
          _this.close(sidebar, o.slide);
        }
      }); //If the body has a boxed layout, fix the sidebar bg position

      var bg = $(".control-sidebar-bg");

      _this._fix(bg); //If the body has a fixed layout, make the control sidebar fixed


      if ($('body').hasClass('fixed')) {
        _this._fixForFixed(sidebar);
      } else {
        //If the content height is less than the sidebar's height, force max height
        if ($('.content-wrapper, .right-side').height() < sidebar.height()) {
          _this._fixForContent(sidebar);
        }
      }
    },
    //Open the control sidebar
    open: function open(sidebar, slide) {
      //Slide over content
      if (slide) {
        sidebar.addClass('control-sidebar-open');
      } else {
        //Push the content by adding the open class to the body instead
        //of the sidebar itself
        $('body').addClass('control-sidebar-open');
      }
    },
    //Close the control sidebar
    close: function close(sidebar, slide) {
      if (slide) {
        sidebar.removeClass('control-sidebar-open');
      } else {
        $('body').removeClass('control-sidebar-open');
      }
    },
    _fix: function _fix(sidebar) {
      var _this = this;

      if ($("body").hasClass('layout-boxed')) {
        sidebar.css('position', 'absolute');
        sidebar.height($(".wrapper").height());

        if (_this.hasBindedResize) {
          return;
        }

        $(window).resize(function () {
          _this._fix(sidebar);
        });
        _this.hasBindedResize = true;
      } else {
        sidebar.css({
          'position': 'fixed',
          'height': 'auto'
        });
      }
    },
    _fixForFixed: function _fixForFixed(sidebar) {
      sidebar.css({
        'position': 'fixed',
        'max-height': '100%',
        'overflow': 'auto',
        'padding-bottom': '50px'
      });
    },
    _fixForContent: function _fixForContent(sidebar) {
      $(".content-wrapper, .right-side").css('min-height', sidebar.height());
    }
  };
  /* BoxWidget
   * =========
   * BoxWidget is a plugin to handle collapsing and
   * removing boxes from the screen.
   *
   * @type Object
   * @usage $.AdminLTE.boxWidget.activate()
   *        Set all your options in the main $.AdminLTE.options object
   */

  $.AdminLTE.boxWidget = {
    selectors: $.AdminLTE.options.boxWidgetOptions.boxWidgetSelectors,
    icons: $.AdminLTE.options.boxWidgetOptions.boxWidgetIcons,
    animationSpeed: $.AdminLTE.options.animationSpeed,
    activate: function activate(_box) {
      var _this = this;

      if (!_box) {
        _box = document; // activate all boxes per default
      } //Listen for collapse event triggers


      $(_box).on('click', _this.selectors.collapse, function (e) {
        e.preventDefault();

        _this.collapse($(this));
      }); //Listen for remove event triggers

      $(_box).on('click', _this.selectors.remove, function (e) {
        e.preventDefault();

        _this.remove($(this));
      });
    },
    collapse: function collapse(element) {
      var _this = this; //Find the box parent


      var box = element.parents(".box").first(); //Find the body and the footer

      var box_content = box.find("> .box-body, > .box-footer, > form  >.box-body, > form > .box-footer");

      if (!box.hasClass("collapsed-box")) {
        //Convert minus into plus
        element.children(":first").removeClass(_this.icons.collapse).addClass(_this.icons.open); //Hide the content

        box_content.slideUp(_this.animationSpeed, function () {
          box.addClass("collapsed-box");
        });
      } else {
        //Convert plus into minus
        element.children(":first").removeClass(_this.icons.open).addClass(_this.icons.collapse); //Show the content

        box_content.slideDown(_this.animationSpeed, function () {
          box.removeClass("collapsed-box");
        });
      }
    },
    remove: function remove(element) {
      //Find the box parent
      var box = element.parents(".box").first();
      box.slideUp(this.animationSpeed);
    }
  };
}
/* ------------------
 * - Custom Plugins -
 * ------------------
 * All custom plugins are defined below.
 */

/*
 * BOX REFRESH BUTTON
 * ------------------
 * This is a custom plugin to use with the component BOX. It allows you to add
 * a refresh button to the box. It converts the box's state to a loading state.
 *
 * @type plugin
 * @usage $("#box-widget").boxRefresh( options );
 */


(function ($) {
  "use strict";

  $.fn.boxRefresh = function (options) {
    // Render options
    var settings = $.extend({
      //Refresh button selector
      trigger: ".refresh-btn",
      //File source to be loaded (e.g: ajax/src.php)
      source: "",
      //Callbacks
      onLoadStart: function onLoadStart(box) {
        return box;
      },
      //Right after the button has been clicked
      onLoadDone: function onLoadDone(box) {
        return box;
      } //When the source has been loaded

    }, options); //The overlay

    var overlay = $('<div class="overlay"><div class="fa fa-refresh fa-spin"></div></div>');
    return this.each(function () {
      //if a source is specified
      if (settings.source === "") {
        if (window.console) {
          window.console.log("Please specify a source first - boxRefresh()");
        }

        return;
      } //the box


      var box = $(this); //the button

      var rBtn = box.find(settings.trigger).first(); //On trigger click

      rBtn.on('click', function (e) {
        e.preventDefault(); //Add loading overlay

        start(box); //Perform ajax call

        box.find(".box-body").load(settings.source, function () {
          done(box);
        });
      });
    });

    function start(box) {
      //Add overlay and loading img
      box.append(overlay);
      settings.onLoadStart.call(box);
    }

    function done(box) {
      //Remove overlay and loading img
      box.find(overlay).remove();
      settings.onLoadDone.call(box);
    }
  };
})(jQuery);
/*
 * EXPLICIT BOX CONTROLS
 * -----------------------
 * This is a custom plugin to use with the component BOX. It allows you to activate
 * a box inserted in the DOM after the app.js was loaded, toggle and remove box.
 *
 * @type plugin
 * @usage $("#box-widget").activateBox();
 * @usage $("#box-widget").toggleBox();
 * @usage $("#box-widget").removeBox();
 */


(function ($) {
  'use strict';

  $.fn.activateBox = function () {
    $.AdminLTE.boxWidget.activate(this);
  };

  $.fn.toggleBox = function () {
    var button = $($.AdminLTE.boxWidget.selectors.collapse, this);
    $.AdminLTE.boxWidget.collapse(button);
  };

  $.fn.removeBox = function () {
    var button = $($.AdminLTE.boxWidget.selectors.remove, this);
    $.AdminLTE.boxWidget.remove(button);
  };
})(jQuery);
/*
 * TODO LIST CUSTOM PLUGIN
 * -----------------------
 * This plugin depends on iCheck plugin for checkbox and radio inputs
 *
 * @type plugin
 * @usage $("#todo-widget").todolist( options );
 */


(function ($) {
  'use strict';

  $.fn.todolist = function (options) {
    // Render options
    var settings = $.extend({
      //When the user checks the input
      onCheck: function onCheck(ele) {
        return ele;
      },
      //When the user unchecks the input
      onUncheck: function onUncheck(ele) {
        return ele;
      }
    }, options);
    return this.each(function () {
      if (typeof $.fn.iCheck != 'undefined') {
        $('input', this).on('ifChecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onCheck.call(ele);
        });
        $('input', this).on('ifUnchecked', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");
          settings.onUncheck.call(ele);
        });
      } else {
        $('input', this).on('change', function () {
          var ele = $(this).parents("li").first();
          ele.toggleClass("done");

          if ($('input', ele).is(":checked")) {
            settings.onCheck.call(ele);
          } else {
            settings.onUncheck.call(ele);
          }
        });
      }
    });
  };
})(jQuery);
/**
 * @name about
 * @description Sadaļa "Par sistēmu"
 *
 * @returns {html} statisks saturs
 */
angular.module('myApp').controller('AboutController', ['$state', function ($state) {}]);
/**
 * @name academic_personal
 * @description Saraksts "Akadēmiskais personāls"
 * @param  {string} url /data/akad_personals_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('AcademicPersonalController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope) {
  var ap = this; // function initialization

  ap.openAcademic = openAcademic;
  ap.deleteAcademicPersonal = deleteAcademicPersonal;
  ap.tabs = [{
    id: 'mainDataTab',
    head: 'Pamatinformācija',
    active: true
  }, {
    id: 'jobDataTab',
    head: 'Darba vieta',
    active: false
  }];

  function openAcademic(row) {
    if (typeof row !== 'undefined' && typeof row.open_id !== 'undefined') {
      $state.go('app.academic_personal.edit', {
        id: row.open_id,
        tab: 'academicJobDataTab'
      });
    } else {
      $state.go('app.academic_personal.new');
    }
  }

  function deleteAcademicPersonal(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("akad_darba_vieta_delete", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts akadēmiskais personāls!', null, 'Ak. personāls'));
      return true;
    }, $scope.handleError);
  }

  ap.gridParams = {
    columns: [{
      text: gettextCatalog.getString("AII_PERSONALS Vārds", null, 'Ak. personāls'),
      key: "personals_vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("AII_PERSONALS Uzvārds", null, 'Ak. personāls'),
      key: "personals_uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Augstākās izglītības iestādes nosaukums", null, 'Ak. personāls'),
      key: "zin_institucija_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("AII_PERSONALS Amats", null, 'Ak. personāls'),
      key: "akad_darba_vieta_amats",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("AII_PERSONALS Zinātniskais darbinieks", null, 'Ak. personāls'),
      key: "ir_ari_zinatniskais_personals",
      sortable: "true",
      trueFalseVal: "true"
    }],
    default_sort_col: 'personals_uzvards',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: ap.openAcademic,
    "delete": false,
    bulkDelete: true,
    delete_function: ap.deleteAcademicPersonal,
    permission: $state.current.permission,
    catalog_name: gettextCatalog.getString('Akadēmiskais personāls', null, 'Ak. personāls'),
    create_function: ap.openAcademic,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('akad_personals_list') && $rootScope.currentUserRights['akad_personals_list'].indexOf('archive_view') != -1) {
    ap.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Ak. personāls'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name scientific_institution
 * @description Saraksts "Darbību vēsture"
 * @param  {string} url /data/history
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('AuditController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var au = this;
  au.openDifference = openDifference; // function initialization

  function openDifference(row) {
    if (row.action == "save" || row.action == "create") {
      ngDialog.open({
        template: 'components/audit/auditDialog.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          newData: angular.toJson(row.new_data, true)
        },
        scope: $scope
      });
    } else if (row.action == "view") {
      ngDialog.open({
        template: 'components/audit/auditDialog2.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          data: angular.toJson(row.data, true)
        },
        scope: $scope
      });
    } else if (row.action == "remove") {
      ngDialog.open({
        template: 'components/audit/auditDialog2.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          data: angular.toJson(row.old_data, true)
        },
        scope: $scope
      });
    }
  }

  au.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Skatījuma nosaukums", null, 'Darbību vēsture'),
      key: "entity",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ieraksta ID", null, 'Darbību vēsture'),
      key: "entity_id",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Darbība", null, 'Darbību vēsture'),
      key: "action",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Lietotājs", null, 'Darbību vēsture'),
      key: "lietotaja_info",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Laiks", null, 'Darbību vēsture'),
      key: "time",
      sortable: "true",
      dateTimeVal: "true"
    }, {
      text: gettextCatalog.getString("IP adrese", null, 'Darbību vēsture'),
      key: "ip_address",
      sortable: "true"
    }],
    default_sort_col: 'time',
    default_sort_dir: 'desc',
    click_function: au.openDifference,
    gridCheckbox: false,
    "delete": false,
    bulkDelete: false,
    filters: true,
    catalog_name: gettextCatalog.getString('Darbību vēsture', null, 'Darbību vēsture'),
    "export": false
  };
}]);
/**
 * @name authentication
 * @description Authentifikācijas modulis
 * @param  {string} url /api/auth
 *
 * @returns {object} lietotāja dati
 */
angular.module('myApp').controller('AuthController', ['$state', 'authService', 'ngDialog', '$scope', '$stateParams', 'gettextCatalog', '$rootScope', 'dataService', 'Notification', '$cookies', '$location', function ($state, authOp, ngDialog, $scope, $stateParams, gettextCatalog, $rootScope, dataOp, Notification, $cookies, $location) {
  var _this = this;

  this.error = '';

  this.logout = function () {
    _this.password_change = null;
    authOp.logout();
  };

  this.showLoginModal = function () {
    if (authOp.u.is_logged_in) {
      msg('AuthController.showLoginModal: login requested, but user already logged in');
      return;
    }

    _this.password_change = null;
    _this.username = null;
    _this.password = null;
    _this.new_password = null;
    _this.repeated_password = null;
    $scope.show_login_message = !!$stateParams.ret; // ja kaut kur adresēsim, tad rādām "Vajag autorizēties!"

    ngDialog.open({
      template: 'components/authentification/login_modal.html',
      className: 'ngdialog-theme-plain',
      scope: $scope,
      closeByDocument: false,
      preCloseCallback: function preCloseCallback() {
        if ($rootScope.tempData && $rootScope.tempData.password_change) {
          authOp.clearCredentials();
        }

        if (_this.generate_and_send_new_password) {
          _this.generate_and_send_new_password = false;
        }
      }
    });
  };

  this.setContext = function (ctx) {
    authOp.setContext(ctx.code);
    $state.go('app.home', {
      context: ctx.code
    });
  };

  this.changePassword = function () {
    authOp.changePassword(_this.new_password).then(function (response) {
      if (response.status == 200) {
        if ($rootScope.tempData && $rootScope.tempData.redirect_uri) {
          window.location = $rootScope.tempData.redirect_uri;
        } else {
          delete $rootScope.tempData;
          $state.reload();
          ngDialog.closeAll();
        }
      }
    });
  };

  this.renewPassword = function () {
    authOp.renewPassword(_this.epasts).then(function (response) {
      _this.generate_and_send_new_password = false; //ngDialog.closeAll();
    });
  };

  this.login = function () {
    authOp.loginUser(_this.username, _this.password).then(function (response) {
      // XXX because of login handled by js post, sso redirect should also be handled by js
      if (response.data.redirect_uri && response.data.is_logged_in) {
        $rootScope.tempData = response.data;

        if ($rootScope.tempData.password_change) {
          _this.password_change = true;
        } else {
          _this.password_change = false;
          window.location = response.data.redirect_uri;
        }
      } else if (response.data.is_logged_in) {
        $rootScope.tempData = response.data;

        if ($rootScope.tempData.password_change) {
          _this.password_change = true;
        } else {
          _this.password_change = false;
          ngDialog.closeAll();

          if ($stateParams.ret) {
            $state.go($stateParams.ret, $stateParams.retParams, {
              reload: true
            });
          } else {
            $state.go('app.home', {}, {
              reload: true
            });
          }
        }
      } else {
        _this.error = response.data;
      }
    });
  };

  return this;
}]);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var authService = angular.module('myApp');
authService.factory('authService', function ($http, uuiData, $cookies, $rootScope, $state, $filter, $q, Notification, Password, gettextCatalog) {
  var _this = this;

  this.u = {
    vards: undefined,
    uzvards: undefined,
    is_logged_in: false,
    contexts: {},
    context: undefined,
    contextName: undefined,
    permissions: [],
    is: {}
  };
  $rootScope.u = this.u;
  this.handle_401_enabled = false;

  this.loginUser = function (username, password) {
    msg('loginUser');
    var req = {
      method: 'POST',
      url: '/api/login',
      data: {
        username: username,
        password: password
      },
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    _this.promise = $http(req).then(function (response) {
      // nevajag apdeitot userdatus
      if (response.data.password_change) return response;
      return _this.getCurrentUserData(true).then(function () {
        return response;
      });
    }, function (res) {
      return res;
    });
    return _this.promise;
  };

  this.logout = function (forcedLogout) {
    _this.clearCredentials(forcedLogout);
  };

  this.changePassword = function (new_password) {
    var req = {
      method: 'POST',
      url: '/data/paroles_maina',
      data: {
        new_password: new_password,
        id: $rootScope.tempData.id
      },
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      _this.getCurrentUserData(true);

      return response;
    }, function (res) {
      return res;
    });
  };

  this.renewPassword = function (epasts) {
    var req = {
      method: 'POST',
      url: '/data/paroles_atjaunosana',
      data: {
        atjaunosanas_epasts: epasts,
        new_password: Password.generatePassword(),
        paroles_maina: true
      },
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      _this.getCurrentUserData(true);

      Notification.success(gettextCatalog.getString('Nosūtīts paroles atjaunināšanas pieprasījums'));
      return response;
    }, function (response) {
      Notification.success(gettextCatalog.getString('Nosūtīts paroles atjaunināšanas pieprasījums'));
      return response;
    });
  };

  this.update = function (d) {
    $rootScope.currentUser = d.is_logged_in ? d : undefined;
    _this.u.is_logged_in = d.is_logged_in;
    _this.u.vards = d.vards;
    _this.u.uzvards = d.uzvards;
    _this.u.permissions = d.lomas.split(/,/g);
    _this.u.permissions_map = {};

    _this.u.permissions.forEach(function (p) {
      _this.u.permissions_map[p] = true;
      _this.u.permissions_map[p.toLowerCase()] = true;
    });

    _this.updateContexts(d.contexts);
  };

  this.updateContexts = function (ctxs) {
    if (ctxs.length == 0) {
      msg('Bug: no contexts received, using anonymous');
      ctxs = [{
        code: 'pub',
        context_type: 'anonymous',
        name: 'Neautorizēts lietotājs'
      }];
    }

    _this.u.contexts = {};
    angular.forEach(ctxs, function (ctx) {
      _this.u.contexts[ctx.code] = ctx;
    });
    _this.u.contexts_ready = true;

    _this.updateContext();
  };

  this.updateContext = function () {
    _this.setContext($cookies.get('current_context'), true);
  };

  this.requireContext = function (context_type) {
    _this.promise.then(function () {
      if (_this.u.contexts[_this.u.context].context_type == context_type) {
        return true;
      } else {
        var c = $filter("filter")(_this.u.context, {
          context_type: context_type
        });

        if (c) {
          _this.setContext(c.code);

          return true;
        } else {
          msg('requireContext ' + context_type + ' rejected');
          return $q.reject('User has no access to context_type ' + context_type);
        }
      }
    });
  };

  this.setContext = function (code) {
    var skip_reload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    // msg('setContext: ' + code);
    if (_this.u.contexts[_this.u.context] && !_this.u.contexts[code]) {
      return _this.promise;
    }

    if (_this.u.context === code && !!_this.u.contexts[code]) {
      // nav nepieciešams reloadot visu, ja lietotājs jau ir šai kontekstā
      return _this.promise;
    }

    if (!code || !_this.u.contexts[code] || code === 'undefined') {
      if (_this.u.contexts['adm']) {
        code = _this.u.contexts['adm'].code;
      } else if (_this.u.contexts['priv']) {
        code = _this.u.contexts['priv'].code;
      } else {
        code = _this.u.contexts['pub'].code;
      }
    }

    _this.u.is = {};

    if (_this.u.contexts[code]) {
      _this.u.context = code;
      _this.u.contextName = _this.u.contexts[code].name;
      var ctx = _this.u.contexts[code];
      _this.u.is[ctx.context_type] = true;
      $cookies.put('current_context', code);

      if (!skip_reload) {
        _this.getCurrentUserData(true);
      }

      return _this.promise;
    }
  };

  this.getCurrentUserData = function (force) {
    /// this.promise.$$state.status === 2 : promise failed
    if (_this.promise && force !== true && _this.promise.$$state.status !== 2) {
      // msg('getCurrentUserData, not refreshing')
      return _this.promise;
    }

    _this.promise = $http({
      url: '/api/auth'
    }).then(function (res) {
      _this.update(res.data);
    }).then(function () {
      return uuiData.reloadMd();
    }).then(_this.loadPerms).then(_this.loadMetadata);
    return _this.promise;
  };

  this.setPerms = function (perms) {
    $rootScope.currentUserRights = perms;
    var p = {
      'get': {},
      'save': {},
      'list': {},
      'delete': {},
      'archive': {},
      'archive_view': {},
      'transform': {}
    };

    _.each(perms, function (elem, k) {
      p[k] = {};

      _.each(elem, function (v) {
        if (!p[k]) p[k] = {};
        p[k][v] = true;
        p[v][k] = true;
      });
    });

    _this.perms = p;
    $rootScope.perms = p;
  };

  this.loadPerms = function () {
    return $http({
      url: '/api'
    }).then(function (res) {
      _this.setPerms(res.data);
    });
  };

  this.loadMetadata = function () {
    // šis dublējas ar uuiData.preloadMd
    return $http({
      url: '/metadata/*'
    }).then(function (res) {
      $rootScope.metadata = res.data;
    });
  };

  this.clearCredentials = function (forcedLogout) {
    _this.promise = undefined;
    $cookies.remove('session-id');
    $rootScope.currentUser = undefined;

    _this.setPerms({});

    _this.getCurrentUserData();

    if (!forcedLogout) {
      window.location = '/'; // lai taisa normālu refrešu/reloadu
      // $state.go('app.home', { context: 'pub' })
    }
  };

  this.ctxRefresh = function () {
    msg('ctxRefresh');
    var ctx = $cookies.get('current_context');
    $state.transitionTo($state.current.name, {
      context: ctx
    }, {
      reload: true,
      notify: true
    });
  };

  this.handle_401 = function (response, $q, $injector) {
    // msg({ evt: 'handle_401', handle_401_enabled: this.handle_401_enabled, response })
    if (!!_this.handle_401_enabled) {
      var _$state = $injector.get('$state');

      var $stateParams = $injector.get('$stateParams');
      var loginParams = {
        context: 'pub',
        ret: _$state.current.name,
        retParams: _objectSpread({}, $stateParams)
      };

      _this.getCurrentUserData(true).then(function () {
        _$state.go('app.login', loginParams);
      }); // authService.logout(true)
      // $state.go('app.login', { context: 'pub' }, { reload: true })

    }

    return $q.reject(response);
  };

  this.getCurrentUserData();
  return this;
});
/**
 * @name budget_expenses_position_form
 * @description "Budžeta izdevumu pozīcija" forma
 * @param  {string} url /data/budzeta_izdevumu_klasifikacija_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('BudgetExpensesPositionFormController', ['ngDialog', 'Upload', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, Upload, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var ene = this;
  ene.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Budžeta izdevumu klasifikators'),
    active: true
  }];
  ene.budgetExpensesPosition = {};
  $scope.allowEdit = true;
  ene.budgetExpensesPositionOrigin = null; // functions

  ene.loadData = loadData;
  ene.saveBudgetExpensesPosition = saveBudgetExpensesPosition;
  ene.setEditMode = setEditMode;
  ene.resetBudgetExpensesPosition = resetBudgetExpensesPosition;
  ene.processData = processData;
  ene.updatePrintTabTitle = updatePrintTabTitle;
  ene.openHomepage = openHomepage;
  ene.getInclude = getInclude;
  ene.uploadFile = uploadFile;
  ene.progress = 100;

  function getInclude(status) {
    return "components/budget_expenses_position/tabs/tab-maindata.html";
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ene.tabs.length > i; i++) {
        if (ene.tabs[i].active) {
          ene.currentTitle = ene.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('project_types').then(function (data) {
      ene.projectTypes = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.projekta_veids_id) {
      data.projekta_veids_id = data.projekta_veids_id.toString();
    }

    ene.budgetExpensesPosition = data;
    $timeout(function () {
      ene.budgetExpensesPositionOrigin = angular.copy(ene.budgetExpensesPosition);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      ene.title = gettextCatalog.getString('Budžeta izdevumu pozīcija', null, 'Budžeta izdevumu klasifikators');
      dataOp.getDefaultById($stateParams.id, 'budzeta_izdevumu_klasifikacija_editable').then(function (data) {
        ene.processData(data);
      });
    } else {
      ene.title = gettextCatalog.getString('Pievienot budžeta izdevumu pozīciju', null, 'Budžeta izdevumu klasifikators');
      ene.budgetExpensesPosition = {};
      $scope.allowEdit = false;
    }
  }

  function saveBudgetExpensesPosition(lock) {
    if (!lock) {
      if (ene.budgetExpensesPosition.pielaujamie_procenti) {
        ene.budgetExpensesPosition.pielaujamie_procenti = parseFloat(ene.budgetExpensesPosition.pielaujamie_procenti);
      }

      dataOp.saveDefault(ene.budgetExpensesPosition, 'budzeta_izdevumu_klasifikacija_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (ene.budgetExpensesPosition.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota budžeta izdevumu pozīcija!', null, 'Budžeta izdevumu klasifikators'));
          ene.processData(data.data);
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetBudgetExpensesPosition() {
    $scope.allowEdit = true;
    ene.budgetExpensesPosition = angular.copy(ene.budgetExpensesPositionOrigin);
  }

  function uploadFile(file) {
    ene.progress = 0;
    Upload.upload({
      url: '/upload',
      data: {
        file: file
      }
    }).then(function (response) {
      ene.budgetExpensesPosition.fails_id = response.data.id;
      ene.budgetExpensesPosition.content_type = response.data.content_type;
      ene.budgetExpensesPosition.filename = response.data.filename;
      ene.budgetExpensesPosition.sha256 = response.data.sha_256;
      ene.progress = 100;
    });
  }

  init();
}]);
/**
 * @name budget_expenses_position
 * @description Saraksts "Budžeta izdevumu klasifikators"
 * @param  {string} url /data/budzeta_izdevumu_klasifikators
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('BudgetExpensesPositionController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var en = this; // function initialization

  en.openBudgetExpensesPosition = openBudgetExpensesPosition;
  en.deleteBudgetExpensesPosition = deleteBudgetExpensesPosition;
  en.openHomepage = openHomepage;

  function openBudgetExpensesPosition(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.budget_expenses_position.edit', {
        id: row.id
      });
    } else {
      $state.go('app.budget_expenses_position.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteBudgetExpensesPosition(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("budzeta_izdevumu_klasifikacija_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta budžeta izdevumu pozīcija!', null, 'Budžeta izdevumu klasifikators'));
      return true;
    }, $scope.handleError);
  }

  en.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Nr.p.k.", null, 'Budžeta izdevumu klasifikators'),
      key: "npk",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Izdevumu pozīcijas kods", null, 'Budžeta izdevumu klasifikators'),
      key: "kods",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta veids", null, 'Budžeta izdevumu klasifikators'),
      key: "projekta_veids",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Izdevumu pozīcija", null, 'Budžeta izdevumu klasifikators'),
      key: "nosaukums",
      sortable: "true"
    }],
    click_function: en.openBudgetExpensesPosition,
    create_function: en.openBudgetExpensesPosition,
    gridCheckbox: true,
    "delete": true,
    bulkDelete: true,
    delete_function: en.deleteBudgetExpensesPosition,
    filters: false,
    catalog_name: gettextCatalog.getString('Budžeta izdevumu klasifikators', null, 'Budžeta izdevumu klasifikators'),
    link_function: en.openHomepage,
    "export": false
  };
}]);
/**
 * @name business
 * @description Saraksts "Komersanti"
 * @param  {string} url /data/komersants_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('BusinessController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$q', '$window', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $q, $window, $filter, dataOp) {
  var bu = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('institucija_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  bu.openBusiness = openBusiness;
  bu.deleteBusiness = deleteBusiness;
  bu.openHomepage = openHomepage;
  bu.archiveBusiness = archiveBusiness;

  function openBusiness(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.business.edit', {
        id: row.id
      });
    } else {
      $state.go('app.business.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function archiveBusiness(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('institucija', {
              id: key,
              archiving_date: $filter('date')(new Date(Date.now()), "yyyy-MM-dd")
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Komersanti veiksmīgi arhivēti!', null, 'Komersanti'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!!'));
        }

        $state.reload();
      });
    });
  }

  function deleteBusiness(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("institucija_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts komersants!', null, 'Komersanti'));
      return true;
    }, $scope.handleError);
  }

  bu.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Komersanta nosaukums", null, 'Komersanti'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas nr. uzņēmumu reģistrā", null, 'Komersanti'),
      key: "reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Komersanta juridiskais statuss", null, 'Komersanti'),
      key: "juridiskais_statuss",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Tālruņa numurs", null, 'Komersanti'),
      key: "telefona_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Komersanta e-pasta adrese", null, 'Komersanti'),
      key: "epasts",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Mājas lapa", null, 'Komersanti'),
      key: "majas_lapa",
      sortable: "true",
      link: true
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    click_function: bu.openBusiness,
    archive_function: bu.archiveBusiness,
    archivePermission: 'business_list',
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    delete_function: bu.deleteBusiness,
    filters: true,
    catalog_name: gettextCatalog.getString('Komersanti', null, 'Komersanti'),
    create_function: bu.openBusiness,
    link_function: bu.openHomepage,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('komersants_list') && $rootScope.currentUserRights['komersants_list'].indexOf('archive_view') != -1) {
    bu.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Komersanti'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name codificator_form
 * @description "Kodifikatora" forma
 * @param  {string} url /data/kodifikators/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('CodifMergeToolEditController', ['ngDialog', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$timeout', '$rootScope', '$cookies', function (ngDialog, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $timeout, $rootScope, $cookies) {
  var cce = this;
  cce.codificators = null;
  cce.codificatorsOrigin = null;
  cce.allowEdit = true;
  cce.title = gettextCatalog.getString('Kodifikators', null, 'Kodifikatori');
  cce.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Kodifikatori'),
    active: true
  }]; // functions

  cce.loadData = loadData;
  cce.saveCodificators = saveCodificators;
  cce.resetCodificators = resetCodificators;
  cce.updateDescrFrom = updateDescrFrom;
  cce.updateDescrTo = updateDescrTo;
  cce.cancelChanges = cancelChanges;

  function cancelChanges(vieId) {
    var inst = {
      id: vieId,
      statuss: 'TMP'
    };
    dataOp.saveDefault(inst, 'kodifikatora_ieraksts_mt_vesture_atcelt').then(function (data) {
      $rootScope.allowPrint = true;
      Notification.success(gettextCatalog.getString('Iepriekš veiktās datu izmaiņas veiksmīgi atceltas!', null, 'Kodifikatori'));
      $state.reload();
    }, $scope.handleError);
  }

  function updateDescrFrom() {
    cce.codificators.kla_kodifikatora_ieraksts_descr_from = ' ';

    if (cce.codificators.kla_kodifikatora_ieraksts_id_from) {
      for (var i = 0; cce.kodifikatoraIeraksti.length > i; i++) {
        if (cce.kodifikatoraIeraksti[i].id.toString() == cce.codificators.kla_kodifikatora_ieraksts_id_from.toString()) {
          cce.codificators.kla_kodifikatora_ieraksts_descr_from = 'Referenču skaits: ' + cce.kodifikatoraIeraksti[i].skaits + ', aktīvs ieraksts: ' + (cce.kodifikatoraIeraksti[i].ir_aktivs ? 'jā' : 'nē');
        }
      }
    }
  }

  function updateDescrTo() {
    cce.codificators.kla_kodifikatora_ieraksts_descr_to = ' ';

    if (cce.codificators.kla_kodifikatora_ieraksts_id_to) {
      for (var i = 0; cce.kodifikatoraIeraksti.length > i; i++) {
        if (cce.kodifikatoraIeraksti[i].id.toString() == cce.codificators.kla_kodifikatora_ieraksts_id_to.toString()) {
          cce.codificators.kla_kodifikatora_ieraksts_descr_to = 'Referenču skaits: ' + cce.kodifikatoraIeraksti[i].skaits + ', aktīvs ieraksts: ' + (cce.kodifikatoraIeraksti[i].ir_aktivs ? 'jā' : 'nē');
        }
      }
    }
  }

  function init() {
    cce.loadData();
  }

  function loadData() {
    if ($stateParams.id) {
      dataOp.getDefaultById($stateParams.id, 'kodifikators_administret').then(function (data) {
        cce.codificators = data;
        var req = {
          method: 'GET',
          params: {
            kla_kodifikators_id: cce.codificators.id
          },
          url: '/data/kodifikatora_ieraksts_administret_list',
          headers: {
            "Content-Type": 'application/json; charset=utf-8',
            'AuthToken': $cookies.get("session-id")
          }
        };
        $http(req).then(function (response) {
          cce.kodifikatoraIeraksti = response.data;
        });
        $timeout(function () {
          cce.codificatorsOrigin = angular.copy(cce.codificators);
        });
      });
    }
  }

  function saveCodificators(lock) {
    if (!lock) {
      dataOp.saveDefault(cce.codificators, 'kodifikators_administret').then(function (data) {
        $rootScope.allowPrint = true;
        Notification.success(gettextCatalog.getString('Vērtību pārnešana veiksmīgi pabeigta!', null, 'Kodifikatori'));
        $state.reload();
      }, $scope.handleError);
    }
  }

  function resetCodificators() {
    cce.codificators = angular.copy(cce.codificatorsOrigin);
  }

  init();
}]);
/**
 * @name codificator_form
 * @description "Kodifikatora" forma
 * @param  {string} url /data/kodifikators/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('CodificatorEditController', ['ngDialog', 'Select2Data', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$timeout', '$rootScope', function (ngDialog, Select2Data, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $timeout, $rootScope) {
  var cce = this;
  cce.codificators = null;
  cce.codificatorsOrigin = null;
  cce.allowEdit = true;
  cce.title = gettextCatalog.getString('Kodifikators', null, 'Kodifikatori');
  cce.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Kodifikatori'),
    active: true
  }]; // functions

  cce.openCodifMergeTool = openCodifMergeTool;
  cce.loadData = loadData;
  cce.saveCodificators = saveCodificators;
  cce.resetCodificators = resetCodificators;

  function openCodifMergeTool() {
    $state.go('app.codif_merge_tool.edit', {
      id: $stateParams.id
    });
  }

  function init() {
    cce.projekta_kategorija = new Select2Data('codificator', 'project_category');
    /*dataOp.getCodificator('project_category')
        .then(function(data) {
            cce.projekta_kategorija = data.data;
        });*/

    cce.loadData();
  }

  function loadData() {
    if ($stateParams.id) {
      dataOp.getDefaultById($stateParams.id, 'kodifikators').then(function (data) {
        for (var i = 0; data.kodifikatora_ieraksts.length > i; i++) {
          if (data.kodifikatora_ieraksts[i].parent_id) {
            data.kodifikatora_ieraksts[i].parent_select_obj = {
              id: data.kodifikatora_ieraksts[i].parent_id,
              text: data.kodifikatora_ieraksts[i].parent
            };
          }
        }

        cce.codificators = data;
        $timeout(function () {
          cce.codificatorsOrigin = angular.copy(cce.codificators);
        });
      });
    } else {
      cce.allowEdit = false;
      cce.codificators = {
        kontaktinfo: [],
        kvalifikacija: [],
        akad_darba_vieta: [],
        zin_darba_vieta: [],
        pielikums: []
      };
    }
  }

  function saveCodificators(lock) {
    if (!lock) {
      for (var i = 0; cce.codificators.kodifikatora_ieraksts.length > i; i++) {
        if (cce.codificators.kodifikatora_ieraksts[i].parent_select_obj) {
          cce.codificators.kodifikatora_ieraksts[i].parent_id = cce.codificators.kodifikatora_ieraksts[i].parent_select_obj.id;
        }

        if (!cce.codificators.kodifikatora_ieraksts[i].ir_aktivs) {
          cce.codificators.kodifikatora_ieraksts[i].ir_aktivs = false;
        }
      }

      dataOp.saveDefault(cce.codificators, 'kodifikators').then(function (data) {
        $rootScope.allowPrint = true;

        if (cce.codificators.id) {
          Notification.success(gettextCatalog.getString('Kodifikators veiksmīgi saglabāts!', null, 'Kodifikatori'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots kodifikators!', null, 'Kodifikatori'));
          $state.go('app.codificators.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleErrorNew);
    }
  }

  function resetCodificators() {
    cce.codificators = angular.copy(cce.codificatorsOrigin);
  }

  init();
}]);
/**
 * @name codificator
 * @description Saraksts "Kodifikatori"
 * @param  {string} url /data/kodifikators_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('CodificatorController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope) {
  var cc = this;
  cc.person = null;
  cc.allowEdit = false;
  cc.collapsePhoneData = true;
  cc.openPerson = openPerson; // panel collapse initialization

  cc.collapseMainData = true; // function initialization

  cc.openPerson = openPerson;
  cc.deletePersonal = deletePersonal;

  function deletePersonal(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("personals", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts personāls!', null, 'Kodifikatori'));
      return true;
    }, $scope.handleError);
  }

  function openPerson(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.codificators.edit', {
        id: row.id
      });
    } else {
      $state.go('app.codificators.new');
    }
  }

  cc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Kodifikatora nosaukums", null, 'Kodifikatori'),
      key: "nosaukums",
      sortable: "true"
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: cc.openPerson,
    "delete": false,
    bulkDelete: false,
    catalog_name: gettextCatalog.getString('Kodifikatori', null, 'Kodifikatori'),
    "export": true
  };
}]);
/**
 * @name committee_elections_form
 * @description "LZP ekspertu komisiju vēlēšanas" forma
 * @param  {string} url /data/komisiju_velesanas_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('CommitteeElectionsFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cee = this;
  cee.committeeElections = {};
  cee.tabs = [{
    head: gettextCatalog.getString('Pamatinformācija', null, 'Komisiju vēlēšanas'),
    template: "components/committee_elections/tabs/tab-maindata.html",
    visible: true,
    active: true
  }, {
    head: gettextCatalog.getString('Iesniegtie pieteikumi', null, 'Komisiju vēlēšanas'),
    template: "components/committee_elections/tabs/tab-submitted-applications.html",
    visible: true,
    active: false
  }, {
    head: gettextCatalog.getString('Noraidītie pieteikumi', null, 'Komisiju vēlēšanas'),
    template: "components/committee_elections/tabs/tab-rejected-applications.html",
    visible: true,
    active: false
  }, {
    head: gettextCatalog.getString('Apstiprinātie pieteikumi', null, 'Komisiju vēlēšanas'),
    template: "components/committee_elections/tabs/tab-accepted-applications.html",
    visible: true,
    active: false
  }, {
    head: gettextCatalog.getString('Vēlēšanu rezultāti', null, 'Komisiju vēlēšanas'),
    template: "components/committee_elections/tabs/tab-election-results.html",
    visible: false,
    active: false
  }];
  $scope.allowEdit = true;
  cee.committeeElectionsOrigin = null;
  cee.dateFormat = 'dd.MM.yyyy'; // functions

  cee.loadData = loadData;
  cee.saveCommitteeElections = saveCommitteeElections;
  cee.setEditMode = setEditMode;
  cee.resetCommitteeElections = resetCommitteeElections;
  cee.processData = processData;
  cee.updatePrintTabTitle = updatePrintTabTitle;
  cee.openHomepage = openHomepage;
  cee.gotoState = gotoState;
  cee.getExportSubmittedApplicationsUrl = getExportSubmittedApplicationsUrl;
  cee.getExportRejectedApplicationsUrl = getExportRejectedApplicationsUrl;
  cee.getExportAcceptedApplicationsUrl = getExportAcceptedApplicationsUrl;
  cee.getExportElectionAuditUrl = getExportElectionAuditUrl;
  cee.getExportElectionResultsUrl = getExportElectionResultsUrl;

  function getExportSubmittedApplicationsUrl() {
    return '/data/export_xlsx/velesanu_pieteikums?veids1=true&velesanas_id=' + cee.committeeElections.id;
  }

  function getExportRejectedApplicationsUrl() {
    return '/data/export_xlsx/velesanu_pieteikums?veids2=true&velesanas_id=' + cee.committeeElections.id;
  }

  function getExportAcceptedApplicationsUrl() {
    return '/data/export_xlsx/velesanu_pieteikums?veids3=true&velesanas_id=' + cee.committeeElections.id;
  }

  function getExportElectionAuditUrl() {
    return '/data/export_xlsx/balsosanas_auditacija?velesanas_id=' + cee.committeeElections.id;
  }

  function getExportElectionResultsUrl() {
    return '/data/export_xlsx/balsosanas_rezultati?velesanas_id=' + cee.committeeElections.id;
  }

  function gotoState(s, dId) {
    $state.go(s, {
      id: dId
    });
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cee.tabs.length > i; i++) {
        if (cee.tabs[i].active) {
          cee.currentTitle = cee.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    loadData();
  }

  function processData(data) {
    if (data.pieteiksanas_datums_no) {
      data.pieteiksanas_datums_no = new Date(data.pieteiksanas_datums_no);
    }

    if (data.pieteiksanas_datums_lidz) {
      data.pieteiksanas_datums_lidz = new Date(data.pieteiksanas_datums_lidz);
    }

    if (data.velesanu_datums_no) {
      data.velesanu_datums_no = new Date(data.velesanu_datums_no);
    }

    if (data.velesanu_datums_lidz) {
      data.velesanu_datums_lidz = new Date(data.velesanu_datums_lidz);
    }

    if (data.publicesanas_datums) {
      data.publicesanas_datums = new Date(data.publicesanas_datums);
    }

    var npk = 1;

    for (var i = 0; data.iesniegtie_pieteikumi.length > i; i++) {
      data.iesniegtie_pieteikumi[i].npk = npk + '.';
      npk = npk + 1;
    }

    npk = 1;

    for (var i = 0; data.noraiditie_pieteikumi.length > i; i++) {
      data.noraiditie_pieteikumi[i].npk = npk + '.';
      npk = npk + 1;
    }

    npk = 1;

    for (var i = 0; data.apstiprinatie_pieteikumi.length > i; i++) {
      data.apstiprinatie_pieteikumi[i].npk = npk + '.';
      npk = npk + 1;
    }

    npk = 1;

    if (data.balsosanas_rezultati) {
      for (var i = 0; data.balsosanas_rezultati.length > i; i++) {
        data.balsosanas_rezultati[i].npk = npk + '.';
        npk = npk + 1;
      }
    }

    cee.committeeElections = data;
    cee.tabs[4].visible = $scope.perms.get.komisiju_velesanas_balsosanas_rezultati && cee.committeeElections.radit_balsosanas_rezultatus;
    $timeout(function () {
      cee.committeeElectionsOrigin = angular.copy(cee.committeeElections);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cee.title = gettextCatalog.getString('LZP ekspertu komisiju vēlēšanas', null, 'Komisiju vēlēšanas');
      dataOp.getDefaultById($stateParams.id, 'komisiju_velesanas_editable').then(function (data) {
        cee.processData(data);
      });
    } else {
      cee.isNew = true;
      cee.title = gettextCatalog.getString('Pievienot LZP ekspertu komisiju vēlēšanas', null, 'Komisiju vēlēšanas');
      $scope.allowEdit = false;
      $timeout(function () {
        cee.committeeElectionsOrigin = angular.copy(cee.committeeElections);
      });
    }
  }

  function saveCommitteeElections(lock) {
    if (!lock) {
      dataOp.saveDefault(cee.committeeElections, 'komisiju_velesanas_editable_save', true).then(function (data) {
        $rootScope.allowPrint = true;

        if (cee.committeeElections.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP ekspertu komisiju vēlēšanu ieraksts!', null, 'Komisiju vēlēšanas'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP ekspertu komisiju vēlēšanu ieraksts!', null, 'Komisiju vēlēšanas'));
          $state.go('app.committee_elections.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetCommitteeElections() {
    $scope.allowEdit = true;
    cee.committeeElections = angular.copy(cee.committeeElectionsOrigin);
  }

  init();
}]);
/**
 * @name committee_elections
 * @description Saraksts "LZP ekspertu komisiju vēlēšanas"
 * @param  {string} url /data/komisiju_velesanas
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('CommitteeElectionsController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var ce = this; // function initialization

  ce.openCommitteeElections = openCommitteeElections;
  ce.openHomepage = openHomepage;
  ce.deleteCommitteeElections = deleteCommitteeElections;

  function openCommitteeElections(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.committee_elections.edit', {
        id: row.id
      });
    } else {
      $state.go('app.committee_elections.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteCommitteeElections(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("komisiju_velesanas_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts LZP ekspertu komisiju vēlēšanu ieraksts!', null, 'Komisiju vēlēšanas'));
      return true;
    }, $scope.handleError);
  }

  ce.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Nosaukums", null, 'Komisiju vēlēšanas'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Pieteikšanās periods no", null, 'Komisiju vēlēšanas'),
      key: "pieteiksanas_datums_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Pieteikšanās periods līdz", null, 'Komisiju vēlēšanas'),
      key: "pieteiksanas_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Vēlēšanu periods no", null, 'Komisiju vēlēšanas'),
      key: "velesanu_datums_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Vēlēšanu periods līdz", null, 'Komisiju vēlēšanas'),
      key: "velesanu_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }],
    click_function: ce.openCommitteeElections,
    create_function: ce.openCommitteeElections,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: ce.deleteCommitteeElections,
    filters: false,
    catalog_name: gettextCatalog.getString('LZP ekspertu komisiju vēlēšanas', null, 'Komisiju vēlēšanas'),
    link_function: ce.openHomepage,
    "export": false
  };
}]);
/**
 * @name election_application_form
 * @description "LZP ekspertu komisiju vēlēšanu pieteikums" forma
 * @param  {string} url /data/velesanu_pieteikums_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ElectionApplicationFormController', ['ngDialog', 'UploadService', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, UploadService, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var eae = this;
  eae.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Komisiju vēlēšanas'),
    active: true
  }];
  eae.electionApplication = {
    pielikumi: []
  };
  eae.electionApplicationOrigin = {
    pielikumi: []
  };
  eae.pielikumi = [];
  eae.pielikumiToDelete = [];
  eae.electionApplicationStatuses = null;
  eae.sciBranches = null;
  eae.expertCommissions = null;
  $scope.allowEdit = true;
  eae.selectedCount = null; // functions

  eae.loadData = loadData;
  eae.saveElectionApplication = saveElectionApplication;
  eae.acceptElectionApplication = acceptElectionApplication;
  eae.rejectElectionApplication = rejectElectionApplication;
  eae.setEditMode = setEditMode;
  eae.resetElectionApplication = resetElectionApplication;
  eae.processData = processData;
  eae.processSciResults = processSciResults;
  eae.getSelectedCount = getSelectedCount;
  eae.UploadService = UploadService;
  eae.updatePrintTabTitle = updatePrintTabTitle;
  eae.openHomepage = openHomepage;
  eae.dateFormat = 'dd.MM.yyyy';
  eae.getInclude = getInclude;
  eae.gotoState = gotoState;
  eae.showPersonData = showPersonData;

  function showPersonData() {
    $state.go('app.personal.edit', {
      id: eae.electionApplication.personals_id
    });
  }

  function getInclude(status) {
    return "components/committee_elections/tabs/tab-maindata4.html";
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; eae.tabs.length > i; i++) {
        if (eae.tabs[i].active) {
          eae.currentTitle = eae.tabs[i].head;
          break;
        }
      }
    });
  }

  function gotoState(s, dId, dT) {
    $state.go(s, {
      id: dId,
      type: dT
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getChoices('committee_elections').then(function (data) {
      eae.committeeElections = data.data;
    });
    dataOp.getCodificator('election_application_status').then(function (data) {
      eae.electionApplicationStatuses = data.data;
    });
    dataOp.getChoices('science_branch').then(function (data) {
      eae.sciBranches = data.data;
    });
    dataOp.getCodificator('ekspertu_komisija').then(function (data) {
      eae.expertCommissions = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.velesanas_id) {
      data.velesanas_id = data.velesanas_id.toString();
    }

    if (data.zinatnes_nozare_id) {
      data.zinatnes_nozare_id = data.zinatnes_nozare_id.toString();
    }

    if (data.kla_ekspertu_komisija_id) {
      data.kla_ekspertu_komisija_id = data.kla_ekspertu_komisija_id.toString();
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.decision_date) {
      data.decision_date = new Date(data.decision_date);
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    }

    eae.electionApplication = data;
    $timeout(function () {
      eae.electionApplicationOrigin = angular.copy(eae.electionApplication);
    });
  }

  function processSciResults(data) {
    if (eae.electionApplication && eae.electionApplication.rezultati) {
      for (var i = 0; data.length > i; i++) {
        data[i].izvelets = false;

        for (var j = 0; eae.electionApplication.rezultati.length > j; j++) {
          if (data[i].zin_rezultats_id == eae.electionApplication.rezultati[j].zin_rezultats_id) {
            data[i].izvelets = true;
            break;
          }
        }
      }
    }

    eae.sciResultsAll = data;
    eae.selectedCount = getSelectedCount();
  }

  function getSelectedCount() {
    var cnt = 0;

    if (eae.sciResultsAll) {
      for (var i = 0; eae.sciResultsAll.length > i; i++) {
        if (eae.sciResultsAll[i].izvelets) {
          cnt = cnt + 1;
        }
      }
    }

    return cnt;
  }

  function loadData() {
    if ($stateParams.id) {
      eae.title = gettextCatalog.getString('LZP ekspertu komisiju vēlēšanu pieteikums', null, 'Komisiju vēlēšanas');
      dataOp.getDefaultById($stateParams.id, 'velesanu_pieteikums_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'velesanu_pieteikums', 'velesanu_pieteikums').then(function (aData) {
          data.pielikumi = aData;
          eae.processData(data);
        }, function (aData) {
          eae.processData(data);
        });
      });
    } else {
      eae.isNew = true;
      eae.title = gettextCatalog.getString('Pievienot LZP ekspertu komisiju vēlēšanu pieteikumu', null, 'Komisiju vēlēšanas');
      dataOp.getDefaultById(0, 'velesanu_pieteikums_editable').then(function (data) {
        eae.processData(data);
      });
      $scope.allowEdit = false;
    }
  }

  function saveElectionApplication(lock) {
    if (!lock) {
      if (eae.sciResultsAll) {
        eae.electionApplication.rezultati = [];

        for (var i = 0; eae.sciResultsAll.length > i; i++) {
          if (eae.sciResultsAll[i].izvelets) {
            var sr = {};
            sr.nosaukums = eae.sciResultsAll[i].nosaukums;
            sr.veids = eae.sciResultsAll[i].veids;
            sr.autori = eae.sciResultsAll[i].autori;
            sr.gads = eae.sciResultsAll[i].gads;
            sr.zin_rezultats_id = eae.sciResultsAll[i].zin_rezultats_id;
            eae.electionApplication.rezultati.push(sr);
          }
        }
      }

      var attachmentOrigin = eae.electionApplication.pielikumi;
      dataOp.saveElectionApplicationById(eae.electionApplication, 'velesanu_pieteikums_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(eae.electionApplication.pielikumi, function (att) {
          att.velesanu_pieteikums_id = data.data.id;
        });

        if (eae.pielikumiToDelete && eae.pielikumiToDelete.length) {
          eae.pielikumiToDelete.join(',');
          Restangular.one("data").one("velesanu_pieteikumsl_pielikumi", eae.pielikumiToDelete).remove(eae.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            eae.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(eae.electionApplication.pielikumi, 'velesanu_pieteikums').then(function (aData) {
          if (aData.status == 200) {
            data.data.pielikumi = [];
            angular.forEach(aData, function (val, key) {
              data.data.pielikumi.push(val.data);
            });
          } else {
            data.data.pielikumi = attachmentOrigin;
          }

          if (eae.electionApplication.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          } else {
            Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          }

          dataOp.getAttachmentsByIdNT(data.data.id, 'velesanu_pieteikums', 'velesanu_pieteikums').then(function (aData2) {
            data.data.pielikumi = aData2;
            eae.processData(data.data);
          }, function (aData) {
            eae.processData(data.data);
          });
        }, function (aData) {
          if (eae.electionApplication.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          } else {
            Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          }

          dataOp.getAttachmentsByIdNT(data.data.id, 'velesanu_pieteikums', 'velesanu_pieteikums').then(function (aData2) {
            data.data.pielikumi = aData2;
            eae.processData(data.data);
          }, function (aData) {
            eae.processData(data.data);
          });
        });
      }, $scope.handleError);
    }
  }

  function acceptElectionApplication(lock) {
    eae.electionApplication.pamatojums = null;
    eae.electionApplication.statuss = 'AKCEPTETS';
    saveElectionApplication(lock);
  }

  function rejectElectionApplication(lock) {
    eae.electionApplication.pamatojums = null;
    ngDialog.openConfirm({
      template: 'components/committee_elections/tabs/dialog-application-reject.html',
      scope: $scope,
      data: eae.electionApplication
    }).then(function () {
      eae.electionApplication.statuss = 'NORAIDITS';
      saveElectionApplication(lock);
    }, function () {});
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetElectionApplication() {
    $scope.allowEdit = true;
    eae.electionApplication = angular.copy(eae.electionApplicationOrigin);
  }

  init();
}]);
/**
 * @name user_committee_elections_form
 * @description "LZP ekspertu komisiju vēlēšanas" forma
 * @param  {string} url /data/komisiju_velesanasl_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UserCommitteeElectionsFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', 'authService', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window, authService) {
  var ctl = this;
  ctl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Komisiju vēlēšanas', null, 'Komisiju vēlēšanas'),
    active: true
  }];
  ctl.empty = {
    id: 0,
    text: '(Visi ieraksti)',
    title: '(Visi ieraksti)'
  };
  ctl.velesanas = [];
  ctl.sciBranches = [];
  ctl.expertCommissions = [];
  ctl.filter = {
    zinatnes_nozare: ctl.empty,
    ekspertu_komisija: ctl.empty
  };
  ctl.is_loading = true;
  ctl.dateFormat = 'dd.MM.yyyy';

  ctl.getInclude = function (status) {
    return "components/committee_elections/tabs/tab-maindata5.html";
  };

  ctl.gotoState = function (s, dId) {
    if (dId) {
      $state.go(s, {
        id: dId
      });
    } else {
      $state.go(s, {});
    }
  };

  ctl.updatePrintTabTitle = function () {
    $timeout(function () {
      for (var i = 0; ctl.tabs.length > i; i++) {
        if (ctl.tabs[i].active) {
          ctl.currentTitle = ctl.tabs[i].head;
          break;
        }
      }
    });
  };

  ctl.openHomepage = function (item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  };

  ctl.init = function () {
    ctl.loadListData();
    dataOp.getChoices('science_branch').then(function (data) {
      ctl.sciBranches = [ctl.empty].concat(data.data);
    });
    dataOp.getCodificator('ekspertu_komisija').then(function (data) {
      ctl.expertCommissions = [ctl.empty].concat(data.data);
    });
  };

  ctl.loadListData = function () {
    ctl.is_loading = true;
    dataOp.listDefault('pub_aktualas_velesanas').then(function (data) {
      ctl.velesanas = data;
      ctl.is_loading = false;
    });
  };

  ctl.shouldBeVisible = function (k) {
    if (ctl.filter.ekspertu_komisija && ctl.filter.ekspertu_komisija.id) {
      if (k.ekspertu_komisija_id != ctl.filter.ekspertu_komisija.id) {
        return false;
      }
    }

    if (ctl.filter.zinatnes_nozare && ctl.filter.zinatnes_nozare.id) {
      if (k.zinatnes_nozare_id != ctl.filter.zinatnes_nozare.id) {
        return false;
      }
    }

    return true;
  };

  ctl.openResult = function (k, r) {
    var self = authService.u;

    if (self.is_logged_in) {
      var url = $state.href('app.scientific_action_results.edit', {
        id: r.zin_rezultats_id,
        type: r.zin_rezultats_veids
      });
      window.open(url, '_blank');
      return true;
    } else {
      Notification.error(gettextCatalog.getString('Jūs neesat autorizējies.'));
      return false;
    }
  };

  ctl.openCandidate = function (k) {
    var self = authService.u;

    if (self.is_logged_in) {
      var url = $state.href('app.personal.edit', {
        id: k.personals_id
      });
      window.open(url, '_blank');
      return true;
    } else {
      Notification.error(gettextCatalog.getString('Jūs neesat autorizējies.'));
      return false;
    }
  };

  ctl.doVote = function (v, k) {
    if (!confirm("Nobalsot par " + k.vards + ' ' + k.uzvards + "?")) return;
    return dataOp.voteCommitteeElections(v.id, k.personals_id).then(function (res) {
      return true;
    })["catch"](function (err) {
      Notification.error(err.data);
      return false;
    });
  };

  ctl.candidateClicked = function (v, k) {
    var dlg = ngDialog.open({
      template: 'components/committee_elections/pub-view-candidate.html',
      className: 'ngdialog-theme-default ngdialog-wide',
      data: {
        kandidats: k,
        velesanas: v,
        openResult: ctl.openResult,
        openCandidate: ctl.openCandidate,
        doVote: ctl.doVote
      }
    });
    dlg.closePromise.then(function (res) {
      if (res.value === true) {
        Notification.success(gettextCatalog.getString('Paldies! Jūsu balss par {{ vards }} {{ uzvards }} veiksmīgi saņemta.', k, "Komisiju vēlēšanas"));
        ctl.loadListData();
      }
    });
  };

  ctl.init();
}]); // vim : sw=4 :
/**
 * @name election_application_form
 * @description "LZP ekspertu komisiju vēlēšanu pieteikums" forma
 * @param  {string} url /data/velesanu_pieteikumsl_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UserElectionApplicationFormController', ['ngDialog', 'UploadService', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', '$http', function (ngDialog, UploadService, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window, $http) {
  var eae = this;
  eae.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Komisiju vēlēšanas'),
    active: true
  }];
  eae.electionApplication = {
    pielikumi: []
  };
  eae.electionApplicationOrigin = {
    pielikumi: []
  };
  eae.pielikumi = [];
  eae.pielikumiToDelete = [];
  eae.electionApplicationStatuses = null;
  eae.sciBranches = null;
  eae.expertCommissions = null;
  $scope.allowEdit = true;
  eae.selectedCount = null; // functions

  eae.loadData = loadData;
  eae.saveElectionApplication = saveElectionApplication;
  eae.submitElectionApplication = submitElectionApplication;
  eae.setEditMode = setEditMode;
  eae.resetElectionApplication = resetElectionApplication;
  eae.processData = processData;
  eae.processSciResults = processSciResults;
  eae.getSelectedCount = getSelectedCount;
  eae.UploadService = UploadService;
  eae.updatePrintTabTitle = updatePrintTabTitle;
  eae.openHomepage = openHomepage;
  eae.dateFormat = 'dd.MM.yyyy';
  eae.getInclude = getInclude;
  eae.gotoState = gotoState;
  eae.onUpdateOfElections = onUpdateOfElections;
  eae.onUpdateOfSciBranch = onUpdateOfSciBranch;

  function getInclude(statuss) {
    if (eae.electionApplication.statuss && eae.electionApplication.statuss === 'SAGATAVOSANA') {
      return "components/committee_elections/tabs/tab-maindata2.html";
    } else {
      return "components/committee_elections/tabs/tab-maindata3.html";
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; eae.tabs.length > i; i++) {
        if (eae.tabs[i].active) {
          eae.currentTitle = eae.tabs[i].head;
          break;
        }
      }
    });
  }

  function gotoState(s, dId, dT) {
    $state.go(s, {
      id: dId,
      type: dT
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getChoices('committee_elections').then(function (data) {
      eae.committeeElections = data.data;
    });
    dataOp.getCodificator('election_application_status').then(function (data) {
      eae.electionApplicationStatuses = data.data;
    });
    dataOp.getChoices('science_branch').then(function (data) {
      eae.sciBranches = data.data;
    });
    dataOp.getCodificator('ekspertu_komisija').then(function (data) {
      eae.expertCommissions = data.data;
    });
    loadData();
  }

  function onUpdateOfElections() {
    if (eae.electionApplication.velesanas_id) {
      angular.forEach(eae.committeeElections, function (e) {
        if (e.id.toString() === eae.electionApplication.velesanas_id.toString()) {
          eae.electionApplication.pieteiksanas_datums_no = e.pieteiksanas_datums_no;
          eae.electionApplication.pieteiksanas_datums_lidz = e.pieteiksanas_datums_lidz;
          eae.electionApplication.ir_pieteiksanas_periods = e.ir_pieteiksanas_periods;
          eae.electionApplication.var_atsaukt = e.var_atsaukt;
        }
      });
    } else {
      eae.electionApplication.pieteiksanas_datums_no = null;
      eae.electionApplication.pieteiksanas_datums_lidz = null;
      eae.electionApplication.ir_pieteiksanas_periods = true;
      eae.electionApplication.var_atsaukt = true;
    }
  }

  function onUpdateOfSciBranch() {
    eae.electionApplication.bridinajums_b = false;
    eae.electionApplication.bridinajums_d = false;

    if (eae.electionApplication.zinatnes_nozare_id) {
      var req = {
        method: 'GET',
        url: 'data/velesanu_pieteikumsl_zin_noz_dati?id=' + eae.electionApplication.zinatnes_nozare_id + '&velesanas_id=' + eae.electionApplication.velesanas_id + '&personals_id=' + eae.electionApplication.personals_id,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      $http(req).then(function (response) {
        if (response.data) {
          for (var i = 0; response.data.length > i; i++) {
            eae.electionApplication.bridinajums_b = response.data[i].bridinajums_b;
            eae.electionApplication.bridinajums_d = response.data[i].bridinajums_d;
          }
        }
      });
    }
  }

  function processData(data) {
    if (data.velesanas_id) {
      data.velesanas_id = data.velesanas_id.toString();
    }

    if (data.zinatnes_nozare_id) {
      data.zinatnes_nozare_id = data.zinatnes_nozare_id.toString();
    }

    if (data.kla_ekspertu_komisija_id) {
      data.kla_ekspertu_komisija_id = data.kla_ekspertu_komisija_id.toString();
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.decision_date) {
      data.decision_date = new Date(data.decision_date);
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    }

    eae.electionApplication = data;
    $timeout(function () {
      eae.electionApplicationOrigin = angular.copy(eae.electionApplication);
    });
  }

  function processSciResults(data) {
    if (eae.electionApplication && eae.electionApplication.rezultati) {
      for (var i = 0; data.length > i; i++) {
        data[i].izvelets = false;

        for (var j = 0; eae.electionApplication.rezultati.length > j; j++) {
          if (data[i].zin_rezultats_id == eae.electionApplication.rezultati[j].zin_rezultats_id) {
            data[i].izvelets = true;
            break;
          }
        }
      }
    }

    eae.sciResultsAll = data;
    eae.selectedCount = getSelectedCount();
  }

  function getSelectedCount() {
    var cnt = 0;

    if (eae.sciResultsAll) {
      for (var i = 0; eae.sciResultsAll.length > i; i++) {
        if (eae.sciResultsAll[i].izvelets) {
          cnt = cnt + 1;
        }
      }
    }

    return cnt;
  }

  function loadData() {
    if ($stateParams.id) {
      eae.title = gettextCatalog.getString('LZP ekspertu komisiju vēlēšanu pieteikums', null, 'Komisiju vēlēšanas');
      dataOp.getDefaultById($stateParams.id, 'velesanu_pieteikumsl_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'velesanu_pieteikumsl', 'velesanu_pieteikums').then(function (aData) {
          data.pielikumi = aData;
          eae.processData(data);

          if (!eae.electionApplication.statuss || eae.electionApplication.statuss === 'SAGATAVOSANA') {
            dataOp.listDefault('pieteikumsl_rezultati_list').then(function (rData) {
              eae.processSciResults(rData);
            });
          }
        }, function (aData) {
          eae.processData(data);

          if (!eae.electionApplication.statuss || eae.electionApplication.statuss === 'SAGATAVOSANA') {
            dataOp.listDefault('pieteikumsl_rezultati_list').then(function (rData) {
              eae.processSciResults(rData);
            });
          }
        });
      });
    } else {
      eae.isNew = true;
      eae.title = gettextCatalog.getString('Pievienot LZP ekspertu komisiju vēlēšanu pieteikumu', null, 'Komisiju vēlēšanas');
      dataOp.getDefaultById(0, 'velesanu_pieteikumsl_editable').then(function (data) {
        eae.processData(data);

        if (!eae.electionApplication.statuss || eae.electionApplication.statuss === 'SAGATAVOSANA') {
          dataOp.listDefault('pieteikumsl_rezultati_list').then(function (data) {
            eae.processSciResults(data);
          });
        }
      });
      $scope.allowEdit = false;
    }
  }

  function saveElectionApplication(lock) {
    if (!lock) {
      if (eae.sciResultsAll) {
        eae.electionApplication.rezultati = [];

        for (var i = 0; eae.sciResultsAll.length > i; i++) {
          if (eae.sciResultsAll[i].izvelets) {
            var sr = {};
            sr.nosaukums = eae.sciResultsAll[i].nosaukums;
            sr.veids = eae.sciResultsAll[i].veids;
            sr.autori = eae.sciResultsAll[i].autori;
            sr.gads = eae.sciResultsAll[i].gads;
            sr.zin_rezultats_id = eae.sciResultsAll[i].zin_rezultats_id;
            eae.electionApplication.rezultati.push(sr);
          }
        }
      }

      var attachmentOrigin = eae.electionApplication.pielikumi;
      dataOp.saveElectionApplicationById(eae.electionApplication, 'velesanu_pieteikumsl_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(eae.electionApplication.pielikumi, function (att) {
          att.velesanu_pieteikums_id = data.data.id;
        });

        if (eae.pielikumiToDelete && eae.pielikumiToDelete.length) {
          eae.pielikumiToDelete.join(',');
          Restangular.one("data").one("velesanu_pieteikumsl_pielikumi", eae.pielikumiToDelete).remove(eae.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            eae.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(eae.electionApplication.pielikumi, 'velesanu_pieteikumsl').then(function (aData) {
          if (aData.status == 200) {
            data.data.pielikumi = [];
            angular.forEach(aData, function (val, key) {
              data.data.pielikumi.push(val.data);
            });
          } else {
            data.data.pielikumi = attachmentOrigin;
          }

          if (eae.electionApplication.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          } else {
            Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          }

          dataOp.getAttachmentsByIdNT(data.data.id, 'velesanu_pieteikumsl', 'velesanu_pieteikums').then(function (aData2) {
            data.data.pielikumi = aData2;
            eae.processData(data.data);
          }, function (aData) {
            eae.processData(data.data);
          });
        }, function (aData) {
          if (eae.electionApplication.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          } else {
            Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
          }

          dataOp.getAttachmentsByIdNT(data.data.id, 'velesanu_pieteikumsl', 'velesanu_pieteikums').then(function (aData2) {
            data.data.pielikumi = aData2;
            eae.processData(data.data);
          }, function (aData) {
            eae.processData(data.data);
          });
        });
      }, $scope.handleError);
    }
  }

  function submitElectionApplication(lock) {
    eae.electionApplication.statuss = 'IESNIEGTS';
    saveElectionApplication(lock);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetElectionApplication() {
    $scope.allowEdit = true;
    eae.electionApplication = angular.copy(eae.electionApplicationOrigin);
  }

  init();
}]);
/**
 * @name user_election_application
 * @description Saraksts "Mani LZP ekspertu komisiju vēlēšanu pieteikumi"
 * @param  {string} url /data/velesanu_pieteikumsl
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('UserElectionApplicationController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var ea = this; // function initialization

  ea.canDeleteElectionApplication = canDeleteElectionApplication;
  ea.openElectionApplication = openElectionApplication;
  ea.deleteElectionApplication = deleteElectionApplication;
  ea.openHomepage = openHomepage;

  function openElectionApplication(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.user_election_application.edit', {
        id: row.id
      });
    } else {
      $state.go('app.user_election_application.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function canDeleteElectionApplication(row) {
    if (row.can_delete) {
      return true;
    } else {
      return false;
    }
  }

  function deleteElectionApplication(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("velesanu_pieteikumsl_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts LZP ekspertu komisiju vēlēšanu pieteikums!', null, 'Komisiju vēlēšanas'));
      return true;
    }, $scope.handleError);
  }

  ea.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vēlēšanas", null, 'Komisiju vēlēšanas'),
      key: "velesanas",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Vārds", null, 'Komisiju vēlēšanas'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Komisiju vēlēšanas'),
      key: "uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Komisiju vēlēšanas'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Zinātnes nozare", null, 'Komisiju vēlēšanas'),
      key: "zinatnes_nozare",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ekspertu komisija", null, 'Komisiju vēlēšanas'),
      key: "ekspertu_komisija",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Komisiju vēlēšanas'),
      key: "statuss",
      sortable: "false"
    }],
    click_function: ea.openElectionApplication,
    create_function: ea.openElectionApplication,
    gridCheckbox: true,
    "delete": false,
    can_delete_row_function: ea.canDeleteElectionApplication,
    bulkDelete: true,
    delete_function: ea.deleteElectionApplication,
    filters: false,
    catalog_name: gettextCatalog.getString('Mani LZP ekspertu komisiju vēlēšanu pieteikumi', null, 'Komisiju vēlēšanas'),
    link_function: ea.openHomepage,
    "export": false
  };
}]);
/**
 * @name contract_research_form
 * @description "Projektu katalogs" forma
 * @param  {string} url /data/projekts/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ContractResearchFormController', ['UploadService', 'Select2Data', 'ngDialog', '$timeout', 'Restangular', '$scope', '$window', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$rootScope', function (UploadService, Select2Data, ngDialog, $timeout, Restangular, $scope, $window, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $rootScope) {
  var cre = this;
  $scope.allowEdit = true;
  cre.contractResearch = {
    apaksnozares: [],
    pielikumi: [],
    institucijas: []
  };
  cre.contractResearchOrigin = null;
  cre.UploadService = UploadService;
  cre.institucijas = null;
  cre.personsFound = null;
  cre.dateFormat = 'dd.MM.yyyy';
  cre.formats = ['dd.MM.yyyy'];
  cre.format = cre.formats[0];
  cre.isLockable = isLockable; // tabs

  cre.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Projektu konkursi'),
    active: true
  }, {
    id: 'attachmentTab',
    head: gettextCatalog.getString('Pielikums', null, 'Projektu konkursi'),
    active: false
  }]; // functions

  cre.loadData = loadData;
  cre.saveContractResearch = saveContractResearch;
  cre.openHomepage = openHomepage;
  cre.updatePrintTabTitle = updatePrintTabTitle;
  cre.resetContractResearch = resetContractResearch;
  cre.processData = processData;
  cre.setEditMode = setEditMode;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cre.tabs.length > i; i++) {
        if (cre.tabs[i].active) {
          cre.currentTitle = cre.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function init() {
    cre.institucijas = new Select2Data('choices', 'institutions');
    dataOp.getChoices('sso_full').then(function (data) {
      cre.ssos = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.papildus_info_areja_sistema_id) {
      data.papildus_info_areja_sistema_id = data.papildus_info_areja_sistema_id.toString();
    }

    if (data.publicesanas_datums) {
      data.publicesanas_datums = new Date(data.publicesanas_datums);
    }

    if (data.pieteiksanas_datums_lidz) {
      data.pieteiksanas_datums_lidz = new Date(data.pieteiksanas_datums_lidz);
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    if (!data.institucijas) {
      data.institucijas = [];
    }

    if (!data.apaksnozares) {
      data.apaksnozares = [];
    }

    cre.contractResearch = data;
    $timeout(function () {
      cre.contractResearchOrigin = angular.copy(cre.contractResearch);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cre.title = gettextCatalog.getString('Pētniecības projektu konkurss', null, 'Projektu konkursi');
      dataOp.getDefaultById($stateParams.id, 'ligumpetijums').then(function (data) {
        cre.processData(data);
      });
    } else {
      cre.title = gettextCatalog.getString('Pievienot līgumpētījumu', null, 'Projektu konkursi');
      $scope.allowEdit = false;
      $timeout(function () {
        cre.contractResearchOrigin = angular.copy(cre.contractResearch);
      });
    }
  }

  function openEmailConfirm(data) {
    var dataObj = angular.copy(data.institucijas);
    var emailObj = {
      epasta_statuss: 'TIEK_SUTITS'
    };
    ngDialog.openConfirm({
      template: 'components/contract_research/tabs/emailConfirmationDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: emailObj
    }).then(function () {
      ngDialog.openConfirm({
        template: 'components/contract_research/tabs/emailDialog.html',
        className: 'ngdialog-theme-default dialog400',
        data: emailObj
      }).then(function () {
        if (cre.contractResearch.visas_institucijas) {
          dataOp.saveDefault(emailObj, 'ligumpetijums_email_all').then(function (saveData) {
            Notification.success(gettextCatalog.getString('Epasti nosūtīti!', null, 'Projektu konkursi')); //??????
            //delete emailObj;
          }, $scope.handleError);
        } else {
          angular.forEach(dataObj, function (inst) {
            if (emailObj.temats) {
              inst.temats = emailObj.temats;
            }

            if (emailObj.temats) {
              inst.teksts = emailObj.teksts;
            }

            inst.epasta_statuss = emailObj.epasta_statuss;
            inst.institucija_id = inst.institucija_id;
          });
          dataOp.saveListDefault(dataObj, 'ligumpetijums_email').then(function (saveData) {
            Notification.success(gettextCatalog.getString('Epasti nosūtīti!', null, 'Projektu konkursi')); //??????
            //delete emailObj;
          }, $scope.handleError);
        }
      });
    });
  }

  function saveContractResearch(lock) {
    if (!lock) {
      if (cre.contractResearch.institution_select_obj) {
        cre.contractResearch.institucija_id = cre.contractResearch.institution_select_obj.id;
      }

      if (cre.pielikumi) {
        angular.forEach(cre.contractResearch.pielikumi, function (att) {
          if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
            att.institucijai_pieejams_no = new Date(Date.now());
          } else if (!att.institucijai_pieejams_no_checked) {
            delete att.institucijai_pieejams_no;
          }

          if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
            att.registretiem_pieejams_no = new Date(Date.now());
          } else if (!att.registretiem_pieejams_no_checked) {
            delete att.registretiem_pieejams_no;
          }

          if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
            att.publiski_pieejams_no = new Date(Date.now());
          } else if (!att.publiski_pieejams_no_checked) {
            delete att.publiski_pieejams_no;
          }
        });
      }

      dataOp.saveDefault(cre.contractResearch, 'ligumpetijums', true).then(function (data) {
        $rootScope.allowPrint = true;
        openEmailConfirm(data.data);
        cre.processData(data.data);

        if (cre.contractResearch.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots pētniecības projektu konkursa ieraksts!', null, 'Projektu konkursi'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots pētniecības projektu konkursa ieraksts!', null, 'Projektu konkursi'));
          $state.go('app.contract_research.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function resetContractResearch() {
    cre.contractResearch = angular.copy(cre.contractResearchOrigin);
    $scope.allowEdit = true;
  }

  init();
}]);
/**
 * @name contract_research
 * @description Saraksts "Līgumprojekti"
 * @param  {string} url /data/ligumprojekts_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ContractResearchController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var cr = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('institucija_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  cr.openContractResearch = openContractResearch;
  cr.deleteContractResearch = deleteContractResearch;
  cr.openHomepage = openHomepage;

  function openContractResearch(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.contract_research.edit', {
        id: row.id
      });
    } else {
      $state.go('app.contract_research.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteContractResearch(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("ligumpetijums", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts pētniecības projektu konkursa ieraksts!', null, 'Projektu konkursi'));
      return true;
    }, $scope.handleError);
  }

  cr.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Pētniecības projektu konkursa nosaukums", null, 'Projektu konkursi'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Pētniecības projektu konkursa publicēšanas datums", null, 'Projektu konkursi'),
      key: "publicesanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Pētniecības projektu konkursa pieteikšanās datums līdz", null, 'Projektu konkursi'),
      key: "pieteiksanas_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    click_function: cr.openContractResearch,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: cr.deleteContractResearch,
    filters: true,
    catalog_name: gettextCatalog.getString('Līgumpētījumi', null, 'Projektu konkursi'),
    create_function: cr.openContractResearch,
    link_function: cr.openHomepage,
    "export": false
  };
}]);
/**
 * @name Eksperti
 * @description Saraksts "Eksperti"
 * @param  {string} url /data/lzp_eksperts_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('PersonalController2', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', '$q', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope, $q, $filter, dataOp) {
  var ek = this;
  ek.person = null;
  ek.allowEdit = false;
  ek.collapsePhoneData = true;
  ek.title = 'Eksperti';
  ek.openPerson = openPerson;
  ek.archivePersonal = archivePersonal; // panel collapse initialization

  ek.collapseMainData = true; // function initialization

  ek.openPerson = openPerson;
  ek.deletePersonal = deletePersonal;

  function deletePersonal(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("lzp_eksperti_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts personāls!', null, 'Personāls'));
      return true;
    }, $scope.handleError);
  }

  function archivePersonal(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('personals', {
              id: key,
              archiving_date: $filter('date')(new Date(Date.now()), "yyyy-MM-dd")
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Personāls veiksmīgi arhivēts!', null, 'Personāls'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!!'));
        }

        $state.reload();
      });
    });
  }

  function openPerson(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.eksperti.edit', {
        id: row.id
      });
    } else {
      $state.go('app.eksperti.new');
    }
  }

  ek.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Eksperti'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Eksperti'),
      key: "uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("ORCID", null, 'Eksperti'),
      key: "orcid",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātnes nozare", null, 'Eksperti'),
      key: "zin_darba_vieta_lzp_eksperts_nozare",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Eksperta tiesību beigu termiņš", null, 'Eksperti'),
      key: "lzp_eksperts_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("LZP eksperta statuss", null, 'Eksperti'),
      key: "ir_lzp_eksperts",
      trueFalseVal: true,
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Nodarbināts augstākās izglītības iestādē", null, 'Eksperti'),
      key: "ir_ari_akademiskais_personals",
      trueFalseVal: true,
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Nodarbināts zinātniskajā institūcijā", null, 'Eksperti'),
      key: "ir_ari_zinatniskais_personals",
      trueFalseVal: true,
      sortable: "true"
    }],
    default_sort_col: 'uzvards',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: ek.openPerson,
    archive_function: ek.archivePersonal,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    archivePermission: 'personals_list',
    delete_function: ek.deletePersonal,
    catalog_name: gettextCatalog.getString('Eksperti', null, 'Eksperti'),
    create_function: ek.openPerson,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('personals_list') && $rootScope.currentUserRights['personals_list'].indexOf('archive_view') != -1) {
    ek.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Eksperti'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name email_notification_form
 * @description "Epasta paziņojums" forma
 * @param  {string} url /data/epasta_pazinojums_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('EmailNotificationFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var ene = this;
  ene.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'E-pasta paziņojumi'),
    active: true
  }];
  ene.emailNotification = {};
  $scope.allowEdit = true;
  ene.emailNotificationOrigin = null; // functions

  ene.loadData = loadData;
  ene.saveEmailNotification = saveEmailNotification;
  ene.setEditMode = setEditMode;
  ene.resetEmailNotification = resetEmailNotification;
  ene.processData = processData;
  ene.updatePrintTabTitle = updatePrintTabTitle;
  ene.openHomepage = openHomepage;
  ene.getInclude = getInclude;

  function getInclude(status) {
    return "components/email_notification/tabs/tab-maindata.html";
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ene.tabs.length > i; i++) {
        if (ene.tabs[i].active) {
          ene.currentTitle = ene.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    loadData();
  }

  function processData(data) {
    ene.emailNotification = data;
    $timeout(function () {
      ene.emailNotificationOrigin = angular.copy(ene.emailNotification);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      ene.title = gettextCatalog.getString('Epasta paziņojums', null, 'E-pasta paziņojumi');
      dataOp.getDefaultById($stateParams.id, 'epasta_pazinojums_editable').then(function (data) {
        ene.processData(data);
      });
    }
  }

  function saveEmailNotification(lock) {
    if (!lock) {
      dataOp.saveDefault(ene.emailNotification, 'epasta_pazinojums_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (ene.emailNotification.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots epasta paziņojums!', null, 'E-pasta paziņojumi'));
          ene.processData(data.data);
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetEmailNotification() {
    $scope.allowEdit = true;
    ene.emailNotification = angular.copy(ene.emailNotificationOrigin);
  }

  init();
}]);
/**
 * @name email_notification
 * @description Saraksts "Epasta paziņojumi"
 * @param  {string} url /data/epasta_pazinojums
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('EmailNotificationController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var en = this; // function initialization

  en.openEmailNotification = openEmailNotification;
  en.openHomepage = openHomepage;

  function openEmailNotification(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.email_notification.edit', {
        id: row.id
      });
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  en.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Paziņojuma nosaukums", null, 'E-pasta paziņojumi'),
      key: "nosaukums",
      sortable: "true"
    }],
    click_function: en.openEmailNotification,
    gridCheckbox: false,
    "delete": false,
    bulkDelete: false,
    filters: false,
    catalog_name: gettextCatalog.getString('Epasta paziņojumi', null, 'E-pasta paziņojumi'),
    link_function: en.openHomepage,
    "export": false
  };
}]);
/**
 * @name equipment_form
 * @description "Zinātniskā iekārta" forma
 * @param  {string} url /data/iekarta_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('EquipmentFormController', ['UploadService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var ene = this;
  ene.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Iekārtas'),
    active: true
  }, {
    id: 'atachmentTab',
    head: gettextCatalog.getString('Pielikums', null, 'Iekārtas'),
    active: false
  }];
  ene.equipment = {
    iekartu_grupas: [],
    kontaktinfo: [],
    iegades_finansejums: [],
    apaksnozares: [],
    pielikumi: []
  };
  ene.UploadService = UploadService;
  $scope.allowEdit = true;
  ene.equipmentOrigin = null;
  ene.dateFormat = 'dd.MM.yyyy'; // functions

  ene.loadData = loadData;
  ene.saveEquipment = saveEquipment;
  ene.setEditMode = setEditMode;
  ene.resetEquipment = resetEquipment;
  ene.processData = processData;
  ene.updatePrintTabTitle = updatePrintTabTitle;
  ene.openHomepage = openHomepage;
  ene.getInclude = getInclude;
  ene.isLockable = isLockable;
  ene.hasReqSciBranches = hasReqSciBranches;
  ene.hasReqEquipTypes = hasReqEquipTypes;
  ene.canUpd = canUpd;

  function canUpd() {
    var flag = false;

    if (ene.equipment) {
      if (ene.equipment.id && ene.equipment.id > 0) {
        if (ene.equipment.auth) {
          flag = ene.equipment.auth.is_update_relevant;
        }
      } else {
        flag = ene.equipment.is_insert_relevant;
      }
    }

    return flag;
  }

  function hasReqSciBranches() {
    var hasReqBranches = true;

    if (ene.equipment && (!ene.equipment.apaksnozares || ene.equipment.apaksnozares.length <= 0)) {
      hasReqBranches = false;
    }

    return hasReqBranches;
  }

  function hasReqEquipTypes() {
    var hasReqTypes = true;

    if (ene.equipment && (!ene.equipment.iekartu_grupas || ene.equipment.iekartu_grupas.length <= 0)) {
      hasReqTypes = false;
    }

    return hasReqTypes;
  }

  function getInclude(status) {
    return "components/equipment/tabs/tab-maindata.html";
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ene.tabs.length > i; i++) {
        if (ene.tabs[i].active) {
          ene.currentTitle = ene.tabs[i].head;
          break;
        }
      }
    });
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    ene.scientificInstitutions = new Select2Data('choices', 'scientific_institutions');
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institution_select_obj = {
        id: data.institucija_id,
        text: data.institucija_nos
      };
    }

    if (data.iegades_gads) {
      data.iegades_gads = data.iegades_gads.toString();
    }

    if (!data.apaksnozares) {
      data.apaksnozares = [];
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    ene.equipment = data;
    $timeout(function () {
      ene.equipmentOrigin = angular.copy(ene.equipment);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      ene.title = gettextCatalog.getString('Zinātniskā iekārta', null, 'Iekārtas');
      dataOp.getDefaultById($stateParams.id, 'iekarta_editable').then(function (data) {
        ene.processData(data);
      });
    } else {
      ene.title = gettextCatalog.getString('Pievienot zinātnisko iekārtu', null, 'Iekārtas');
      $scope.allowEdit = false;
      dataOp.getDefaultById(0, 'iekarta_editable').then(function (data) {
        ene.processData(data);
      });
    }
  }

  function saveEquipment(lock) {
    if (!lock) {
      if (ene.equipment.institution_select_obj) {
        ene.equipment.institucija_id = ene.equipment.institution_select_obj.id;
      }

      if (ene.equipment.iegades_finansejums) {
        for (x = 0; ene.equipment.iegades_finansejums.length > x; x++) {
          if (ene.equipment.iegades_finansejums[x].fin_summa) {
            ene.equipment.iegades_finansejums[x].fin_summa = parseFloat(ene.equipment.iegades_finansejums[x].fin_summa);
          }
        }
      }

      angular.forEach(ene.equipment.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      dataOp.saveDefault(ene.equipment, 'iekarta_editable').then(function (data) {
        $rootScope.allowPrint = true;
        ene.processData(data.data);

        if (ene.equipment.id) {
          ene.isNew = false;
          Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskā iekārta!', null, 'Iekārtas'));
          ene.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienota zinātniskā iekārta!', null, 'Iekārtas'));
          $state.go('app.equipment.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetEquipment() {
    $scope.allowEdit = true;
    ene.equipment = angular.copy(ene.equipmentOrigin);
  }

  init();
}]);
/**
 * @name equipment
 * @description Saraksts "Zinātnisko iekārtu datubāze"
 * @param  {string} url /data/iekarta
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('EquipmentController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var en = this; // function initialization

  en.openEquipment = openEquipment;
  en.deleteEquipment = deleteEquipment;
  en.openHomepage = openHomepage;

  function openEquipment(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.equipment.edit', {
        id: row.id
      });
    } else {
      $state.go('app.equipment.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteEquipment(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("iekarta_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta zinātniskā iekārta!', null, 'Iekārtas'));
      return true;
    }, $scope.handleError);
  }

  en.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Iekārtas nosaukums", null, 'Iekārtas'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ražotājs", null, 'Iekārtas'),
      key: "razotajs",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Modelis", null, 'Iekārtas'),
      key: "modelis",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātnes nozare", null, 'Iekārtas'),
      key: "zinatnes_nozares",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Iekārtu grupa", null, 'Iekārtas'),
      key: "iekartu_grupa_nos",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Iekārtas'),
      key: "institucija_nos",
      sortable: "true"
    }],
    click_function: en.openEquipment,
    create_function: en.openEquipment,
    gridCheckbox: true,
    "delete": true,
    bulkDelete: true,
    delete_function: en.deleteEquipment,
    filters: false,
    catalog_name: gettextCatalog.getString('Zinātnisko iekārtu datubāze', null, 'Iekārtas'),
    link_function: en.openHomepage,
    "export": true
  };
  var state = $stateParams.context; //if (state == 'pub' || state == 'priv') {
  //   en.gridParams.create_function = null
  //} else en.gridParams.create_function = en.openEquipment
}]);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @name expert_application_form
 * @description "LZP eksperta tiesību pieteikums" forma
 * @param  {string} url /data/pieteikums_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ExpertApplicationFormController', function (ngDialog, $timeout, $scope, $state, $stateParams, dataService, gettextCatalog, Notification, $rootScope, $q, $window, UploadService) {
  var eae = this;
  eae.UploadService = UploadService;
  eae.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Eksperta tiesību pieteikumi'),
    active: true
  }];
  eae.expertApplication = {};
  eae.expertApplicationStatuses = null;
  eae.sciBranchesLzp = null;
  eae.expertCommissions = null;
  $scope.allowEdit = true;
  eae.expertApplicationOrigin = null;
  eae.dateFormat = 'dd.MM.yyyy';

  eae.showPersonData = function () {
    $state.go('app.personal.edit', {
      id: eae.expertApplication.personals_id
    });
  };

  eae.getInclude = function (status) {
    return "components/expert_application/tabs/tab-maindata.html";
  };

  eae.updatePrintTabTitle = function () {
    $timeout(function () {
      for (var i = 0; eae.tabs.length > i; i++) {
        if (eae.tabs[i].active) {
          eae.currentTitle = eae.tabs[i].head;
          break;
        }
      }
    });
  };

  eae.loadData = function () {
    if ($stateParams.id) {
      eae.title = gettextCatalog.getString('LZP eksperta tiesību pieteikums', null, 'Eksperta tiesību pieteikumi');
      dataService.getDefaultById($stateParams.id, 'pieteikums_editable').then(eae.processData);
      $scope.allowEdit = true;
      $scope.submission_incomplete = '';
    }
  };

  var init = function init() {
    dataService.getCodificator('expert_application_status_short').then(function (data) {
      eae.expertApplicationStatuses = data.data;
    });
    dataService.getChoices('science_branch_full').then(function (data) {
      eae.sciBranchesLzp = data.data;
    });
    dataService.getCodificator('komisija_id').then(function (data) {
      eae.expertCommissions = data.data;
    });
    eae.loadData();
  };

  eae.datums_no_changed = function () {
    var d = eae.expertApplication.lzp_eksperts_datums_no;
    eae.expertApplication.lzp_eksperts_datums_lidz = moment(d).add(3, 'year').subtract(1, 'day').toDate();
  };

  eae.processData = function (dto) {
    if (dto.zinatnes_nozare_lzp_id) {
      dto.zinatnes_nozare_lzp_id = dto.zinatnes_nozare_lzp_id.toString();
    }

    if (dto.kla_ekspertu_komisija_id) {
      dto.kla_ekspertu_komisija_id = dto.kla_ekspertu_komisija_id.toString();
    }

    if (dto.iesniegsanas_datums) {
      dto.iesniegsanas_datums = new Date(dto.iesniegsanas_datums);
    }

    if (dto.lemuma_datums) {
      dto.lemuma_datums = new Date(dto.lemuma_datums);
    }

    if (dto.lzp_eksperts_datums_no) {
      dto.lzp_eksperts_datums_no = new Date(dto.lzp_eksperts_datums_no);
    }

    if (dto.lzp_eksperts_datums_lidz) {
      dto.lzp_eksperts_datums_lidz = new Date(dto.lzp_eksperts_datums_lidz);
    }

    dto.statuss_nosaukums = "";
    var st = eae.expertApplicationStatuses.find(function (e) {
      return e.id === dto.statuss;
    });

    if (!!st) {
      dto.statuss_nosaukums = st.title;
    } else {
      dto.statuss_nosaukums = eae.statuss;
    }

    if (!st && dto.statuss === 'SAGATAVOSANA') {
      // hack, lai arī SAGATAVOSANA varētu parādīt
      dto.statuss_nosaukums = 'Sagatavošanā';
    } // console.log({ st, statuss: dto.statuss, statuses: eae.expertApplicationStatuses })


    eae.expertApplication = dto;
    $scope.dto = dto;
    $timeout(function () {
      eae.dto_original = _objectSpread({}, dto);
      eae.expertApplicationOrigin = _objectSpread({}, dto);
    });
  };

  eae.saveExpertApplication = function (lock) {
    if (!lock) {
      dataService.saveExpertApplicationById(eae.expertApplication, 'pieteikums_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (eae.expertApplication.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
          eae.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
          $state.go('app.expert_application.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  };

  eae.setEditMode = function () {
    $scope.allowEdit = false;
    $scope.submission_incomplete = '';
  };

  eae.resetExpertApplication = function () {
    $scope.allowEdit = true;
    eae.expertApplication = angular.copy(eae.expertApplicationOrigin);
  };

  eae.unconfirmApplication = function () {
    if (!confirm("Atgriezt pieteikumu kā iesniegtu?")) return;
    dataService.api('pieteikums_unconfirm', {
      id: eae.expertApplication.id
    }).then(function () {
      return Notification.success("Pieteikums atgriezts 'IESNGIEGTS' statusā.");
    }).then(eae.loadData);
  };

  eae.transferApplication = function () {
    if (!confirm("Nodot izskatīšanai LZP ekspertu komisijai?")) return;
    dataService.api('pieteikums_transfer', {
      id: eae.expertApplication.id
    }).then(function () {
      return Notification.success("Nodots izskatīšanai LZP ekspertu komisijai");
    }).then(eae.loadData);
  };

  eae.confirmApplication = function () {
    $scope.submission_incomplete = 'confirm';

    if (!eae.expertApplication.lemuma_numurs) {
      return focus_to('js-lemuma-numurs');
    }

    if (!eae.expertApplication.lemuma_datums) {
      return focus_to('js-lemuma-datums');
    }

    if (!eae.expertApplication.lzp_eksperts_datums_no) {
      return focus_to('js-eksperts-no');
    }

    if (!eae.expertApplication.lzp_eksperts_datums_lidz) {
      return focus_to('js-eksperts-lidz');
    }

    if (!eae.expertApplication.kla_ekspertu_komisija_id) {
      return focus_to('js-ekspertu-komisija');
    }

    $scope.submission_incomplete = null;
    if (!confirm("Apstiprināt šo pieteikumu?")) return;
    dataService.saveExpertApplicationById(eae.expertApplication, 'pieteikums_editable').then(function () {
      dataService.api('pieteikums_confirm', {
        id: eae.expertApplication.id
      }).then(function () {
        return Notification.success("Pieteikums apstiprināts.");
      }).then(eae.loadData);
    });
  };

  eae.rejectApplication = function () {
    $scope.submission_incomplete = 'reject';

    if (!eae.expertApplication.lemuma_numurs) {
      scroll_to('js-scroll-target');
      focus_to('js-lemuma-numurs');
      return;
    }

    if (!eae.expertApplication.lemuma_datums) {
      scroll_to('js-scroll-target');
      focus_to('js-lemuma-datums');
      return;
    }

    if (!eae.expertApplication.pielikumi.length) {
      scroll_to('js-scroll-target');
      return;
    }

    $scope.submission_incomplete = null;
    if (!confirm("Noraidīt šo pieteikumu?")) return;
    dataService.saveExpertApplicationById(eae.expertApplication, 'pieteikums_editable').then(function () {
      dataService.api('pieteikums_reject', {
        id: eae.expertApplication.id
      }).then(function () {
        return Notification.success("Pieteikums noraidīts.");
      }).then(eae.loadData);
    });
  };

  eae.admrejectApplication = function () {
    $scope.submission_incomplete = 'admreject';

    if (!eae.expertApplication.pamatojums) {
      Notification.warning("Lūdzu, norādiet noraidīšanas pamatojumu.");
      return focus_to('js-pamatojums');
    }

    $scope.submission_incomplete = '';
    if (!confirm("Pārbaudiet noraidīšanas pamatojumu! Administratīvi noraidīt šo pieteikumu?")) return;
    dataService.saveExpertApplicationById(eae.expertApplication, 'pieteikums_editable').then(function () {
      dataService.api('pieteikums_admreject', {
        id: eae.expertApplication.id
      }).then(function () {
        return Notification.success("Pieteikums administratīvi noraidīts.");
      }).then(eae.loadData);
    });
  };

  var focus_to = function focus_to(classname) {
    var elts = document.getElementsByClassName(classname);
    if (elts.length) elts[0].focus();
  };

  var scroll_to = function scroll_to(classname) {
    var elts = document.getElementsByClassName(classname);
    if (elts.length) elts[0].scrollIntoView && elts[0].scrollIntoView();
  };

  eae.removeAttachment = function (attachment) {
    if (!confirm("Izdz\u0113st ".concat(attachment.pielikuma_faili[0].filename, "?"))) return;
    dataService.api('pieteikums_remove_attachment', {
      id: eae.expertApplication.id,
      pielikums_id: attachment.id
    }).then(eae.loadData);
  };

  eae.filesChanged = function (obj) {
    // meklējam ielādētos failus
    if (obj.pielikuma_faili.length > 0) {
      dataService.saveExpertApplicationById(eae.expertApplication, 'pieteikums_editable').then(function () {
        dataService.api('pieteikums_add_attachment', {
          pieteikums_id: eae.expertApplication.id,
          pielikums_id: obj.pielikuma_faili[0].id,
          veids: 'NORAIDIJUMS'
        }).then(eae.loadData);
      });
    }

    obj.errFiles.forEach(function (e) {
      return Notification.error(e.$error);
    });
  };

  init();
}); // vim: ts=4:sw=4
/**
 * @name expert_application
 * @description Saraksts "LZP eksperta tiesību pieteikumi"
 * @param  {string} url /data/pieteikums
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ExpertApplicationController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var ea = this; // function initialization

  ea.openExpertApplication = openExpertApplication;
  ea.deleteExpertApplication = deleteExpertApplication;
  ea.openHomepage = openHomepage;

  function openExpertApplication(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.expert_application.edit', {
        id: row.id
      });
    } else {
      $state.go('app.expert_application.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteExpertApplication(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("pieteikums_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
      return true;
    }, $scope.handleError);
  }

  ea.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Eksperta tiesību pieteikumi'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Eksperta tiesību pieteikumi'),
      key: "uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Eksperta tiesību pieteikumi'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Zinātnes nozare", null, 'Eksperta tiesību pieteikumi'),
      key: "zinatnes_nozare_lzp",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ekspertu komisija", null, 'Eksperta tiesību pieteikumi'),
      key: "ekspertu_komisija",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Eksperta tiesību pieteikumi'),
      key: "statuss",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Lēmuma pieņemšanas datums", null, 'Eksperta tiesību pieteikumi'),
      key: "lemuma_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Lēmuma numurs", null, 'Eksperta tiesību pieteikumi'),
      key: "lemuma_numurs",
      sortable: "false"
    }],
    click_function: ea.openExpertApplication,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: ea.deleteExpertApplication,
    filters: false,
    catalog_name: gettextCatalog.getString('LZP eksperta tiesību pieteikumi', null, 'Eksperta tiesību pieteikumi'),
    link_function: ea.openHomepage,
    "export": true
  };
}]);
/**
 * @name expert_application_form
 * @description "LZP eksperta tiesību pieteikums" forma
 * @param  {string} url /data/pieteikumsl_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UserExpertApplicationFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var eae = this;
  eae.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Eksperta tiesību pieteikumi'),
    active: true
  }];
  eae.expertApplication = {};
  eae.expertApplicationStatuses = null;
  eae.sciBranchesLzp = null;
  eae.expertCommissions = null;
  $scope.allowEdit = true;
  eae.selectedCount = null;
  eae.expertApplicationOrigin = null; // functions

  eae.loadData = loadData;
  eae.saveExpertApplication = saveExpertApplication;
  eae.submitExpertApplication = submitExpertApplication;
  eae.setEditMode = setEditMode;
  eae.resetExpertApplication = resetExpertApplication;
  eae.processData = processData;
  eae.processSciResults = processSciResults;
  eae.getSelectedCount = getSelectedCount;
  eae.updatePrintTabTitle = updatePrintTabTitle;
  eae.openHomepage = openHomepage;
  eae.dateFormat = 'dd.MM.yyyy';
  eae.getInclude = getInclude;

  function getInclude(status) {
    if (eae.expertApplication.statuss && eae.expertApplication.statuss === 'SAGATAVOSANA') {
      return "components/expert_application/tabs/tab-maindata2.html";
    } else {
      return "components/expert_application/tabs/tab-maindata3.html";
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; eae.tabs.length > i; i++) {
        if (eae.tabs[i].active) {
          eae.currentTitle = eae.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('expert_application_status').then(function (data) {
      eae.expertApplicationStatuses = data.data;
    });
    dataOp.getChoices('science_branch_full').then(function (data) {
      eae.sciBranchesLzp = data.data;
    });
    dataOp.getCodificator('komisija_id').then(function (data) {
      eae.expertCommissions = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.zinatnes_nozare_lzp_id) {
      data.zinatnes_nozare_lzp_id = data.zinatnes_nozare_lzp_id.toString();
    }

    if (data.kla_ekspertu_komisija_id) {
      data.kla_ekspertu_komisija_id = data.kla_ekspertu_komisija_id.toString();
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.lemuma_datums) {
      data.lemuma_datums = new Date(data.lemuma_datums);
    }

    if (data.lzp_eksperts_datums_no) {
      data.lzp_eksperts_datums_no = new Date(data.lzp_eksperts_datums_no);
    }

    if (data.lzp_eksperts_datums_lidz) {
      data.lzp_eksperts_datums_lidz = new Date(data.lzp_eksperts_datums_lidz);
    }

    eae.expertApplication = data;
    $timeout(function () {
      eae.expertApplicationOrigin = angular.copy(eae.expertApplication);
    });
  }

  function processSciResults(data) {
    if (eae.expertApplication && eae.expertApplication.rezultati) {
      for (var i = 0; data.length > i; i++) {
        data[i].izvelets = false;

        for (var j = 0; eae.expertApplication.rezultati.length > j; j++) {
          if (data[i].zin_rezultats_id == eae.expertApplication.rezultati[j].zin_rezultats_id) {
            data[i].izvelets = true;
            break;
          }
        }
      }
    }

    eae.sciResultsAll = data;
    eae.selectedCount = getSelectedCount();
  }

  function getSelectedCount() {
    var cnt = 0;

    if (eae.sciResultsAll) {
      for (var i = 0; eae.sciResultsAll.length > i; i++) {
        if (eae.sciResultsAll[i].izvelets) {
          cnt = cnt + 1;
        }
      }
    }

    return cnt;
  }

  function loadData() {
    if ($stateParams.id) {
      eae.title = gettextCatalog.getString('LZP eksperta tiesību pieteikums', null, 'Eksperta tiesību pieteikumi');
      dataOp.getDefaultById($stateParams.id, 'pieteikumsl_editable').then(function (data) {
        eae.processData(data);

        if (!eae.expertApplication.statuss || eae.expertApplication.statuss === 'SAGATAVOSANA') {
          dataOp.listDefault('pieteikumsl_rezultati_list').then(function (data2) {
            eae.processSciResults(data2);
          });
        }
      });
    } else {
      eae.isNew = true;
      eae.title = gettextCatalog.getString('Pievienot LZP eksperta tiesību pieteikumu', null, 'Eksperta tiesību pieteikumi');
      dataOp.getDefaultById(0, 'pieteikumsl_editable', {
        pieteikums_id: $stateParams.eaId
      }).then(function (data) {
        eae.processData(data);

        if (!eae.expertApplication.statuss || eae.expertApplication.statuss === 'SAGATAVOSANA') {
          dataOp.listDefault('pieteikumsl_rezultati_list').then(function (data2) {
            eae.processSciResults(data2);
          });
        }
      });
      $scope.allowEdit = false;
    }
  }

  var fillResults = function fillResults() {
    if (eae.sciResultsAll) {
      eae.expertApplication.rezultati = [];

      for (var i = 0; eae.sciResultsAll.length > i; i++) {
        if (eae.sciResultsAll[i].izvelets) {
          var sr = {};
          sr.nosaukums = eae.sciResultsAll[i].nosaukums;
          sr.veids = eae.sciResultsAll[i].veids;
          sr.autori = eae.sciResultsAll[i].autori;
          sr.gads = eae.sciResultsAll[i].gads;
          sr.zin_rezultats_id = eae.sciResultsAll[i].zin_rezultats_id;
          eae.expertApplication.rezultati.push(sr);
        }
      }
    }
  };

  function saveExpertApplication(lock) {
    if (!lock) {
      fillResults();
      dataOp.saveExpertApplicationById(eae.expertApplication, 'pieteikumsl_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (eae.expertApplication.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
          eae.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
          $state.go('app.user_expert_application.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function submitExpertApplication(lock) {
    fillResults();
    dataOp.saveExpertApplicationById(eae.expertApplication, 'pieteikumsl_editable').then(function (data) {
      dataOp.api('pieteikums_submit', {
        id: data.data.id
      }).then(function () {
        Notification.success("Pieteikums iesniegts.");
        $scope.allowEdit = false;

        if (!$stateParams.id) {
          $state.go('app.user_expert_application.edit', {
            id: data.data.id
          });
        } else {
          loadData();
        }
      });
    });
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetExpertApplication() {
    $scope.allowEdit = true;
    eae.expertApplication = angular.copy(eae.expertApplicationOrigin);
  }

  init();
}]); // vim: ts=4:sw=4
/**
 * @name user_expert_application
 * @description Saraksts "Mani LZP eksperta tiesību pieteikumi"
 * @param  {string} url /data/pieteikumsl
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('UserExpertApplicationController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var ea = this; // function initialization

  ea.canDeleteExpertApplication = canDeleteExpertApplication;
  ea.openExpertApplication = openExpertApplication;
  ea.createFromTempExpertApplication = createFromTempExpertApplication;
  ea.deleteExpertApplication = deleteExpertApplication;
  ea.openHomepage = openHomepage;

  function openExpertApplication(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.user_expert_application.edit', {
        id: row.id
      });
    } else {
      $state.go('app.user_expert_application.new');
    }
  }

  function createFromTempExpertApplication(createObj) {
    var idArr = [];

    if (createObj === parseInt(createObj, 10)) {
      idArr.push(createObj.toString());
    } else {
      for (var key in createObj) {
        idArr.push(key);
      }
    }

    if (idArr.length > 0) {
      $state.go('app.user_expert_application.new', {
        eaId: idArr[0]
      });
    } else {
      $state.go('app.user_expert_application.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function canDeleteExpertApplication(row) {
    if (row.can_delete) {
      return true;
    } else {
      return false;
    }
  }

  function deleteExpertApplication(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("pieteikumsl_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts LZP eksperta tiesību pieteikums!', null, 'Eksperta tiesību pieteikumi'));
      return true;
    }, $scope.handleError);
  }

  ea.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Eksperta tiesību pieteikumi'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Eksperta tiesību pieteikumi'),
      key: "uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Eksperta tiesību pieteikumi'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Ekspertu komisija", null, 'Eksperta tiesību pieteikumi'),
      key: "ekspertu_komisija",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Eksperta tiesību pieteikumi'),
      key: "statuss",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Lēmuma pieņemšanas datums", null, 'Eksperta tiesību pieteikumi'),
      key: "lemuma_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Lēmuma numurs", null, 'Eksperta tiesību pieteikumi'),
      key: "lemuma_numurs",
      sortable: "false"
    }],
    click_function: ea.openExpertApplication,
    create_function: ea.openExpertApplication,
    create_from_temp_function: ea.createFromTempExpertApplication,
    gridCheckbox: true,
    "delete": false,
    can_delete_row_function: ea.canDeleteExpertApplication,
    bulkDelete: true,
    delete_function: ea.deleteExpertApplication,
    filters: false,
    catalog_name: gettextCatalog.getString('Mani LZP eksperta tiesību pieteikumi', null, 'Eksperta tiesību pieteikumi'),
    link_function: ea.openHomepage,
    "export": false
  };
}]);
/**
 * @name he_institution
 * @description Saraksts "Augstākās izglītības iestādes"
 * @param  {string} url /data/aii_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('HeInstitutionController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$q', '$window', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $q, $window, $filter, dataOp) {
  var hei = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('institucija_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  hei.openHeInstitution = openHeInstitution;
  hei.deleteHeInstitution = deleteHeInstitution;
  hei.openHomepage = openHomepage;
  hei.archiveHeInstitution = archiveHeInstitution;

  function openHeInstitution(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.he_institution.edit', {
        id: row.id
      });
    } else {
      $state.go('app.he_institution.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function archiveHeInstitution(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('institucija', {
              id: key,
              archiving_date: Date.now()
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Augstākās izglītības iestādes veiksmīgi arhivētas!', null, 'AII'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!!'));
        }

        $state.reload();
      });
    });
  }

  function deleteHeInstitution(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("institucija_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta augstākās izglītibas iestāde!', null, 'AII'));
      return true;
    }, $scope.handleError);
  }

  hei.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Augstākās izglītības iestādes nosaukums", null, 'AII'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas nr. augstākās izglītības iestāžu reģistrā", null, 'AII'),
      key: "aii_reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Vadītājs (vārds, uzvārds)", null, 'AII'),
      key: "vaditajs",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Augstākās izglītības iestādes tālruņa numurs", null, 'AII'),
      key: "telefona_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Augstākās izglītības iestādes e-pasta adrese", null, 'AII'),
      key: "epasts",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Mājas lapa", null, 'AII'),
      key: "majas_lapa",
      sortable: "true",
      link: true
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    click_function: hei.openHeInstitution,
    archive_function: hei.archiveHeInstitution,
    archivePermission: 'aii_list',
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    delete_function: hei.deleteHeInstitution,
    filters: true,
    catalog_name: gettextCatalog.getString('Augstākās izglītības iestādes', null, 'AII'),
    create_function: hei.openHeInstitution,
    link_function: hei.openHomepage,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('aii_list') && $rootScope.currentUserRights['aii_list'].indexOf('archive_view') != -1) {
    hei.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'AII'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
* @name home
* @description Sadaļa "Galvenā navigācija"
*
* @returns {html} galvenā navigācijas sadaļa
 */
angular.module('myApp').controller('HomeController', ['$state', '$window', 'gettextCatalog', '$rootScope', '$cookies', '$document', 'authService', 'ngDialog', 'uuiData', 'dataService', function ($state, $window, gettextCatalog, $rootScope, $cookies, $document, authOp, ngDialog, uuiData, dataService) {
  var ho = this;

  print = function print() {
    if ($rootScope.allowPrint) {
      $window.print();
    }
  };

  getNotifications = function getNotifications() {
    ho.notifications = notifOp.getNotifs();

    if (!ho.notifications) {
      ho.notifications = notifOp;
    }
  };

  openHomepage = function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  };

  infoDialog = function infoDialog(templateUrl) {
    ngDialog.openConfirm({
      template: templateUrl,
      className: 'ngdialog-text-left ngdialog-theme-default'
    }).then(function () {});
  };

  goTo = function goTo(goToState) {
    $state.go(goToState, {}, {
      reload: true
    });
  };

  openNotification = function openNotification(id) {
    if (id) {
      return $state.go('app.notifications' + id + '.edit', {
        id: id
      });
    }
  };

  checkRights = function checkRights(method, action) {
    if ($rootScope.currentUserRights === null || typeof $rootScope.currentUserRights === 'undefined') {
      return false;
    } else {
      if ($rootScope.currentUserRights.hasOwnProperty(method) || method === 'public') {
        angular.forEach(action, function (value) {
          if ($rootScope.currentUserRights[method].indexOf(value) === -1) {
            return false;
          }
        });
        return true;
      } else {
        return false;
      }
    }
  };

  switchLanguage = function switchLanguage(lang) {
    $cookies.put('current_language', lang);
    $window.location.reload();
  };

  switchFontSize = function switchFontSize(type) {
    if (type) {
      if (ho.zoomLevel < 5) {
        ho.zoomLevel++;
        $rootScope.current_font_size = parseFloat($rootScope.current_font_size) + 0.1;
        $document[0].body.style.fontSize = $rootScope.current_font_size + 'em';
      }
    } else {
      if (ho.zoomLevel > -5) {
        ho.zoomLevel--;
        $rootScope.current_font_size = parseFloat($rootScope.current_font_size) - 0.1;
        $document[0].body.style.fontSize = $rootScope.current_font_size + 'em';
      }
    }
  };

  ho.state = $state;
  ho.print = print;
  ho.font_state = 2;
  ho.switchLanguage = switchLanguage;
  ho.switchFontSize = switchFontSize;
  ho.checkRights = checkRights;
  ho.infoDialog = infoDialog;
  ho.goTo = goTo;
  ho.openHomepage = openHomepage;
  ho.openNotification = openNotification;
  ho.zoomLevel = 0;
  ho.notifications = uuiData.list('notifications', function (nots) {
    return _.each(nots, function (n) {
      n.is_visible = _.findIndex(authOp.u.permissions, function (_this) {
        return function (d) {
          return d === "PAZINOJUMS_" + n.id + "_SKATIT";
        };
      }(this)) !== -1;
      return true;
    });
  });
  ho.publ_elections = uuiData.list('publ_elections');
}]);
/**
 * @name import
 * @description Saraksts "Ielādētie dati"
 * @param  {string} url /data/import_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ImportController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', 'dataService', '$window', '$q', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, dataOp, $window, $q) {
  var im = this;
  im.openDataDialog = openDataDialog;
  im.confirmOrCancel = confirmOrCancel; // function initialization

  function openDataDialog(row) {
    dataOp.getDefaultById(row.id, 'import_details').then(function (response) {
      ngDialog.open({
        template: 'components/import/importDialog.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          newData: angular.toJson(response, true)
        },
        scope: $scope
      });
    });
  }

  function confirmOrCancel(confOrCancObj, selected, type) {
    var noErrors = true;
    var data = {
      count: selected,
      type: type,
      komentars: null
    };
    ngDialog.openConfirm({
      template: 'components/import/confirmOrCancelDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: data,
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        console.log(data);
        Object.keys(confOrCancObj).forEach(function (key, val) {
          var req = dataOp.confirmOrCancelImport(data, type, key).then(function (response) {
            return response;
          }, function (response) {
            noErrors = false;
            return response;
          });
          promises.push(req);
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          if (type == 'confirm') {
            Notification.success(gettextCatalog.getString('Datu ielāde apstiprināta!', null, 'Datu apstiprināšana'));
          } else {
            Notification.success(gettextCatalog.getString('Datu ielāde atcelta!', null, 'Datu apstiprināšana'));
          }
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!'));
        }

        $state.reload();
      });
    });
  }

  im.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Datu tips", null, 'Datu apstiprināšana'),
      key: "tips",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Iesniedzējs", null, 'Datu apstiprināšana'),
      key: "iesniedzejs",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Institūcija", null, 'Datu apstiprināšana'),
      key: "institucija_nosaukums",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Datu apstiprināšana'),
      key: "statuss",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Augšupielādes laiks", null, 'Datu apstiprināšana'),
      key: "augsupielades_laiks",
      sortable: "false",
      dateTimeVal: "true"
    }, {
      text: gettextCatalog.getString("Izpildes laiks", null, 'Datu apstiprināšana'),
      key: "izpildes_laiks",
      sortable: "false",
      dateTimeVal: "true"
    }, {
      text: gettextCatalog.getString("XLSX datne", null, 'Datu apstiprināšana'),
      key: "xls_link",
      filename: "xls_filename",
      sortable: "false",
      localFile: true
    }],
    click_function: im.openDataDialog,
    confirm_function: im.confirmOrCancel,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: false,
    bulkConfirm: true,
    filters: true,
    catalog_name: gettextCatalog.getString('Ielādētie dati', null, 'Datu apstiprināšana'),
    "export": false
  };
}]);
/**
 * @name scientific_personal_form
 * @description Forma "Zinātniskais personāls"
 * @param  {string} url /data/zin_personals/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('MyPersonalDataEditController', ['UploadService', 'ngDialog', 'Select2Data', '$rootScope', 'SearchPerson', 'Restangular', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$q', function (UploadService, ngDialog, Select2Data, $rootScope, SearchPerson, Restangular, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $q) {
  var ctrl = this;
  $scope.allowEdit = true;
  ctrl.scientific = null;
  ctrl.personsFound = null;
  ctrl.scientificOrigin = null;
  ctrl.isArchived = false;
  ctrl.isNew = false;
  ctrl.formats = ['dd.MM.yyyy'];
  ctrl.format = ctrl.formats[0];
  ctrl.personFormState = null;
  ctrl.reqSciWorkerId = false;
  ctrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Personāls'),
    active: true
  }, {
    id: 'scientific_personal',
    head: gettextCatalog.getString('Zin. darba vieta', null, 'Personāls'),
    active: false
  }, {
    id: 'academic_personal',
    head: gettextCatalog.getString('Akad. darba vieta', null, 'Personāls'),
    active: false
  }, {
    id: 'phoneDataTab',
    head: gettextCatalog.getString('Kontaktinformācija', null, 'Personāls'),
    active: false
  }, {
    id: 'qualificationJobDataTab',
    head: gettextCatalog.getString('Izglītība', null, 'Personāls'),
    active: false
  }, {
    id: 'attachmentDataTab',
    head: gettextCatalog.getString('Pielikums', null, 'Personāls'),
    active: false
  }, {
    id: 'eksperti',
    head: gettextCatalog.getString('Eksperta tiesības', null, 'Personāls'),
    active: false
  }, {
    id: 'projectDataTab',
    head: gettextCatalog.getString('Projekti', null, 'Personāls'),
    active: false
  }, {
    id: 'sciResultsDataTab',
    head: gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Personāls'),
    active: false
  }]; // functions

  ctrl.formatDate = $rootScope.formatDate;
  ctrl.loadData = loadData;
  ctrl.saveScientific = saveScientific;
  ctrl.UploadService = UploadService;
  ctrl.resetScientific = resetScientific;
  ctrl.updatePrintTabTitle = updatePrintTabTitle;
  ctrl.searchPersonByPersonalCode = searchPersonByPersonalCode;
  ctrl.goToUserForm = goToUserForm;
  ctrl.processData = processData;
  ctrl.institutionTypes = null;
  ctrl.dateFormat = 'dd.MM.yyyy';
  ctrl.currentYear = new Date().getFullYear();
  ctrl.addEmptyJob = addEmptyJob;
  ctrl.setEditMode = setEditMode;
  ctrl.isLockable = isLockable;
  ctrl.hasQualNoBranches = hasQualNoBranches;
  ctrl.hasStudiesNoBranches = hasStudiesNoBranches;
  ctrl.addEmptyQualification = addEmptyQualification;
  ctrl.addEmptyStudies = addEmptyStudies;
  ctrl.addEmptyLZP = addEmptyLZP;
  ctrl.archivePerson = archivePerson;
  ctrl.canSave = canSave;
  ctrl.gotoState = gotoState;
  ctrl.refreshViisEduData = refreshViisEduData;
  ctrl.refreshScopusSciResData = refreshScopusSciResData;
  ctrl.refreshWosSciResData = refreshWosSciResData;
  ctrl.hasReqSciBranches = hasReqSciBranches;

  function hasReqSciBranches() {
    var hasReqBranches = true;

    if (ctrl.scientific) {
      if (ctrl.scientific.lzp_eksperts) {
        for (var x = 0; ctrl.scientific.lzp_eksperts.length > x; x++) {
          if (!ctrl.scientific.lzp_eksperts[x].apaksnozares || ctrl.scientific.lzp_eksperts[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }

      if (ctrl.scientific.kvalifikacija) {
        for (var x = 0; ctrl.scientific.kvalifikacija.length > x; x++) {
          if (!ctrl.scientific.kvalifikacija[x].apaksnozares || ctrl.scientific.kvalifikacija[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }
    }

    return hasReqBranches;
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ctrl.tabs.length > i; i++) {
        if (ctrl.tabs[i].active) {
          ctrl.currentTitle = ctrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function gotoState(s, dId, dT) {
    $state.go(s, {
      id: dId,
      type: dT
    });
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function canSave(perm) {
    if ($rootScope.currentUserRights.hasOwnProperty(perm) && $rootScope.currentUserRights[perm].indexOf('save') != -1 || $rootScope.u.context == 'priv' && ctrl.scientific && ctrl.scientific.auth && ctrl.scientific.auth.is_update_relevant) {
      return true;
    }

    return false;
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function hasQualNoBranches() {
    if (ctrl.scientific.kvalifikacija) {
      for (var i = 0; ctrl.scientific.kvalifikacija.length > i; i++) {
        if (!ctrl.scientific.kvalifikacija[i].apaksnozares || !ctrl.scientific.kvalifikacija[i].apaksnozares.length) return true;
      }
    }

    return false;
  }

  function hasStudiesNoBranches() {
    if (ctrl.scientific.esosas_studijas) {
      for (var i = 0; ctrl.scientific.esosas_studijas.length > i; i++) {
        if (!ctrl.scientific.esosas_studijas[i].apaksnozares || !ctrl.scientific.esosas_studijas[i].apaksnozares.length) return true;
      }
    }

    return false;
  }

  function init() {
    if ($state.current.group == "scientific_personal") {
      ctrl.reqSciWorkerId = true;
    }

    dataOp.getCodificator('countries').then(function (data) {
      ctrl.countries = data.data;
    });
    dataOp.getCodificator('pers_status').then(function (data) {
      ctrl.pers_status = data.data;
    });
    dataOp.getCodificator('akademiskais_amata_tips').then(function (data) {
      ctrl.akadWork = data.data;
    });
    dataOp.getCodificator('work_types').then(function (data) {
      ctrl.workTypes = data.data;
    });
    dataOp.getCodificator('komisija_id').then(function (data) {
      ctrl.komisijasVeids = data.data;
    });
    dataOp.getCodificator('zin_izglitibas_amata_tips').then(function (data) {
      ctrl.akadAmats = data.data;
    });
    dataOp.getCodificator('zinatniskais_amata_tips').then(function (data) {
      ctrl.akad_amats = data.data;
    });
    dataOp.getCodificator('qualification_types').then(function (data) {
      ctrl.qualificationTypes = data.data;
    });
    dataOp.getCodificator('contact_info_types').then(function (data) {
      ctrl.contactInfoTypes = data.data;
    });
    ctrl.scientificInstitutions = new Select2Data('choices', 'scientific_institutions');
    ctrl.aii_entries = new Select2Data('choices', 'aii_choice');
    ctrl.loadData();
  }

  function addEmptyJob(jobType) {
    var iestade = undefined;
    var choice = undefined;
    var context = dataOp.getContext();

    if (jobType == 'akad_darba_vieta') {
      choice = 'aii_choice';
    } else if (jobType == 'zin_darba_vieta') {
      choice = 'scientific_institutions';
    }

    if (context != -1) {
      dataOp.getChoices(choice, {
        id: context.id
      }).then(function (data) {
        if (data.data[0]) {
          iestade = {
            id: data.data[0].id,
            text: data.data[0].title
          };
        }

        ctrl.scientific[jobType].push({
          is_delete_relevant: true,
          is_update_relevant: true,
          slodze: [],
          apaksnozares: [],
          iestade_select_obj: iestade
        });
      });
    } else {
      ctrl.scientific[jobType].push({
        is_delete_relevant: true,
        is_update_relevant: true,
        slodze: [],
        apaksnozares: [],
        iestade_select_obj: iestade
      });
    }
  }

  function addEmptyQualification() {
    ctrl.scientific.kvalifikacija.push({
      apaksnozares: []
    });
  }

  function addEmptyStudies() {
    ctrl.scientific.esosas_studijas.push({
      apaksnozares: []
    });
  }

  function addEmptyLZP() {
    ctrl.scientific.lzp_eksperts.push({
      apaksnozares: []
    });
  }

  function resolveLZP() {
    if (ctrl.scientific.lzp_eksperts) {
      for (var i = 0; ctrl.scientific.lzp_eksperts.length > i; i++) {
        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no = new Date(ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no);
        }

        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz = new Date(ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz);
        }

        if (ctrl.scientific.lzp_eksperts[i].komisija_id) {
          ctrl.scientific.lzp_eksperts[i].komisija_id = ctrl.scientific.lzp_eksperts[i].komisija_id.toString();
        }

        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi = ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi.toString();
        }
      }
    } else {
      ctrl.scientific.lzp_eksperts = [];
    }
  }

  function resolveQualification() {
    if (ctrl.scientific.kvalifikacija) {
      for (var i = 0; ctrl.scientific.kvalifikacija.length > i; i++) {
        if (ctrl.scientific.kvalifikacija[i].iegusanas_datums) {
          ctrl.scientific.kvalifikacija[i].iegusanas_datums = new Date(ctrl.scientific.kvalifikacija[i].iegusanas_datums);
        }

        if (ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id) {
          ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id = ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id.toString();
        }

        if (ctrl.scientific.kvalifikacija[i].valsts_id) {
          ctrl.scientific.kvalifikacija[i].valsts_id = ctrl.scientific.kvalifikacija[i].valsts_id.toString();
        }

        if (ctrl.scientific.kvalifikacija[i].stude_no) {
          ctrl.scientific.kvalifikacija[i].stude_no = new Date(ctrl.scientific.kvalifikacija[i].stude_no);
        }

        if (ctrl.scientific.kvalifikacija[i].stude_lidz) {
          ctrl.scientific.kvalifikacija[i].stude_lidz = new Date(ctrl.scientific.kvalifikacija[i].stude_lidz);
        }
      }
    } else {
      ctrl.scientific.kvalifikacija = [];
    }
  }

  function resolveStudies() {
    if (ctrl.scientific.esosas_studijas) {
      for (var i = 0; ctrl.scientific.esosas_studijas.length > i; i++) {
        if (ctrl.scientific.esosas_studijas[i].valsts_id) {
          ctrl.scientific.esosas_studijas[i].valsts_id = ctrl.scientific.esosas_studijas[i].valsts_id.toString();
        }

        if (ctrl.scientific.esosas_studijas[i].stude_no) {
          ctrl.scientific.esosas_studijas[i].stude_no = new Date(ctrl.scientific.esosas_studijas[i].stude_no);
        }

        if (ctrl.scientific.esosas_studijas[i].stude_lidz) {
          ctrl.scientific.esosas_studijas[i].stude_lidz = new Date(ctrl.scientific.esosas_studijas[i].stude_lidz);
        }
      }
    } else {
      ctrl.scientific.esosas_studijas = [];
    }
  }

  function resolveAcademicWork() {
    if (ctrl.scientific.akad_darba_vieta) {
      for (var a = 0; ctrl.scientific.akad_darba_vieta.length > a; a++) {
        if (ctrl.scientific.akad_darba_vieta[a].zin_institucija_id) {
          ctrl.scientific.akad_darba_vieta[a].iestade_select_obj = {
            id: ctrl.scientific.akad_darba_vieta[a].zin_institucija_id,
            text: ctrl.scientific.akad_darba_vieta[a].zin_institucija_nosaukums
          };
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_veids_id) {
          ctrl.scientific.akad_darba_vieta[a].amata_veids_id = ctrl.scientific.akad_darba_vieta[a].amata_veids_id.toString();
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins) {
          ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins = new Date(ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins);
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums) {
          ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums = new Date(ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums);
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums) {
          ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums = new Date(ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums);
        }
      }
    } else {
      ctrl.scientific.akad_darba_vieta = [];
    }
  }

  function resolveSciWork() {
    if (ctrl.scientific.zin_darba_vieta) {
      for (var m = 0; ctrl.scientific.zin_darba_vieta.length > m; m++) {
        if (ctrl.scientific.zin_darba_vieta[m].zin_institucija_id) {
          ctrl.scientific.zin_darba_vieta[m].iestade_select_obj = {
            id: ctrl.scientific.zin_darba_vieta[m].zin_institucija_id,
            text: ctrl.scientific.zin_darba_vieta[m].zin_institucija_nosaukums
          };
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums) {
          ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums = new Date(ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums);
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins) {
          ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins = new Date(ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins);
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums) {
          ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums = new Date(ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums);
        }
      }
    } else {
      ctrl.scientific.zin_darba_vieta = [];
    }
  }

  function processData(data) {
    ctrl.scientific = data;

    if (data.pilsoniba_id) {
      data.pilsoniba_id = data.pilsoniba_id.toString();
    }

    if (data.statuss_valsti_id) {
      data.statuss_valsti_id = data.statuss_valsti_id.toString();
    }

    if (ctrl.scientific.dzimsanas_datums) {
      ctrl.scientific.dzimsanas_datums = new Date(ctrl.scientific.dzimsanas_datums);
    }

    if (ctrl.scientific.h2020_eksperts_datums_no) {
      ctrl.scientific.h2020_eksperts_datums_no = new Date(ctrl.scientific.h2020_eksperts_datums_no);
    }

    if (ctrl.scientific.h2020_eksperts_datums_lidz) {
      ctrl.scientific.h2020_eksperts_datums_lidz = new Date(ctrl.scientific.h2020_eksperts_datums_lidz);
    }

    if (ctrl.scientific.beigu_termins) {
      ctrl.scientific.beigu_termins = new Date(ctrl.scientific.beigu_termins);
    }

    ctrl.isArchived = !!ctrl.scientific.archiving_date;
    resolveQualification();
    resolveStudies();
    resolveAcademicWork();
    resolveSciWork();
    resolveLZP();

    if (ctrl.scientific.contacts) {
      angular.forEach(ctrl.scientific.contacts, function (cont) {
        cont.contacts.veids_id = cont.contacts.veids_id.toString();
      });
    } else {
      ctrl.scientific.contacts = [];
    }

    if (!ctrl.scientific.pielikumi) {
      ctrl.scientific.pielikumi = [];
    } else {
      angular.forEach(ctrl.scientific.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    $timeout(function () {
      ctrl.scientificOrigin = angular.copy(ctrl.scientific);
    });
  }

  function loadData() {
    var id = $rootScope.currentUser.person_id;

    if (id) {
      switch ($state.current.group) {
        case 'academic_personal':
          ctrl.title = gettextCatalog.getString('Akadēmiskā persona', null, 'Personāls');
          break;

        case 'scientific_personal':
          ctrl.title = gettextCatalog.getString('Zinātniskā persona', null, 'Personāls');
          break;

        case 'personal':
          ctrl.title = gettextCatalog.getString('Persona', null, 'Personāls');
          break;
      }

      dataOp.getDefaultById(id, 'lietotaja_personas_dati').then(function (data) {
        dataOp.listDefault('lietotaja_personas_dati_projekti', {
          personals_id: id
        }).then(function (pData) {
          data.projekti = pData;
          dataOp.listDefault('lietotaja_personas_dati_zin_rezultati', {
            personals_id: id
          }).then(function (srData) {
            data.sci_results = srData;
            ctrl.processData(data);
          });
        });
      });
    } else {
      ctrl.isNew = true;

      switch ($state.current.group) {
        case 'academic_personal':
          ctrl.title = gettextCatalog.getString('Pievienot akadēmisko personu', null, 'Personāls');
          break;

        case 'scientific_personal':
          ctrl.title = gettextCatalog.getString('Pievienot zinātnisko personu', null, 'Personāls');
          break;

        case 'personal':
          ctrl.title = gettextCatalog.getString('Pievienot personu', null, 'Personāls');
          break;
      }

      $scope.allowEdit = false;
      ctrl.scientific = {
        contacts: [],
        kvalifikacija: [],
        esosas_studijas: [],
        lzp_eksperts: [],
        akad_darba_vieta: [],
        zin_darba_vieta: [],
        pielikumi: [],
        apaksnozares: [],
        projekti: [],
        sci_results: []
      };

      for (var i = ctrl.tabs.length - 1; i >= 0; i--) {
        if ($state.current.group == ctrl.tabs[i].id) {
          ctrl.tabs[i].required = "true";

          switch ($state.current.group) {
            case 'scientific_personal':
              ctrl.addEmptyJob('zin_darba_vieta');
              break;

            case 'academic_personal':
              ctrl.addEmptyJob('akad_darba_vieta');
              break;
          }
        }
      }

      $timeout(function () {
        ctrl.scientificOrigin = angular.copy(ctrl.scientific);
      });
    }
  }

  function lockResolveSciWork() {
    if (ctrl.scientific.zin_darba_vieta) {
      for (var x = 0; ctrl.scientific.zin_darba_vieta.length > x; x++) {
        if (ctrl.scientific.zin_darba_vieta[x].iestade_select_obj && ctrl.scientific.zin_darba_vieta[x].iestade_select_obj.id) {
          ctrl.scientific.zin_darba_vieta[x].zin_institucija_id = ctrl.scientific.zin_darba_vieta[x].iestade_select_obj.id;
        }

        if (ctrl.scientific.zin_darba_vieta[x].slodze) {
          for (var k = 0; ctrl.scientific.zin_darba_vieta[x].slodze.length > k; k++) {
            if (ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h) {
              ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h = parseFloat(ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h);
            }

            if (ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple) {
              ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple = parseFloat(ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple);
            }
          }
        }
      }
    }
  }

  function lockResolveAcadWork() {
    if (ctrl.scientific.akad_darba_vieta) {
      for (var y = 0; ctrl.scientific.akad_darba_vieta.length > y; y++) {
        if (ctrl.scientific.akad_darba_vieta[y].iestade_select_obj && ctrl.scientific.akad_darba_vieta[y].iestade_select_obj.id) {
          ctrl.scientific.akad_darba_vieta[y].zin_institucija_id = ctrl.scientific.akad_darba_vieta[y].iestade_select_obj.id;
        }

        if (ctrl.scientific.akad_darba_vieta[y].slodze) {
          for (var z = 0; ctrl.scientific.akad_darba_vieta[y].slodze.length > z; z++) {
            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple);
            }
          }
        }
      }
    }
  }

  function saveScientific(lock) {
    if (!lock) {
      lockResolveSciWork();
      lockResolveAcadWork();
      angular.forEach(ctrl.scientific.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      dataOp.saveDefault(ctrl.scientific, 'lietotaja_personas_dati', true).then(function (data) {
        $rootScope.allowPrint = true;

        if (ctrl.scientific.id) {
          if (ctrl.scientific.id == $rootScope.currentUser.personalsId) {
            $rootScope.currentUser.vards = ctrl.scientific.personals_vards;
            $rootScope.currentUser.uzvards = ctrl.scientific.personals_uzvards;
          }

          ctrl.isNew = false;
          Notification.success(gettextCatalog.getString('Veiksmīgi labots zinātniskais darbinieks!'));
          ctrl.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots zinātniskais personāls!'));
          $state.go($rootScope.editUrl, {
            id: data.data.id
          });
        }

        $scope.allowEdit = true;
      }, $scope.handleErrorNew);
    }
  }

  function resetScientific() {
    $scope.allowEdit = true;
    ctrl.scientific = angular.copy(ctrl.scientificOrigin);
  }

  function goToUserForm(personsFound) {
    var goToParams = {};
    goToParams.id = personsFound.id;

    if ($stateParams.tab) {
      goToParams.tab = $stateParams.tab;
    }

    if ($state.current.name.indexOf(".new") > -1) {
      ctrl.personFormState = $state.current.name.replace(".new", ".edit");
    } else {
      ctrl.personFormState = $state.current.name;
    }

    if (personsFound) {
      $state.go(ctrl.personFormState, goToParams);
    }
  }

  function searchPersonByPersonalCode(code) {
    var idArr = [];

    if (ctrl.scientificOrigin && ctrl.scientificOrigin.id) {
      idArr.push(ctrl.scientificOrigin.id.toString());
    }

    SearchPerson.search(code, idArr, ctrl.goToUserForm).then(function (data) {
      ctrl.personsFound = data;
    });
  }

  function archivePerson() {
    ctrl.scientific.ir_arhivets = ctrl.isArchived;
    dataOp.ArchiveData('personals', ctrl.scientific).then(function (data) {
      $rootScope.allowPrint = true;
      ctrl.isArchived = !!ctrl.scientific.archiving_date;

      if (ctrl.isArchived) {
        Notification.success(gettextCatalog.getString('Persona veiksmīgi arhivēta!', null, 'Personāls'));
      } else {
        Notification.success(gettextCatalog.getString('Persona veiksmīgi izņemta no arhīva!', null, 'Personāls'));
      }

      $state.go('app.personal.list');
    }, $scope.handleErrorNew);
  }

  function refreshViisEduData() {
    if (ctrl.scientific.personals_personas_kods && ctrl.scientific.personals_personas_kods.length > 0) {
      dataOp.getViisEduData(ctrl.scientific.personals_personas_kods).then(function () {
        Notification.success("VIIS dati veiksmīgi pārnesti uz sistēmu");
        ctrl.loadData();
      }, $scope.handleErrorNew);
    }
  }

  function refreshScopusSciResData() {
    if (ctrl.scientific.orcid && ctrl.scientific.orcid.length > 0 || ctrl.scientific.scopus.length > 0) {
      dataOp.getScopusData(null, null, ctrl.scientific.id).then(function () {
        Notification.success("Scopus dati veiksmīgi pārnesti uz sistēmu");
        $state.reload();
      }, $scope.handleErrorNew);
    }
  }

  function refreshWosSciResData() {
    if (ctrl.scientific.orcid && ctrl.scientific.orcid.length > 0 || ctrl.scientific.wos_researcher_nr && ctrl.scientific.wos_researcher_nr.length > 0 || ctrl.scientific.wos.length > 0) {
      dataOp.getWosData(null, null, ctrl.scientific.id).then(function () {
        Notification.success("WoS dati veiksmīgi pārnesti uz sistēmu");
        $state.reload();
      }, $scope.handleErrorNew);
    }
  }

  init();
}]);
/**
 * @name notification_catalog_form
 * @description "Paziņojumu katalogs" forma
 * @param  {string} url /data/pazinojums_{id}/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('NotificationsEditController', ['UploadService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$rootScope', function (UploadService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $rootScope) {
  var ntf = this;
  $scope.allowEdit = true;
  ntf.notification = {};
  ntf.notificationOrigin = {};
  ntf.setEditMode = setEditMode; // tabs

  ntf.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Paziņojumi'),
    active: true
  }]; // functions

  ntf.loadData = loadData;
  ntf.saveNotification = saveNotification;
  ntf.updatePrintTabTitle = updatePrintTabTitle;
  ntf.resetNotification = resetNotification;
  ntf.processData = processData;
  ntf.setEditMode = setEditMode;

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ntf.tabs.length > i; i++) {
        if (ntf.tabs[i].active) {
          ntf.currentTitle = ntf.tabs[i].head;
          break;
        }
      }
    });
  }

  function init() {
    loadData(); //console.log('Data ok');
  }

  function processData(data) {
    ntf.notification = data;
    $timeout(function () {
      ntf.notificationOrigin = angular.copy(ntf.notification);
    });
  }

  function loadData() {
    ntf.title = gettextCatalog.getString('Paziņojums', null, 'Paziņojumi');

    if ($stateParams.id) {
      dataOp.getDefaultById($stateParams.id, 'pazinojums_' + $stateParams.id).then(function (data) {
        ntf.processData(data);
      });
    }
  }

  function saveNotification(lock) {
    if (!lock) {
      dataOp.saveNotificationById(ntf.notification).then(function (data) {
        $rootScope.allowPrint = true;
        Notification.success(gettextCatalog.getString('Veiksmīgi labots paziņojums!', null, 'Paziņojumi'));
        ntf.processData(data.data);
        $state.go('app.home', {}, {
          reload: true
        });
      }, $scope.handleError);
    }
  }

  function resetNotification() {
    $scope.allowEdit = true;
    ntf.notification = angular.copy(ntf.notificationOrigin);
  }

  init();
}]);
/**
 * @name personal
 * @description Saraksts "Zinātniskās darbības rezultātu autori"
 * @param  {string} url /data/autori_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('AuthorsController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', '$q', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope, $q, $filter, dataOp) {
  var pc = this;
  pc.author = null;
  pc.allowEdit = false;
  pc.title = 'Zinātniskās darbības rezultātu autori';
  pc.openSciRes = openSciRes;

  function openSciRes(row) {
    if (typeof row.id !== 'undefined') {
      $state.go('app.scientific_action_results.edit', {
        id: row.zin_rezultats_id,
        type: row.zin_rez_veids
      });
    }
  }

  pc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Personāls'),
      key: "autora_vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Personāls'),
      key: "autora_uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskās darbības rezultāta nosaukums", null, 'Personāls'),
      key: "zin_rez_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Veids", null, 'Personāls'),
      key: "zin_rez_veids_nos",
      sortable: "true"
    }],
    default_sort_col: 'autora_uzvards',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: pc.openSciRes,
    "delete": false,
    bulkDelete: false,
    bulkArchive: false,
    catalog_name: gettextCatalog.getString('Zinātniskās darbības rezultātu autori', null, 'Personāls'),
    "export": false
  };
}]);
/**
 * @name personal
 * @description Saraksts "Personāls"
 * @param  {string} url /data/personals_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('PersonalController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', '$q', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope, $q, $filter, dataOp) {
  var pc = this;
  pc.person = null;
  pc.allowEdit = false;
  pc.collapsePhoneData = true;
  pc.title = 'Personāla katalogs';
  pc.openPerson = openPerson;
  pc.archivePersonal = archivePersonal;
  pc.openAuthorsList = openAuthorsList; // panel collapse initialization

  pc.collapseMainData = true; // function initialization

  pc.openPerson = openPerson;
  pc.deletePersonal = deletePersonal;

  function deletePersonal(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("zin_personals_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts personāls!', null, 'Personāls'));
      return true;
    }, $scope.handleError);
  }

  function archivePersonal(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('personals', {
              id: key,
              archiving_date: $filter('date')(new Date(Date.now()), "yyyy-MM-dd")
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Personāls veiksmīgi arhivēts!', null, 'Personāls'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!!'));
        }

        $state.reload();
      });
    });
  }

  function openPerson(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.personal.edit', {
        id: row.id
      });
    } else {
      $state.go('app.personal.new');
    }
  }

  function openAuthorsList(row) {
    $state.go('app.authors.list');
  }

  pc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Personāls'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Personāls'),
      key: "uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ir arī zinātniskais darbinieks", null, 'Personāls'),
      key: "ir_ari_zinatniskais_personals",
      trueFalseVal: true,
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ir arī akadēmiskais personāls:", null, 'Personāls'),
      key: "ir_ari_akademiskais_personals",
      trueFalseVal: true,
      sortable: "true"
    }],
    default_sort_col: 'uzvards',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: pc.openPerson,
    archive_function: pc.archivePersonal,
    open_authors_list_function: pc.openAuthorsList,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    archivePermission: 'personals_list',
    delete_function: pc.deletePersonal,
    catalog_name: gettextCatalog.getString('Personāls', null, 'Personāls'),
    create_function: pc.openPerson,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('personals_list') && $rootScope.currentUserRights['personals_list'].indexOf('archive_view') != -1) {
    pc.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Personāls'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name project_catalog_form
 * @description "Projektu katalogs" forma
 * @param  {string} url /data/projekts/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ProjectCatalogEditController', ['UploadService', 'Select2Data', 'SearchPerson', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$rootScope', function (UploadService, Select2Data, SearchPerson, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $filter, $http, $rootScope) {
  var pce = this;
  $scope.allowEdit = true;
  pce.project = {
    projekta_darbinieki: [],
    projekta_institucijas: [],
    instituciju_finansejums: [],
    pielikumi: [],
    apaksnozares: [],
    atbildigie: [],
    petniecibas_kategorijas: [],
    projekta_nr: [{
      projekta_nr: null
    }]
  };
  pce.projectOrigin = null;
  pce.projectTypes = null;
  pce.researchWorkTypes = null;
  pce.projectStatuses = null;
  pce.viedaSpecializacija = null;
  pce.projectManagers = null;
  pce.UploadService = UploadService;
  pce.institutionTypes = null;
  pce.scientificInstitutions = null;
  pce.isArchived = false;
  pce.isNew = false;
  pce.personsFound = null;
  pce.dateFormat = 'dd.MM.yyyy';
  pce.formatDate = $rootScope.formatDate;
  pce.loadUserData = loadUserData;
  pce.searchPersonByPersonalCode = searchPersonByPersonalCode;
  pce.searchStaffByPersonalCode = searchStaffByPersonalCode;
  pce.loadStaffData = loadStaffData;
  pce.resetStaffData = resetStaffData;
  pce.discardUserData = discardUserData;
  pce.loadPersonData = loadPersonData;
  pce.resetPersonData = resetPersonData;
  pce.setEditMode = setEditMode;
  pce.archiveProject = archiveProject;
  pce.isLockable = isLockable;
  pce.hasReqSciBranches = hasReqSciBranches;
  pce.hasReqPetniecibasKategorijas = hasReqPetniecibasKategorijas;
  pce.gotoState = gotoState;
  pce.onUpdateAdminEmail = onUpdateAdminEmail;
  pce.formats = ['dd.MM.yyyy'];
  pce.format = pce.formats[0];
  pce.swapWithPreviousInstitution = swapWithPreviousInstitution;
  pce.swapWithNextInstitution = swapWithNextInstitution;
  pce.addInstitution = addInstitution;
  pce.removeInstitution = removeInstitution;
  pce.hasCtxInstitution = hasCtxInstitution;
  pce.addPif = addPif;
  pce.checkPifInstitutions = checkPifInstitutions;
  pce.updatePifInstitutionList = updatePifInstitutionList; // tabs

  pce.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Projekti'),
    active: true
  }, {
    id: 'workersDataTab',
    head: gettextCatalog.getString('Projekta darbinieki', null, 'Projekti'),
    active: false
  }, {
    id: 'finanseDataTab',
    head: gettextCatalog.getString('Finansējums', null, 'Projekti'),
    active: false
  }, {
    id: 'atachmentTab',
    head: gettextCatalog.getString('Pielikums', null, 'Projekti'),
    active: false
  }, {
    id: 'documentationDataTab',
    head: gettextCatalog.getString('Projekta īstenošanas dokumentācija', null, 'Projekti'),
    active: false
  }, {
    id: 'adminDataTab',
    head: gettextCatalog.getString('Kontaktpersonas/administratori', null, 'Projekti'),
    active: false
  }]; // functions

  pce.loadData = loadData;
  pce.saveProject = saveProject;
  pce.updatePrintTabTitle = updatePrintTabTitle;
  pce.resetProject = resetProject;
  pce.processData = processData;
  pce.showProjectManagerData = showProjectManagerData;
  pce.showPersonData = showPersonData;
  pce.canUpd = canUpd;
  pce.canSave = canSave;
  pce.projectTypeChange = projectTypeChange;

  function swapWithPreviousInstitution(idx) {
    if (idx > 0) {
      var o = pce.project.projekta_institucijas[idx];
      pce.project.projekta_institucijas[idx] = pce.project.projekta_institucijas[idx - 1];
      pce.project.projekta_institucijass[idx - 1] = o;
    }
  }

  function swapWithNextInstitution(idx) {
    if (idx < pce.project.projekta_institucijas.length - 1) {
      var o = pce.project.projekta_institucijas[idx];
      pce.project.projekta_institucijas[idx] = pce.project.projekta_institucijas[idx + 1];
      pce.project.projekta_institucijas[idx + 1] = o;
    }
  }

  function addInstitution() {
    pce.project.projekta_institucijas.push({
      sci_institution_select_obj: {
        id: null,
        text: ' '
      }
    });
  }

  function removeInstitution(i) {
    pce.project.projekta_institucijas.splice(i, 1);
  }

  function hasCtxInstitution() {
    var hasCtxInst = false;

    if (pce.project.projekta_institucijas && pce.project.projekta_institucijas.length) {
      for (var i = 0; pce.project.projekta_institucijas.length > i; i++) {
        if (pce.project.projekta_institucijas[i].ir_ctx_institucija) {
          hasCtxInst = true;
        }
      }
    }

    return hasCtxInst;
  }

  function addPif() {
    pce.project.instituciju_finansejums.push({
      kopejais_finansejums: [],
      inst_ref_ok: true
    });
  }

  function updatePifInstitutionList() {
    pce.pifInstitutionDataWrapper.data = [];

    for (var j = 0; pce.project.projekta_institucijas.length > j; j++) {
      if (pce.project.projekta_institucijas[j].sci_institution_select_obj.id) {
        var d = {
          id: pce.project.projekta_institucijas[j].sci_institution_select_obj.id,
          text: pce.project.projekta_institucijas[j].sci_institution_select_obj.text
        };
        pce.pifInstitutionDataWrapper.data.push(d);
      }
    }
  }

  function checkPifInstitutions() {
    pce.project.pif_inst_refs_ok = true;

    for (var i = 0; pce.project.instituciju_finansejums.length > i; i++) {
      pce.project.instituciju_finansejums[i].inst_ref_ok = false;

      if (!pce.project.instituciju_finansejums[i].sci_institution_select_obj) {
        pce.project.instituciju_finansejums[i].inst_ref_ok = true;
      } else {
        if (pce.project.instituciju_finansejums[i].sci_institution_select_obj.id) {
          for (var j = 0; pce.project.projekta_institucijas.length > j; j++) {
            if (pce.project.projekta_institucijas[j].sci_institution_select_obj.id) {
              if (pce.project.instituciju_finansejums[i].sci_institution_select_obj.id == pce.project.projekta_institucijas[j].sci_institution_select_obj.id) {
                pce.project.instituciju_finansejums[i].inst_ref_ok = true;
              }
            }
          }
        } else {
          pce.project.instituciju_finansejums[i].inst_ref_ok = true;
        }
      }

      if (!pce.project.instituciju_finansejums[i].inst_ref_ok) {
        pce.project.pif_inst_refs_ok = false;
      }
    }
  }

  function projectTypeChange() {
    var pcId = null;

    if (pce.project.projekta_veids_id) {
      for (var x = 0; pce.projectTypes.length > x; x++) {
        if (pce.projectTypes[x].parent_id && pce.projectTypes[x].id.toString() == pce.project.projekta_veids_id.toString()) {
          pcId = pce.projectTypes[x].parent_id;
        }
      }
    }

    if (pcId) {
      pce.project.projekta_kategorija_id = pcId.toString();
    } else {
      pce.project.projekta_kategorija_id = null;
    }
  }

  function canUpd() {
    return pce.canSave('projekts_pamatdati') || pce.canSave('projekts_papildinfo_1') || pce.canSave('projekts_papildinfo_2') || pce.canSave('projekts_anotacija') || pce.canSave('projekts_partneri') || pce.canSave('projekts_darbinieki') || pce.canSave('projekts_finansejums') || pce.canSave('projekts_finansejums_gadi') || pce.canSave('projekts_atb') || pce.canSave('projekts_piel');
  }

  function canSave(perm) {
    if ($rootScope.currentUserRights.hasOwnProperty(perm) && $rootScope.currentUserRights[perm].indexOf('save') != -1) {
      return true;
    }

    return false;
  }

  function showProjectManagerData() {
    $state.go('app.personal.edit', {
      id: pce.project.projekta_vaditaja_id
    });
  }

  function showPersonData(pId) {
    $state.go('app.personal.edit', {
      id: pId
    });
  }

  function hasReqSciBranches() {
    var hasReqBranches = true;

    if (pce.project && (!pce.project.apaksnozares || pce.project.apaksnozares.length <= 0)) {
      hasReqBranches = false;
    }

    return hasReqBranches;
  }

  function hasReqPetniecibasKategorijas() {
    var hasReqPks = true;

    if (pce.project && (!pce.project.petniecibas_kategorijas || pce.project.petniecibas_kategorijas.length <= 0)) {
      hasReqPks = false;
    }

    return hasReqPks;
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; pce.tabs.length > i; i++) {
        if (pce.tabs[i].active) {
          pce.currentTitle = pce.tabs[i].head;
          break;
        }
      }
    });
  }

  function gotoState(s, dId) {
    $state.go(s, {
      id: dId
    });
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function init() {
    dataOp.getCodificator('project_category').then(function (data) {
      pce.projectCategory = data.data;
    });
    dataOp.getCodificator('project_types').then(function (data) {
      pce.projectTypes = data.data;
    });
    dataOp.getCodificator('project_statuses').then(function (data) {
      pce.projectStatuses = data.data;
    });
    dataOp.getCodificator('vieda_specializacija').then(function (data) {
      pce.viedaSpecializacija = data.data;
    });
    dataOp.getCodificator('institution_types').then(function (data) {
      pce.institutionTypes = data.data;
    });
    pce.scientificInstitutions = new Select2Data('choices', 'scientific_institutions');
    pce.researchWorkTypes = new Select2Data('codificator', 'research_work_types');
    pce.uzraudzibas_komisija = new Select2Data('choices', 'supervisory_boards');
    pce.pifInstitutionDataWrapper = {
      data: []
    };
    pce.scientificInstitutions2 = new Select2Data('array', null, pce.pifInstitutionDataWrapper);
    loadData();
  }

  function processData(data) {
    if (data.projekta_kategorija_id) {
      data.projekta_kategorija_id = data.projekta_kategorija_id.toString();
    }

    if (data.projekta_veids_id) {
      data.projekta_veids_id = data.projekta_veids_id.toString();
    }

    if (data.statuss_id) {
      data.statuss_id = data.statuss_id.toString();
    }

    if (data.petniecibas_darbibas_raksturs_id) {
      data.petniecibas_darbibas_raksturs_id = data.petniecibas_darbibas_raksturs_id.toString();
    }

    if (data.projekta_vaditaja_id) {
      data.projekta_vaditaja_id = data.projekta_vaditaja_id.toString();
    }

    if (data.izveides_datums) {
      data.izveides_datums = new Date(data.izveides_datums);
    }

    if (data.realizacijas_termins_lidz) {
      data.realizacijas_termins_lidz = new Date(data.realizacijas_termins_lidz);
    }

    if (data.realizacijas_termins_no) {
      data.realizacijas_termins_no = new Date(data.realizacijas_termins_no);
    }

    if (data.uzraudzibas_komisija_id) {
      data.uzraudzibas_komisija_select_obj = {
        id: data.uzraudzibas_komisija_id,
        text: data.uzraudzibas_komisija
      };
    }

    if (data.petniecibas_darbibas_raksturs_id) {
      data.research_work_type_select_obj = {
        id: data.petniecibas_darbibas_raksturs_id,
        text: data.petniecibas_darbibas_raksturs
      };
    }

    if (data.archiving_date) {
      pce.isArchived = true;
    }

    var context = dataOp.getContext();

    if (data.projekta_institucijas && data.projekta_institucijas.length) {
      for (var i = 0; data.projekta_institucijas.length > i; i++) {
        if (data.projekta_institucijas[i].zin_institucija_id) {
          data.projekta_institucijas[i].sci_institution_select_obj = {
            id: data.projekta_institucijas[i].zin_institucija_id,
            text: data.projekta_institucijas[i].zin_institucija_nosaukums
          };

          if (context != -1 && data.projekta_institucijas[i].zin_institucija_id == context.id) {
            data.projekta_institucijas[i].ir_ctx_institucija = true;
          }
        } else {
          data.projekta_institucijas[i].sci_institution_select_obj = {
            id: null,
            text: data.projekta_institucijas[i].zin_institucija_cits ? data.projekta_institucijas[i].zin_institucija_cits : ' '
          };
        }
      }
    } else {
      data.projekta_institucijas = [];
    }

    if (data.instituciju_finansejums && data.instituciju_finansejums.length) {
      for (var i = 0; data.instituciju_finansejums.length > i; i++) {
        if (data.instituciju_finansejums[i].zin_institucija_id) {
          data.instituciju_finansejums[i].sci_institution_select_obj = {
            id: data.instituciju_finansejums[i].zin_institucija_id,
            text: data.instituciju_finansejums[i].zin_institucija_nosaukums
          };

          if (context != -1 && data.instituciju_finansejums[i].zin_institucija_id == context.id) {
            data.instituciju_finansejums[i].ir_ctx_institucija = true;
          }
        }
      }
    } else {
      data.instituciju_finansejums = [];
    }

    if (data.projekta_posms) {
      for (var i = 0; data.projekta_posms.length > i; i++) {
        if (data.projekta_posms[i].kartas_nr) {
          data.projekta_posms[i].kartas_nr = parseInt(data.projekta_posms[i].kartas_nr);
        }

        if (data.projekta_posms[i].beigu_termins) {
          data.projekta_posms[i].beigu_termins = new Date(data.projekta_posms[i].beigu_termins);
        }
      }
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    if (data.projekta_darbinieki) {
      for (var x = 0; data.projekta_darbinieki.length > x; x++) {
        if (typeof data.projekta_darbinieki[x].ir_pensionars == "undefined") {
          data.projekta_darbinieki[x].ir_pensionars = false;
        }

        if (data.projekta_darbinieki[x].zin_personals_id) {
          data.projekta_darbinieki[x].zin_personals_id = data.projekta_darbinieki[x].zin_personals_id.toString();
        }

        if (data.projekta_darbinieki[x].personals_id) {
          data.projekta_darbinieki[x].personals_id = data.projekta_darbinieki[x].personals_id.toString();
        }

        if (data.projekta_darbinieki[x].zin_institucija_id) {
          data.projekta_darbinieki[x].zin_institucija_id = data.projekta_darbinieki[x].zin_institucija_id.toString();
        }

        if (data.projekta_darbinieki[x].datums_no) {
          data.projekta_darbinieki[x].datums_no = new Date(data.projekta_darbinieki[x].datums_no);
        }

        if (data.projekta_darbinieki[x].datums_lidz) {
          data.projekta_darbinieki[x].datums_lidz = new Date(data.projekta_darbinieki[x].datums_lidz);
        }
      }
    } else {
      data.projekta_darbinieki = [];
    }

    pce.project = data;
    pce.checkPifInstitutions();
    pce.updatePifInstitutionList();
    $timeout(function () {
      pce.projectOrigin = angular.copy(pce.project);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      pce.title = gettextCatalog.getString('Projekts', null, 'Projekti');
      dataOp.getDefaultById($stateParams.id, 'projekts_plus').then(function (data) {
        pce.processData(data);
      });
    } else {
      pce.isNew = true;
      pce.title = gettextCatalog.getString('Pievienot projektu', null, 'Projekti');
      $scope.allowEdit = false;
      pce.project = {
        projekta_darbinieki: [],
        projekta_institucijas: [],
        instituciju_finansejums: [],
        pielikumi: [],
        apaksnozares: [],
        atbildigie: [],
        petniecibas_kategorijas: [],
        projekta_nr: [{
          projekta_nr: null
        }]
      };
      var context = dataOp.getContext();

      if (context != -1) {
        dataOp.getChoices('scientific_institutions', {
          id: context.id
        }).then(function (data) {
          if (data.data[0]) {
            var d = {};
            d.sci_institution_select_obj = {
              id: data.data[0].id,
              text: data.data[0].title
            };
            d.ir_ctx_institucija = true;
            pce.project.projekta_institucijas.push(d);
            var d2 = {};
            d2.sci_institution_select_obj = {
              id: data.data[0].id,
              text: data.data[0].title
            };
            d2.kopejais_finansejums = [];
            d2.ir_ctx_institucija = true;
            pce.project.instituciju_finansejums.push(d2);
            pce.checkPifInstitutions();
            pce.updatePifInstitutionList();
          }
        });
      } else {
        var d = {};
        pce.project.projekta_institucijas.push(d);
      }
    }
  }

  function saveProject(lock) {
    if (!lock) {
      if (pce.project.uzraudzibas_komisija_select_obj) {
        pce.project.uzraudzibas_komisija_id = pce.project.uzraudzibas_komisija_select_obj.id;
      }

      if (pce.project.research_work_type_select_obj) {
        pce.project.petniecibas_darbibas_raksturs_id = pce.project.research_work_type_select_obj.id;
      }

      if (pce.project.kopejais_finansejums_ar_pvn) {
        pce.project.kopejais_finansejums_ar_pvn = parseFloat(pce.project.kopejais_finansejums_ar_pvn);
      }

      if (pce.project.nacionalais_finansejums_kopejais) {
        pce.project.nacionalais_finansejums_kopejais = parseFloat(pce.project.nacionalais_finansejums_kopejais);
      }

      if (pce.project.piesaist_finansejums_no_arvalstu_fin_instr) {
        pce.project.piesaist_finansejums_no_arvalstu_fin_instr = parseFloat(pce.project.piesaist_finansejums_no_arvalstu_fin_instr);
      }

      if (pce.project.piesaist_finansejums_no_pasvaldibam) {
        pce.project.piesaist_finansejums_no_pasvaldibam = parseFloat(pce.project.piesaist_finansejums_no_pasvaldibam);
      }

      if (pce.project.projekta_institucijas && pce.project.projekta_institucijas.length) {
        for (var i = 0; pce.project.projekta_institucijas.length > i; i++) {
          var data = pce.project.projekta_institucijas[i];

          if (data.sci_institution_select_obj) {
            if (data.sci_institution_select_obj.id) {
              data.zin_institucija_id = data.sci_institution_select_obj.id;
              data.zin_institucija_cits = null;
            } else {
              data.zin_institucija_id = null;
              data.zin_institucija_cits = data.sci_institution_select_obj.text;
            }
          }

          data.seciba = i + 1;
        }
      }

      if (pce.project.instituciju_finansejums && pce.project.instituciju_finansejums.length) {
        for (var i = 0; pce.project.instituciju_finansejums.length > i; i++) {
          var data = pce.project.instituciju_finansejums[i];

          if (data.sci_institution_select_obj) {
            if (data.sci_institution_select_obj.id) {
              data.zin_institucija_id = data.sci_institution_select_obj.id;
            }
          }

          if (data.kopejais_finansejums) {
            for (x = 0; data.kopejais_finansejums.length > x; x++) {
              if (data.kopejais_finansejums[x].nacionalais_finansejums) {
                data.kopejais_finansejums[x].nacionalais_finansejums = parseFloat(data.kopejais_finansejums[x].nacionalais_finansejums);
              }

              if (data.kopejais_finansejums[x].piesaist_finansejums_no_arvalstu_fin_instr) {
                data.kopejais_finansejums[x].piesaist_finansejums_no_arvalstu_fin_instr = parseFloat(data.kopejais_finansejums[x].piesaist_finansejums_no_arvalstu_fin_instr);
              }

              if (data.kopejais_finansejums[x].piesaist_finansejums_no_pasvaldibam) {
                data.kopejais_finansejums[x].piesaist_finansejums_no_pasvaldibam = parseFloat(data.kopejais_finansejums[x].piesaist_finansejums_no_pasvaldibam);
              }

              if (data.kopejais_finansejums[x].privatais_finansejums) {
                data.kopejais_finansejums[x].privatais_finansejums = parseFloat(data.kopejais_finansejums[x].privatais_finansejums);
              }
            }
          }
        }
      }

      if (pce.project.projekta_darbinieki) {
        for (var x = 0; pce.project.projekta_darbinieki.length > x; x++) {
          if (pce.project.projekta_darbinieki[x].slodze_nakama_posma) {
            pce.project.projekta_darbinieki[x].slodze_nakama_posma = parseFloat(pce.project.projekta_darbinieki[x].slodze_nakama_posma);
          }
        }
      }

      if (pce.project.viedas_specializacijas_joma_id) {
        pce.project.viedas_specializacijas_joma_id = pce.project.viedas_specializacijas_joma_id.toString();
      }

      angular.forEach(pce.project.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      dataOp.saveDefault(pce.project, 'projekts', true).then(function (data) {
        $rootScope.allowPrint = true;

        if (pce.project.manager_archiving_date) {
          dataOp.ArchiveData('personals', {
            id: pce.project.projekta_vaditaja_id
          });
        }

        pce.processData(data.data);

        if ($stateParams.id) {
          pce.isNew = false;
          Notification.success(gettextCatalog.getString('Veiksmīgi labots projekts!', null, 'Projekti'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots projekts!', null, 'Projekti'));
          $state.go('app.project_catalog.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleErrorNew);
    }
  }

  function resetProject() {
    $scope.allowEdit = true;
    pce.project = angular.copy(pce.projectOrigin);
  }

  function loadUserData(personsFound) {
    for (var i = 0; pce.project.projekta_darbinieki.length > i; i++) {
      if (pce.project.projekta_darbinieki[i].personas_kods == personsFound.personas_kods) {
        pce.project.projekta_darbinieki[i].vards = personsFound.vards;
        pce.project.projekta_darbinieki[i].uzvards = personsFound.uzvards;
        pce.project.projekta_darbinieki[i].personals_id = personsFound.id.toString();
        break;
      }
    }
  }

  function discardUserData(personsFound) {
    var duplicate = false;

    for (var i = 0; pce.project.projekta_darbinieki.length > i; i++) {
      if (pce.project.projekta_darbinieki[i].personas_kods == personsFound.personas_kods) {
        if (duplicate) {
          pce.project.projekta_darbinieki.splice(i, 1);
          pce.project.projekta_darbinieki.push({});
          break;
        } else {
          duplicate = true;
        }
      }
    }
  }

  function searchPersonByPersonalCode(code, isStaff) {
    var userIds = [];
    var showDialog = false;

    if (isStaff !== true) {
      isStaff = false;
    }

    if (isStaff) {
      for (var key in pce.project.projekta_darbinieki) {
        if (pce.project.projekta_darbinieki[key].personals_id) {
          userIds.push(pce.project.projekta_darbinieki[key].personals_id);
        }

        if (pce.project.projekta_darbinieki[key].personas_kods == code) {
          delete pce.project.projekta_darbinieki[key].personals_id;
        }
      }

      SearchPerson.search(code, userIds, pce.loadUserData, pce.discardUserData, showDialog).then(function (data) {});
    } else {
      SearchPerson.search(code, userIds, pce.loadPersonData, pce.resetPersonData, false).then(function (data) {
        if (pce.project.projekta_vaditaja_id !== null && (data === null || typeof data === 'undefined')) {
          pce.project.projekta_vaditaja_id = null;
          pce.project.projekta_vaditaja_vards = null;
          pce.project.projekta_vaditaja_uzvards = null;
          pce.project.manager_archiving_date = null;
        }
      });
    }
  }

  function loadPersonData(data) {
    if (data !== null && typeof data !== 'undefined') {
      pce.project.projekta_vaditaja_id = data.id.toString();
      pce.project.projekta_vaditaja_vards = data.vards;
      pce.project.projekta_vaditaja_uzvards = data.uzvards;
      pce.project.manager_archiving_date = data.archiving_date;
    }
  }

  function resetPersonData(data) {
    pce.project.projekta_vaditaja_id = null;
    pce.project.projekta_vaditaja_vards = null;
    pce.project.projekta_vaditaja_uzvards = null;
  }

  function searchStaffByPersonalCode(code, index) {
    var userIds = [];
    var showDialog = false;

    for (var key in pce.project.projekta_darbinieki) {
      if (pce.project.projekta_darbinieki[key].personals_id) {
        userIds.push(pce.project.projekta_darbinieki[key].personals_id);
      }

      if (pce.project.projekta_darbinieki[key].personas_kods == code) {
        delete pce.project.projekta_darbinieki[key].personals_id;
      }
    }

    SearchPerson.search(code, userIds, pce.loadStaffData, pce.resetStaffData, showDialog, index).then(function (data) {
      if (pce.project.projekta_darbinieki[index].personas_kods.length < 11 && pce.project.projekta_darbinieki[index].personals_id !== null && (data === null || typeof data === 'undefined')) {
        pce.project.projekta_darbinieki[index].personals_id = null;
        pce.project.projekta_darbinieki[index].vards = null;
        pce.project.projekta_darbinieki[index].uzvards = null;
        pce.project.projekta_darbinieki[index].archiving_date = null;
      }
    });
  }

  function loadStaffData(data, index) {
    if (data !== null && typeof data !== 'undefined') {
      pce.project.projekta_darbinieki[index].personals_id = data.id.toString();
      pce.project.projekta_darbinieki[index].vards = data.vards;
      pce.project.projekta_darbinieki[index].uzvards = data.uzvards;
      pce.project.projekta_darbinieki[index].archiving_date = data.archiving_date;
    }
  }

  function resetStaffData(data, index) {
    pce.project.projekta_darbinieki[index].personals_id = null;
    pce.project.projekta_darbinieki[index].vards = null;
    pce.project.projekta_darbinieki[index].uzvards = null;
  }

  function archiveProject() {
    pce.project.ir_arhivets = pce.isArchived;
    dataOp.ArchiveData('projekts', pce.project).then(function (data) {
      $rootScope.allowPrint = true;

      if (data.status == 200) {
        pce.isArchived = !pce.isArchived;

        if (pce.isArchived) {
          Notification.success(gettextCatalog.getString('Projekts veiksmīgi arhivēts!', null, 'Projekti'));
        } else {
          Notification.success(gettextCatalog.getString('Projekts veiksmīgi izņemts no arhīva!', null, 'Projekti'));
        }

        $state.reload();
      } else {
        Notification.error(gettextCatalog.getString('Projekta arhivēšanas kļūda!', null, 'Projekti'));
      }
    });
  }

  function onUpdateAdminEmail(data) {
    data.lietotaja_info = null;
    data.ir_pieejas_tiesibas = null;

    if (data.kontaktinfo && data.kontaktinfo != null) {
      var reqUrl = 'data/projekts_admin_dati?epasts=' + data.kontaktinfo;

      if (pce.project.sci_institution_select_obj && pce.project.sci_institution_select_obj.id) {
        reqUrl = reqUrl + '&institucija_id=' + pce.project.sci_institution_select_obj.id;
      }

      var req = {
        method: 'GET',
        url: reqUrl,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      $http(req).then(function (response) {
        if (response.data) {
          for (var i = 0; response.data.length > i; i++) {
            data.lietotaja_info = response.data[i].lietotaja_info;
            data.ir_pieejas_tiesibas = response.data[i].ir_pieejas_tiesibas;
          }
        }
      });
    }
  }

  init();
}]);
/**
 * @name project_catalog
 * @description Saraksts "Projektu katalogs"
 * @param  {string} url /data/projekts_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ProjectCatalogController', ['ngDialog', '$scope', 'gettextCatalog', '$state', '$stateParams', 'Notification', 'Restangular', '$rootScope', '$filter', '$q', 'dataService', '$window', 'authService', function (ngDialog, $scope, gettextCatalog, $state, $stateParams, Notification, Restangular, $rootScope, $filter, $q, dataOp, $window, authService) {
  var pc = this;
  pc.project = null;
  pc.allowEdit = false;
  pc.title = 'Projekts';
  $scope.$watch('pc.allowEdit', function () {
    pc.formButtonText = pc.allowEdit ? 'Labot' : 'Saglabāt';
  }); // function initialization

  pc.openProject = openProject;
  pc.deleteProject = deleteProject;
  pc.archiveProject = archiveProject;

  if ($state.current.name == "app.project_catalog.edit") {
    pc.allowEdit = true;
    pc.project = $stateParams.project;
  }

  function openProject(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.project_catalog.edit', {
        id: row.id
      });
    } else {
      $state.go('app.project_catalog.new');
    }
  }

  function deleteProject(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("projekts", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts projekts!', null, 'Projekti'));
      return true;
    }, $scope.handleError);
  }

  function archiveProject(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('projekts', {
              id: key,
              archiving_date: $filter('date')(new Date(Date.now()), "yyyy-MM-dd")
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Projekti veiksmīgi arhivēti!', null, 'Projekti'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!', null, 'Projekti'));
        }

        $state.reload();
      });
    });
  }

  pc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Projekta Nr", null, 'Projekti'),
      key: "projekta_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta nosaukums", null, 'Projekti'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Veids", null, 'Projekti'),
      key: "veids",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Posmu skaits", null, 'Projekti'),
      key: "posmu_skaits",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta pasūtītājs", null, 'Projekti'),
      key: "pasutitajs",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Atbilstošā viedās specializācijas joma", null, 'Projekti'),
      key: "viedas_specializacijas_joma",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Realizācijas termiņš no", null, 'Projekti'),
      key: "realizacijas_termins_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Realizācijas termiņš līdz", null, 'Projekti'),
      key: "realizacijas_termins_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Projekti'),
      key: "statuss",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskās institūcijas/organizācijas", null, 'Projekti'),
      key: "zin_institucijas",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Izveides datums", null, 'Projekti'),
      key: "izveides_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Kopējais finansējums ar PVN", null, 'Projekti'),
      key: "kopejais_finansejums_ar_pvn",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta vadītājs", null, 'Projekti'),
      key: "projekta_vaditaja_vards",
      sortable: "true"
    }],
    default_sort_col: 'projekta_nr',
    default_sort_dir: 'asc',
    click_function: pc.openProject,
    archive_function: pc.archiveProject,
    archivePermission: 'projekts_list',
    gridCheckbox: true,
    filters: true,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    delete_function: pc.deleteProject,
    catalog_name: gettextCatalog.getString('Projekti', null, 'Projekti'),
    create_function: pc.openProject,
    "export": true
  };
  var state = $stateParams.context; //if (state == 'pub' || state == 'priv') {
  //   pc.gridParams.create_function = null
  //} else pc.gridParams.create_function = pc.openProject

  authService.promise.then(function () {
    if ($rootScope.perms.archive_view.projekts_list) {
      pc.gridParams.columns.push({
        text: gettextCatalog.getString("Ir arhivēts", null, 'Projekti'),
        key: "ir_arhivets",
        trueFalseVal: true,
        sortable: "true"
      });
    }
  });
}]);
/**
 * @name project_overview_form
 * @description "Zinātniskās darbības pārskati" forma
 * @param  {string} url /data/zi_parskats/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificOverviewEditController', ['ngDialog', 'UploadService', 'PermissionService', 'Select2Data', '$timeout', 'Upload', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$rootScope', 'gettextUtil', function (ngDialog, UploadService, PermissionService, Select2Data, $timeout, Upload, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $filter, $rootScope, gettextUtil) {
  var poe = this;
  poe.overviewData = null;
  poe.overviewDataOrigin = null;
  poe.contact_data = [];
  poe.allowEdit = true;
  poe.formats = ['dd.MM.yyyy'];
  poe.dateFormat = poe.formats[0]; // tabs

  poe.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Projektu īstenošanas dokumentācija'),
    active: true
  }, {
    id: 'attachmentDataTab',
    head: gettextCatalog.getString('Pielikums', null, 'Projektu īstenošanas dokumentācija'),
    active: false
  }]; // functions

  poe.getDocUrl = getDocUrl;
  poe.loadData = loadData;
  poe.saveScientificOverview = saveScientificOverview;
  poe.submitOverview = submitOverview;
  poe.coordSubmitOverview = coordSubmitOverview;
  poe.pvSubmitOverview = pvSubmitOverview;
  poe.renewOverviewEditing = renewOverviewEditing;
  poe.coordRenewOverviewEditing = coordRenewOverviewEditing;
  poe.pvRenewOverviewEditing = pvRenewOverviewEditing;
  poe.acceptOverview = acceptOverview;
  poe.markAsRevisedOverview = markAsRevisedOverview;
  poe.resetScientificOverview = resetScientificOverview;
  poe.setEditMode = setEditMode;
  poe.getProjectData = getProjectData;
  poe.getPersonData = getPersonData;
  poe.UploadService = UploadService;
  poe.updatePrintTabTitle = updatePrintTabTitle;
  poe.processData = processData;
  poe.processContractAmountCalculation = processContractAmountCalculation;
  poe.processFinReport = processFinReport;
  poe.collectData = collectData;
  poe.recalculateTotals = recalculateTotals;
  poe.addMainExecRecord = addMainExecRecord;
  poe.addExecRecord = addExecRecord;
  poe.addStudRecord = addStudRecord;
  poe.onUpdateOfDates = onUpdateOfDates;
  poe.projectsChoice = null;
  poe.vppProjectsChoice = null;
  poe.overviewTypes = null;
  poe.currentTitle = null;
  poe.hasPermission = PermissionService.hasPermission;
  poe.gotoState = gotoState;
  poe.isDuplicateRow = isDuplicateRow;
  poe.isDuplicateRow2 = isDuplicateRow2;
  poe.checkDuplicates = checkDuplicates;
  poe.uploadFile = uploadFile;
  poe.scrollToPage = scrollToPage;
  poe.paginateIzdDet = paginateIzdDet;
  poe.getAttGroup = getAttGroup;

  function getAttGroup(groupCode) {
    return poe.overviewData.pielikumi.filter(function (att) {
      return att.veids === groupCode;
    });
  }

  function scrollToPage(dp) {
    if (dp.current_page > dp.max_page) {
      dp.current_page = dp.max_page;
    }

    dp.data_page = dp.izdevumu_detalas.filter(function (d) {
      return d.page == dp.current_page;
    });
  }

  function paginateIzdDet(dp) {
    var i = 0;
    dp.per_page = 50;
    dp.current_page = 1;
    angular.forEach(dp.izdevumu_detalas, function (d) {
      d.npk = i;
      d.page = Math.floor(i / dp.per_page) + 1;
      i = i + 1;
    });
    dp.max_page = Math.floor(Math.max(i - 1, 0) / dp.per_page) + 1;
    poe.scrollToPage(dp);
  }

  function uploadFile(dp, file, type) {
    dp.progress = 0;
    Upload.upload({
      url: '/upload',
      data: {
        file: file
      }
    }).then(function (response) {
      Restangular.all("data").all("extract-fin-report-data").post({
        id: response.data.id,
        sha_256: response.data.sha_256,
        type: type
      }).then(function (data) {
        angular.forEach(data, function (d) {
          var r = {};
          r.nosaukums = d["1"];

          if (type === "1") {
            r.darijumu_apliecinoss_dokuments = d["2"];
            r.maksajumu_apliecinoss_dokuments = d["3"];
            r.izdevumu_summa = d["4"];
          } else if (type === "2") {
            r.vieta_merkis_laiks = d["2"];
            r.darijumu_apliecinoss_dokuments = d["3"];
            r.maksajumu_apliecinoss_dokuments = d["4"];
            r.izdevumu_summa = d["5"];
          }

          dp.izdevumu_detalas.push(r);
        });
        poe.paginateIzdDet(dp);
        poe.recalculateTotals();
      }, $scope.handleError);
      dp.progress = 100;
    });
  }

  function isDuplicateRow(i, rec, izdDet) {
    var isDuplicate = false;

    for (var j = 0; izdDet.length > j; j++) {
      if (i !== j) {
        if (rec.nosaukums && izdDet[j].nosaukums && rec.nosaukums === izdDet[j].nosaukums && rec.darijumu_apliecinoss_dokuments && izdDet[j].darijumu_apliecinoss_dokuments && rec.darijumu_apliecinoss_dokuments === izdDet[j].darijumu_apliecinoss_dokuments && rec.maksajumu_apliecinoss_dokuments && izdDet[j].maksajumu_apliecinoss_dokuments && rec.maksajumu_apliecinoss_dokuments === izdDet[j].maksajumu_apliecinoss_dokuments) {
          isDuplicate = true;
          break;
        }
      }
    }

    return isDuplicate;
  }

  function isDuplicateRow2(i, rec, izdDet) {
    var isDuplicate = false;

    for (var j = 0; izdDet.length > j; j++) {
      if (i !== j) {
        if (rec.nosaukums && izdDet[j].nosaukums && rec.nosaukums === izdDet[j].nosaukums && rec.vieta_merkis_laiks && izdDet[j].vieta_merkis_laiks && rec.vieta_merkis_laiks === izdDet[j].vieta_merkis_laiks && rec.darijumu_apliecinoss_dokuments && izdDet[j].darijumu_apliecinoss_dokuments && rec.darijumu_apliecinoss_dokuments === izdDet[j].darijumu_apliecinoss_dokuments && rec.maksajumu_apliecinoss_dokuments && izdDet[j].maksajumu_apliecinoss_dokuments && rec.maksajumu_apliecinoss_dokuments === izdDet[j].maksajumu_apliecinoss_dokuments) {
          isDuplicate = true;
          break;
        }
      }
    }

    return isDuplicate;
  }

  function checkDuplicates() {
    var hasDuplicates = false;

    if (poe.overviewData.veids === 'FIN_PARSKATS' && poe.overviewData.statuss === 'SAGATAVOSANA' && poe.expDetailPositionsAll) {
      angular.forEach(poe.expDetailPositionsAll, function (dp) {
        if (dp.noradit_izdevumu_detalas && dp.izdevumu_detalas) {
          for (var i = 0; dp.izdevumu_detalas.length > i; i++) {
            if (isDuplicateRow(i, dp.izdevumu_detalas[i], dp.izdevumu_detalas)) {
              hasDuplicates = true;
              break;
            }
          }
        } else if (dp.noradit_komandejuma_izdevumu_detalas && dp.izdevumu_detalas) {
          for (var i = 0; dp.izdevumu_detalas.length > i; i++) {
            if (isDuplicateRow2(i, dp.izdevumu_detalas[i], dp.izdevumu_detalas)) {
              hasDuplicates = true;
              break;
            }
          }
        }
      });
    }

    return hasDuplicates;
  }

  function gotoState(s, dId) {
    $state.go(s, {
      id: dId
    });
  }

  function getDocUrl() {
    if (poe.overviewData.veids === 'LS_KALKULACIJA') {
      return '/data/docs/ls_kalkulacija/' + poe.overviewData.id;
    } else if (poe.overviewData.veids === 'ZIN_GR_SASTAVS') {
      return '/data/docs/zin_gr_sastavs/' + poe.overviewData.id;
    } else if (poe.overviewData.veids === 'FIN_PARSKATS') {
      return '/data/docs/fin_parskats/' + poe.overviewData.id;
    } else if (poe.overviewData.veids === 'FIN_PLANS') {
      return '/data/docs/fin_plans/' + poe.overviewData.id;
    }
  }

  function init() {
    poe.projectsChoice = new Select2Data('choices', 'projects');
    poe.vppProjectsChoice = new Select2Data('choices', 'vpp_projects');
    dataOp.getCodificator('project_overview_type').then(function (data) {
      poe.overviewTypes = data.data;
    });
    dataOp.getCodificator('project_overview_status').then(function (data) {
      poe.overviewStatuses = data.data;
    });
    poe.supervisoryBoards = new Select2Data('choices', 'supervisory_boards');
    loadData();
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; poe.tabs.length > i; i++) {
        if (poe.tabs[i].active) {
          poe.currentTitle = poe.tabs[i].head;
          break;
        }
      }
    });
  }

  function addMainExecRecord() {
    poe.overviewData.galv_izp_grupa.push({
      amats: 'GALV_IZP',
      slodze_ple: parseFloat('0.00001'),
      atalgojums_projekta: parseFloat('0.00001'),
      socialas_iemaksas: parseFloat('0.00001'),
      izdevumi_kopa: parseFloat('0.00001')
    });
  }

  function addExecRecord() {
    poe.overviewData.izp_grupa.push({
      amats: 'IZP',
      slodze_ple: parseFloat('0.00001'),
      atalgojums_projekta: parseFloat('0.00001'),
      socialas_iemaksas: parseFloat('0.00001'),
      izdevumi_kopa: parseFloat('0.00001')
    });
  }

  function addStudRecord() {
    poe.overviewData.stud_grupa.push({
      amats: 'STUD',
      slodze_ple: parseFloat('0.00001'),
      atalgojums_projekta: parseFloat('0.00001'),
      socialas_iemaksas: parseFloat('0.00001'),
      izdevumi_kopa: parseFloat('0.00001')
    });
  }

  function onUpdateOfDates() {
    if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PLANS') {
      updateFinPlan();
    }
  }

  function updateFinPlan() {
    poe.overviewData.fin_plans.splice(0, poe.overviewData.fin_plans.length);

    if (poe.overviewData.parskata_datums_no && poe.overviewData.parskata_datums_lidz) {
      var yFrom = poe.overviewData.parskata_datums_no.getFullYear();
      var mFrom = poe.overviewData.parskata_datums_no.getMonth();
      var yTo = poe.overviewData.parskata_datums_lidz.getFullYear();
      var mTo = poe.overviewData.parskata_datums_lidz.getMonth();

      for (var i = yFrom; yTo >= i; i++) {
        poe.overviewData.fin_plans.push({
          gads: i,
          fin_summa: 0.0
        });

        for (var j = 0; 11 >= j; j++) {
          var create = true;

          if (j < mFrom && i == yFrom) {
            create = false;
          } else if (j > mTo && i == yTo) {
            create = false;
          }

          if (create) {
            poe.overviewData.fin_plans.push({
              gads: i,
              menesis: j,
              menesis_nosaukums: romanMonth(j),
              fin_summa: 0.0
            });
          }
        }
      }
    }
  }

  function romanMonth(m) {
    var lookup = ['Janv.', 'Febr.', 'Mar.', 'Apr.', 'Mai.', 'Jūn.', 'Jūl.', 'Aug.', 'Sept.', 'Okt.', 'Nov.', 'Dec.'];
    return lookup[m];
  }

  function getProjectData(projectData) {
    if (projectData) {
      dataOp.getDefaultById(projectData.id, 'projekta_parskats_projekts_info', {
        veids: poe.overviewData.veids
      }).then(function (data) {
        poe.overviewData.projekts_id = data.id;
        poe.overviewData.projekta_nr = data.projekta_nr;
        poe.overviewData.zi_nosaukums = data.zi_nosaukums;

        if (data.realizacijas_termins_no) {
          poe.overviewData.projekta_realizacijas_termins_no = new Date(data.realizacijas_termins_no);
        }

        if (data.realizacijas_termins_lidz) {
          poe.overviewData.projekta_realizacijas_termins_lidz = new Date(data.realizacijas_termins_lidz);
        }

        if (data.parskata_datums_no) {
          poe.overviewData.parskata_datums_no = new Date(data.parskata_datums_no);
        }

        if (data.parskata_datums_lidz) {
          poe.overviewData.parskata_datums_lidz = new Date(data.parskata_datums_lidz);
        }

        poe.overviewData.atlikums_sakuma = parseFloat(data.atlikums_sakuma);
        poe.overviewData.ienakumi_perioda = parseFloat(data.ienakumi_perioda);

        if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PLANS') {
          updateFinPlan();
        } else if (poe.overviewData.veids === 'SAT_ATSKAITE') {
          if (data.uzraudzibas_komisija_id) {
            poe.overviewData.uzraudzibas_komisija_select_obj = {
              id: data.uzraudzibas_komisija_id,
              text: data.uzraudzibas_komisija
            };
          } else {
            poe.overviewData.uzraudzibas_komisija_select_obj = {
              id: null,
              text: ''
            };
          }

          poe.overviewData.projekta_uzraudzibas_komisija_id = data.uzraudzibas_komisija_id;
        } else if (!poe.overviewData.veids || poe.overviewData.veids === 'LS_KALKULACIJA') {
          dataOp.listDefault('projekta_parskats_lig_sum_kalkulacija_list', {
            projekts_id: data.id
          }).then(function (data) {
            poe.processContractAmountCalculation(data);
            recalculateTotals();
          });
        } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PARSKATS') {
          dataOp.listDefault('projekta_parskats_fin_parskats_list', {
            projekts_id: data.id
          }).then(function (data) {
            poe.processFinReport(data);
            recalculateTotals();
          });
        }

        poe.overviewData.projekta_vaditaja_id = data.projekta_vaditaja_id;
        poe.overviewData.projekta_vaditaja_vards = data.projekta_vaditaja_vards;
        poe.overviewData.projekta_vaditaja_uzvards = data.projekta_vaditaja_uzvards;
        poe.overviewData.projekta_vaditaja_personas_kods = data.projekta_vaditaja_personas_kods;
        angular.forEach(poe.overviewData.proj_vad_grupa, function (gr) {
          gr.personals_id = poe.overviewData.projekta_vaditaja_id;
          gr.vards = poe.overviewData.projekta_vaditaja_vards;
          gr.uzvards = poe.overviewData.projekta_vaditaja_uzvards;
          gr.personas_kods = poe.overviewData.projekta_vaditaja_personas_kods;
        });
        recalculateTotals();
      });
    }
  }

  function getPersonData(rec) {
    if (poe.overviewData.statuss === 'SAGATAVOSANA') {
      rec.vards = null;
      rec.uzvards = null;

      if (rec.personas_kods && rec.personas_kods.length == 11) {
        dataOp.getChoices('personal_choice', {
          personas_kods: rec.personas_kods
        }).then(function (data) {
          if (data.data.length > 0) {
            rec.vards = data.data[0].vards;
            rec.uzvards = data.data[0].uzvards;
          }
        });
      }
    }
  }

  function recalculateTotals() {
    if (!poe.overviewData.veids || poe.overviewData.veids === 'ZIN_GR_SASTAVS') {
      var totals = {
        atalgojums_projekta: 0,
        socialas_iemaksas: 0,
        izdevumi_kopa: 0
      };
      recalculateGroupTotals(poe.overviewData.proj_vad_grupa, totals);
      recalculateGroupTotals(poe.overviewData.galv_izp_grupa, totals);
      recalculateGroupTotals(poe.overviewData.izp_grupa, totals);
      recalculateGroupTotals(poe.overviewData.stud_grupa, totals);
      poe.overviewData.atalgojums_projekta_kopa = totals.atalgojums_projekta;
      poe.overviewData.socialas_iemaksas_kopa = totals.socialas_iemaksas;
      poe.overviewData.izdevumi_kopa = totals.izdevumi_kopa;
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'LS_KALKULACIJA') {
      var sum = 0;
      poe.customIsValid = true;

      if (poe.expPositionsAll) {
        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          if (!poe.expPositionsAll[i].is_leaf) {
            var sum2 = 0;

            for (var j = 0; poe.expPositionsAll.length > j; j++) {
              if (gettextUtil.startsWith(poe.expPositionsAll[j].npk, poe.expPositionsAll[i].npk) && i != j && poe.expPositionsAll[j].is_leaf) {
                if (poe.expPositionsAll[j].izdevumu_summa) {
                  sum2 = sum2 + parseFloat(poe.expPositionsAll[j].izdevumu_summa);
                }
              }
            }

            poe.expPositionsAll[i].izdevumu_summa = sum2;
          } else {
            if (poe.expPositionsAll[i].izdevumu_summa) {
              sum = sum + parseFloat(poe.expPositionsAll[i].izdevumu_summa);
            }
          }
        }

        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          var isError = false;

          if (poe.expPositionsAll[i].pielaujamie_procenti) {
            if (poe.expPositionsAll[i].izdevumu_summa) {
              var sumOther = sum - parseFloat(poe.expPositionsAll[i].izdevumu_summa);

              if (parseFloat(poe.expPositionsAll[i].izdevumu_summa) > poe.expPositionsAll[i].pielaujamie_procenti * sumOther / 100) {
                isError = true;
                poe.customIsValid = false;
              }
            }
          }

          poe.expPositionsAll[i].errorExceededPercentLimit = isError;
        }
      }

      poe.overviewData.izdevumi_kopa = sum;
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PARSKATS') {
      var sum = 0;
      var res = 0;
      poe.customIsValid = true;

      if (poe.expPositionsAll) {
        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          if (poe.expPositionsAll[i].is_detail_leaf || poe.expPositionsAll[i].is_bt_detail_leaf) {
            var sum2 = 0;

            if (poe.expPositionsAll[i].izdevumu_detalas) {
              for (var j = 0; poe.expPositionsAll[i].izdevumu_detalas.length > j; j++) {
                if (poe.expPositionsAll[i].izdevumu_detalas[j].izdevumu_summa) {
                  sum2 = sum2 + parseFloat(poe.expPositionsAll[i].izdevumu_detalas[j].izdevumu_summa);
                }
              }
            }

            poe.expPositionsAll[i].izdevumu_summa = parseFloat(parseFloat(sum2).toFixed(2));
          }
        }

        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          if (!poe.expPositionsAll[i].is_leaf) {
            var sum2 = 0;

            for (var j = 0; poe.expPositionsAll.length > j; j++) {
              if (gettextUtil.startsWith(poe.expPositionsAll[j].npk, poe.expPositionsAll[i].npk) && i != j && poe.expPositionsAll[j].is_leaf) {
                if (poe.expPositionsAll[j].izdevumu_summa) {
                  sum2 = sum2 + parseFloat(poe.expPositionsAll[j].izdevumu_summa);
                }
              }
            }

            poe.expPositionsAll[i].izdevumu_summa = parseFloat(parseFloat(sum2).toFixed(2));
          } else {
            if (poe.expPositionsAll[i].izdevumu_summa) {
              sum = sum + parseFloat(poe.expPositionsAll[i].izdevumu_summa);
            }
          }
        }

        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          var isError = false;

          if (poe.expPositionsAll[i].pielaujamie_procenti) {
            if (poe.expPositionsAll[i].izdevumu_summa) {
              var sumOther = sum - parseFloat(poe.expPositionsAll[i].izdevumu_summa);

              if (parseFloat(poe.expPositionsAll[i].izdevumu_summa) > poe.expPositionsAll[i].pielaujamie_procenti * sumOther / 100) {
                isError = true;
                poe.customIsValid = false;
              }
            }
          }

          poe.expPositionsAll[i].errorExceededPercentLimit = isError;
        }
      }

      if (poe.overviewData.atlikums_sakuma) {
        res = res + parseFloat(poe.overviewData.atlikums_sakuma);
      }

      if (poe.overviewData.ienakumi_perioda) {
        res = res + parseFloat(poe.overviewData.ienakumi_perioda);
      }

      res = res - sum;
      poe.overviewData.izdevumi_kopa = parseFloat(parseFloat(sum).toFixed(2));
      poe.overviewData.atlikums_beigas = parseFloat(parseFloat(res).toFixed(2));
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PLANS') {
      var sum = 0;

      if (poe.overviewData.fin_plans) {
        for (var i = 0; poe.overviewData.fin_plans.length > i; i++) {
          if (!poe.overviewData.fin_plans[i].menesis_nosaukums) {
            var sum2 = 0;

            for (var j = 0; poe.overviewData.fin_plans.length > j; j++) {
              if (poe.overviewData.fin_plans[j].menesis_nosaukums && poe.overviewData.fin_plans[i].gads === poe.overviewData.fin_plans[j].gads) {
                if (poe.overviewData.fin_plans[j].fin_summa) {
                  sum2 = sum2 + parseFloat(poe.overviewData.fin_plans[j].fin_summa);
                  sum = sum + parseFloat(poe.overviewData.fin_plans[j].fin_summa);
                }
              }
            }

            poe.overviewData.fin_plans[i].fin_summa = parseFloat(parseFloat(sum2).toFixed(2));
          }
        }
      }

      poe.overviewData.ienakumi_perioda = parseFloat(parseFloat(sum).toFixed(2));
    }
  }

  function recalculateGroupTotals(grs, totals) {
    if (grs) {
      angular.forEach(grs, function (gr) {
        var atalgojums_projekta = 0;

        if (gr.atalgojums_projekta) {
          atalgojums_projekta = parseFloat(parseFloat(gr.atalgojums_projekta).toFixed(2));
        }

        var socialas_iemaksas = 0;

        if (gr.socialas_iemaksas) {
          socialas_iemaksas = parseFloat(parseFloat(gr.socialas_iemaksas).toFixed(2));
        }

        var izdevumi_kopa = atalgojums_projekta + socialas_iemaksas;
        gr.izdevumi_kopa = izdevumi_kopa;
        totals.atalgojums_projekta = totals.atalgojums_projekta + atalgojums_projekta;
        totals.socialas_iemaksas = totals.socialas_iemaksas + socialas_iemaksas;
        totals.izdevumi_kopa = totals.izdevumi_kopa + izdevumi_kopa;
      });
    }
  }

  function processData(data) {
    if (data.projekts_id) {
      data.project_select_obj = {
        id: data.projekts_id,
        text: data.projekta_nosaukums
      };
    }

    if (data.projekta_realizacijas_termins_no) {
      data.projekta_realizacijas_termins_no = new Date(data.projekta_realizacijas_termins_no);
    }

    if (data.projekta_realizacijas_termins_lidz) {
      data.projekta_realizacijas_termins_lidz = new Date(data.projekta_realizacijas_termins_lidz);
    }

    if (data.sagatavosanas_datums) {
      data.sagatavosanas_datums = new Date(data.sagatavosanas_datums);
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.saskanosanas_datums) {
      data.saskanosanas_datums = new Date(data.saskanosanas_datums);
    }

    if (data.apstiprinasanas_datums) {
      data.apstiprinasanas_datums = new Date(data.apstiprinasanas_datums);
    }

    if (data.iesniegsanas_termins) {
      data.iesniegsanas_termins = new Date(data.iesniegsanas_termins);
    }

    if (data.parskata_datums_no) {
      data.parskata_datums_no = new Date(data.parskata_datums_no);
    }

    if (data.parskata_datums_lidz) {
      data.parskata_datums_lidz = new Date(data.parskata_datums_lidz);
    }

    if (data.uzraudzibas_komisija_id) {
      data.uzraudzibas_komisija_select_obj = {
        id: data.uzraudzibas_komisija_id,
        text: data.uzraudzibas_komisija
      };
    }

    poe.customIsValid = true;
    poe.overviewData = data;

    if (!poe.overviewData.statuss || poe.overviewData.statuss === 'SAGATAVOSANA') {
      if (!poe.overviewData.veids || poe.overviewData.veids === 'LS_KALKULACIJA') {
        dataOp.listDefault('projekta_parskats_lig_sum_kalkulacija_list', {
          projekts_id: data.projekts_id
        }).then(function (data) {
          poe.processContractAmountCalculation(data);
          recalculateTotals();
        });
      } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PARSKATS') {
        dataOp.listDefault('projekta_parskats_fin_parskats_list', {
          projekts_id: data.projekts_id
        }).then(function (data) {
          poe.processFinReport(data);
          recalculateTotals();
        });
      }
    } else {
      if (poe.overviewData.veids === 'FIN_PARSKATS') {
        for (var i = 0; poe.overviewData.izdevumu_pozicijas.length > i; i++) {
          if (poe.overviewData.izdevumu_pozicijas[i].izdevumu_detalas) {
            poe.paginateIzdDet(poe.overviewData.izdevumu_pozicijas[i]);
          }
        }
      }
    }

    $timeout(function () {
      poe.overviewDataOrigin = angular.copy(poe.overviewData);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      poe.title = gettextCatalog.getString('Projekta īstenošanas dokuments', null, 'Projektu īstenošanas dokumentācija');
      dataOp.getDefaultById($stateParams.id, 'projekta_parskats').then(function (data) {
        poe.processData(data);
      });
    } else {
      poe.title = gettextCatalog.getString('Pievienot projekta īstenošanas dokumentu', null, 'Projektu īstenošanas dokumentācija');
      poe.allowEdit = false;
      dataOp.getDefaultById(0, 'projekta_parskats', {
        veids: $stateParams.type,
        copy_id: $stateParams.poId
      }).then(function (data) {
        poe.processData(data);
      });
      $timeout(function () {
        poe.overviewDataOrigin = angular.copy(poe.overviewData);
      });
    }
  }

  function processContractAmountCalculation(data) {
    poe.expPositionsAll = data;

    for (var i = 0; poe.expPositionsAll.length > i; i++) {
      for (var j = 0; poe.overviewData.izdevumu_pozicijas.length > j; j++) {
        if (poe.expPositionsAll[i].npk === poe.overviewData.izdevumu_pozicijas[j].npk || poe.expPositionsAll[i].pozicijas_kods === poe.overviewData.izdevumu_pozicijas[j].pozicijas_kods) {
          poe.expPositionsAll[i].izdevumu_summa = poe.overviewData.izdevumu_pozicijas[j].izdevumu_summa;
          break;
        }
      }
    }

    for (var i = 0; poe.expPositionsAll.length > i; i++) {
      if (poe.expPositionsAll.length - 1 > i) {
        if (gettextUtil.startsWith(poe.expPositionsAll[i + 1].npk, poe.expPositionsAll[i].npk)) {
          poe.expPositionsAll[i].is_leaf = false;
        } else {
          poe.expPositionsAll[i].is_leaf = true;
        }
      } else {
        poe.expPositionsAll[i].is_leaf = true;
      }
    }
  }

  function processFinReport(data) {
    poe.expPositionsAll = data;

    for (var i = 0; poe.expPositionsAll.length > i; i++) {
      poe.expPositionsAll[i].izdevumu_detalas = [];
      poe.expPositionsAll[i].progress = 100;

      for (var j = 0; poe.overviewData.izdevumu_pozicijas.length > j; j++) {
        if (poe.expPositionsAll[i].npk === poe.overviewData.izdevumu_pozicijas[j].npk || poe.expPositionsAll[i].pozicijas_kods === poe.overviewData.izdevumu_pozicijas[j].pozicijas_kods) {
          poe.expPositionsAll[i].izdevumu_summa = poe.overviewData.izdevumu_pozicijas[j].izdevumu_summa;
          poe.expPositionsAll[i].izdevumu_detalas = angular.copy(poe.overviewData.izdevumu_pozicijas[j].izdevumu_detalas);
          break;
        }
      }

      poe.paginateIzdDet(poe.expPositionsAll[i]);
    }

    poe.expDetailPositionsAll = [];

    for (var i = 0; poe.expPositionsAll.length > i; i++) {
      if (poe.expPositionsAll.length - 1 > i) {
        if (gettextUtil.startsWith(poe.expPositionsAll[i + 1].npk, poe.expPositionsAll[i].npk)) {
          poe.expPositionsAll[i].is_leaf = false;
        } else {
          poe.expPositionsAll[i].is_leaf = true;
        }
      } else {
        poe.expPositionsAll[i].is_leaf = true;
      }

      if (poe.expPositionsAll[i].is_leaf && poe.expPositionsAll[i].noradit_izdevumu_detalas) {
        poe.expPositionsAll[i].is_detail_leaf = true;
      } else {
        poe.expPositionsAll[i].is_detail_leaf = false;
      }

      if (poe.expPositionsAll[i].is_leaf && poe.expPositionsAll[i].noradit_komandejuma_izdevumu_detalas) {
        poe.expPositionsAll[i].is_bt_detail_leaf = true;
      } else {
        poe.expPositionsAll[i].is_bt_detail_leaf = false;
      }

      if (poe.expPositionsAll[i].is_leaf && !poe.expPositionsAll[i].noradit_izdevumu_detalas && !poe.expPositionsAll[i].noradit_komandejuma_izdevumu_detalas) {
        poe.expPositionsAll[i].is_editable_leaf = true;
      } else {
        poe.expPositionsAll[i].is_editable_leaf = false;
      }

      if (poe.expPositionsAll[i].is_detail_leaf || poe.expPositionsAll[i].is_bt_detail_leaf) {
        poe.expDetailPositionsAll.push(poe.expPositionsAll[i]);
      }
    }
  }

  function procGroup(grs) {
    if (grs) {
      angular.forEach(grs, function (gr) {
        if (gr.slodze_ple) {
          gr.slodze_ple = parseFloat(gr.slodze_ple);
        }

        if (gr.atalgojums_projekta) {
          gr.atalgojums_projekta = parseFloat(gr.atalgojums_projekta);
        }

        if (gr.socialas_iemaksas) {
          gr.socialas_iemaksas = parseFloat(gr.socialas_iemaksas);
        }

        if (gr.izdevumi_kopa) {
          gr.izdevumi_kopa = parseFloat(gr.izdevumi_kopa);
        }
      });
    }
  }

  function collectData() {
    if (!poe.overviewData.veids || poe.overviewData.veids === 'LS_KALKULACIJA') {
      poe.overviewData.izdevumu_pozicijas = [];

      if (poe.expPositionsAll) {
        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          var rec = {};
          rec.npk = poe.expPositionsAll[i].npk;
          rec.pozicijas_kods = poe.expPositionsAll[i].pozicijas_kods;
          rec.pozicijas_nosaukums = poe.expPositionsAll[i].pozicijas_nosaukums;
          rec.izdevumu_summa = poe.expPositionsAll[i].izdevumu_summa;

          if (poe.expPositionsAll[i].izdevumu_summa) {
            if (!isNaN(parseFloat(poe.expPositionsAll[i].izdevumu_summa))) {
              rec.izdevumu_summa = parseFloat(poe.expPositionsAll[i].izdevumu_summa);
            }
          }

          if (rec.izdevumu_summa && rec.izdevumu_summa > 0) {
            poe.overviewData.izdevumu_pozicijas.push(rec);
          }
        }
      }
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PARSKATS') {
      poe.overviewData.izdevumu_pozicijas = [];

      if (poe.expPositionsAll) {
        for (var i = 0; poe.expPositionsAll.length > i; i++) {
          var rec = {};
          rec.npk = poe.expPositionsAll[i].npk;
          rec.pozicijas_kods = poe.expPositionsAll[i].pozicijas_kods;
          rec.pozicijas_nosaukums = poe.expPositionsAll[i].pozicijas_nosaukums;
          rec.izdevumu_summa = poe.expPositionsAll[i].izdevumu_summa;

          if (poe.expPositionsAll[i].izdevumu_summa) {
            if (!isNaN(parseFloat(poe.expPositionsAll[i].izdevumu_summa))) {
              rec.izdevumu_summa = parseFloat(poe.expPositionsAll[i].izdevumu_summa);
            }
          }

          rec.ir_izdevumu_detalas = poe.expPositionsAll[i].noradit_izdevumu_detalas;
          rec.ir_komandejuma_izdevumu_detalas = poe.expPositionsAll[i].noradit_komandejuma_izdevumu_detalas;
          rec.izdevumu_detalas = poe.expPositionsAll[i].izdevumu_detalas;

          if (rec.izdevumu_detalas) {
            for (var j = 0; rec.izdevumu_detalas.length > j; j++) {
              if (rec.izdevumu_detalas[j].izdevumu_summa) {
                if (!isNaN(parseFloat(rec.izdevumu_detalas[j].izdevumu_summa))) {
                  rec.izdevumu_detalas[j].izdevumu_summa = parseFloat(rec.izdevumu_detalas[j].izdevumu_summa);
                }
              }
            }
          }

          if (rec.izdevumu_summa && rec.izdevumu_summa > 0 || rec.izdevumu_detalas && rec.izdevumu_detalas.length > 0) {
            poe.overviewData.izdevumu_pozicijas.push(rec);
          }
        }
      }
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'ZIN_GR_SASTAVS') {
      procGroup(poe.overviewData.proj_vad_grupa);
      procGroup(poe.overviewData.galv_izp_grupa);
      procGroup(poe.overviewData.izp_grupa);
      procGroup(poe.overviewData.stud_grupa);

      if (poe.overviewData.atalgojums_projekta_kopa) {
        poe.overviewData.atalgojums_projekta_kopa = parseFloat(poe.overviewData.atalgojums_projekta_kopa);
      }

      if (poe.overviewData.socialas_iemaksas_kopa) {
        poe.overviewData.socialas_iemaksas_kopa = parseFloat(poe.overviewData.socialas_iemaksas_kopa);
      }
    } else if (!poe.overviewData.veids || poe.overviewData.veids === 'FIN_PLANS') {
      if (poe.overviewData.fin_plans) {
        for (var i = 0; poe.overviewData.fin_plans.length > i; i++) {
          if (poe.overviewData.fin_plans[i].fin_summa) {
            poe.overviewData.fin_plans[i].fin_summa = parseFloat(poe.overviewData.fin_plans[i].fin_summa);
          }
        }
      }
    }

    if (poe.overviewData.izdevumi_kopa) {
      poe.overviewData.izdevumi_kopa = parseFloat(poe.overviewData.izdevumi_kopa);
    }

    if (poe.overviewData.atlikums_sakuma) {
      poe.overviewData.atlikums_sakuma = parseFloat(poe.overviewData.atlikums_sakuma);
    }

    if (poe.overviewData.atlikums_beigas) {
      poe.overviewData.atlikums_beigas = parseFloat(poe.overviewData.atlikums_beigas);
    }

    if (poe.overviewData.ienakumi_perioda) {
      poe.overviewData.ienakumi_perioda = parseFloat(poe.overviewData.ienakumi_perioda);
    }

    recalculateTotals();
  }

  function saveScientificOverview(lock, viewName, collect) {
    if (!lock) {
      var viewNameTmp = 'projekta_parskats';

      if (viewName && viewName != null) {
        viewNameTmp = viewName;
      }

      var collectTmp = (!poe.overviewData.statuss || poe.overviewData.statuss === 'SAGATAVOSANA') && viewNameTmp === 'projekta_parskats';

      if (collect) {
        collectTmp = collect;
      }

      if (collectTmp) {
        $rootScope.showLoader = true;
        poe.collectData();
      }

      if (poe.overviewData.project_select_obj) {
        poe.overviewData.projekts_id = poe.overviewData.project_select_obj.id;
        delete poe.overviewData.project_select_obj.moreData;
      }

      if (poe.overviewData.uzraudzibas_komisija_select_obj) {
        poe.overviewData.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_select_obj.id;
      }

      dataOp.saveScientificOverviewById(poe.overviewData, viewNameTmp).then(function (data) {
        $rootScope.allowPrint = true;

        if (poe.overviewData.id) {
          Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Dokuments veiksmīgi pievienots!', null, 'Projektu īstenošanas dokumentācija'));
          $state.go('app.project_overview.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function submitOverview(lock) {
    if (poe.overviewData.veids === 'FIN_PARSKATS' && poe.overviewData.statuss === 'SAGATAVOSANA') {
      $rootScope.showLoader = true;

      if (poe.checkDuplicates()) {
        $rootScope.showLoader = false;
        Notification.error(gettextCatalog.getString('Finanšu pārskatā izdevumu detaļu ieraksti nedrīkst dublēties!', null, 'Projektu īstenošanas dokumentācija'));
        return;
      }
    }

    poe.overviewData.statuss = 'TMP';
    saveScientificOverview(lock, 'projekta_parskats_iesn', true);
  }

  function coordSubmitOverview(lock) {
    var data = {};
    data.id = poe.overviewData.id;
    data.projekts_id = poe.overviewData.projekts_id;
    data.veids = poe.overviewData.veids;
    data.veids_nosaukums = poe.overviewData.veids_nosaukums;
    data.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_id;
    data.sagatavosanas_datums = poe.overviewData.sagatavosanas_datums;
    data.sagatavotajs_id = poe.overviewData.sagatavotajs_id;
    data.iesniegsanas_datums = poe.overviewData.iesniegsanas_datums;
    data.iesniedzejs_id = poe.overviewData.iesniedzejs_id;
    data.saskanosanas_datums = poe.overviewData.saskanosanas_datums;
    data.saskanotajs_id = poe.overviewData.saskanotajs_id;
    data.apstiprinasanas_datums = poe.overviewData.apstiprinasanas_datums;
    data.apstiprinatajs_id = poe.overviewData.apstiprinatajs_id;
    data.atalgojums_projekta_kopa = poe.overviewData.atalgojums_projekta_kopa;
    data.socialas_iemaksas_kopa = poe.overviewData.socialas_iemaksas_kopa;
    data.izdevumi_kopa = poe.overviewData.izdevumi_kopa;
    data.statuss = 'IESNIEGTS';
    data.noraidisanas_iemesls = poe.overviewData.noraidisanas_iemesls;
    dataOp.saveDefault(data, 'projekta_parskats_sask_nor').then(function (data) {
      Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
      $state.reload();
    }, $scope.handleError);
  }

  function pvSubmitOverview(lock) {
    var data = {};
    data.id = poe.overviewData.id;
    data.projekts_id = poe.overviewData.projekts_id;
    data.veids = poe.overviewData.veids;
    data.veids_nosaukums = poe.overviewData.veids_nosaukums;
    data.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_id;
    data.sagatavosanas_datums = poe.overviewData.sagatavosanas_datums;
    data.sagatavotajs_id = poe.overviewData.sagatavotajs_id;
    data.iesniegsanas_datums = poe.overviewData.iesniegsanas_datums;
    data.iesniedzejs_id = poe.overviewData.iesniedzejs_id;
    data.saskanosanas_datums = poe.overviewData.saskanosanas_datums;
    data.saskanotajs_id = poe.overviewData.saskanotajs_id;
    data.apstiprinasanas_datums = poe.overviewData.apstiprinasanas_datums;
    data.apstiprinatajs_id = poe.overviewData.apstiprinatajs_id;
    data.atalgojums_projekta_kopa = poe.overviewData.atalgojums_projekta_kopa;
    data.socialas_iemaksas_kopa = poe.overviewData.socialas_iemaksas_kopa;
    data.izdevumi_kopa = poe.overviewData.izdevumi_kopa;
    data.statuss = 'TMP';
    data.noraidisanas_iemesls = poe.overviewData.noraidisanas_iemesls;
    dataOp.saveDefault(data, 'projekta_parskats_pv_sask_nor').then(function (data) {
      Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
      $state.reload();
    }, $scope.handleError);
  }

  function renewOverviewEditing(lock, view) {
    var v = 'projekta_parskats_apst_nor';

    if (view) {
      v = view;
    }

    var d = {};
    d.id = poe.overviewData.id;
    d.projekts_id = poe.overviewData.projekts_id;
    d.veids = poe.overviewData.veids;
    d.veids_nosaukums = poe.overviewData.veids_nosaukums;
    d.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_id;
    d.noraidisanas_iemesls = null;
    ngDialog.openConfirm({
      template: 'components/project_overview/tabs/dialog-overview-reject.html',
      scope: $scope,
      data: d
    }).then(function () {
      d.statuss = 'SAGATAVOSANA';
      d.sagatavosanas_datums = null;
      d.sagatavotajs_id = null;
      d.iesniegsanas_datums = null;
      d.iesniedzejs_id = null;
      d.saskanosanas_datums = null;
      d.saskanotajs_id = null;
      d.apstiprinasanas_datums = null;
      d.apstiprinatajs_id = null;
      d.atalgojums_projekta_kopa = null;
      d.socialas_iemaksas_kopa = null;
      d.izdevumi_kopa = null;
      dataOp.saveDefault(d, v).then(function (data) {
        Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
        $state.reload();
      }, $scope.handleError);
    }, function () {});
  }

  function coordRenewOverviewEditing(lock) {
    renewOverviewEditing(lock, 'projekta_parskats_sask_nor');
  }

  function pvRenewOverviewEditing(lock) {
    renewOverviewEditing(lock, 'projekta_parskats_pv_sask_nor');
  }

  function acceptOverview(lock) {
    var data = {};
    data.id = poe.overviewData.id;
    data.projekts_id = poe.overviewData.projekts_id;
    data.veids = poe.overviewData.veids;
    data.veids_nosaukums = poe.overviewData.veids_nosaukums;
    data.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_id;
    data.sagatavosanas_datums = poe.overviewData.sagatavosanas_datums;
    data.sagatavotajs_id = poe.overviewData.sagatavotajs_id;
    data.iesniegsanas_datums = poe.overviewData.iesniegsanas_datums;
    data.iesniedzejs_id = poe.overviewData.iesniedzejs_id;
    data.saskanosanas_datums = poe.overviewData.saskanosanas_datums;
    data.saskanotajs_id = poe.overviewData.saskanotajs_id;
    data.apstiprinasanas_datums = poe.overviewData.apstiprinasanas_datums;
    data.apstiprinatajs_id = poe.overviewData.apstiprinatajs_id;
    data.atalgojums_projekta_kopa = poe.overviewData.atalgojums_projekta_kopa;
    data.socialas_iemaksas_kopa = poe.overviewData.socialas_iemaksas_kopa;
    data.izdevumi_kopa = poe.overviewData.izdevumi_kopa;
    data.statuss = 'APSTIPRINATS';
    data.noraidisanas_iemesls = null;
    dataOp.saveDefault(data, 'projekta_parskats_apst_nor').then(function (data) {
      Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
      $state.reload();
    }, $scope.handleError);
  }

  function markAsRevisedOverview(lock) {
    var data = {};
    data.id = poe.overviewData.id;
    data.projekts_id = poe.overviewData.projekts_id;
    data.veids = poe.overviewData.veids;
    data.veids_nosaukums = poe.overviewData.veids_nosaukums;
    data.uzraudzibas_komisija_id = poe.overviewData.uzraudzibas_komisija_id;
    data.sagatavosanas_datums = poe.overviewData.sagatavosanas_datums;
    data.sagatavotajs_id = poe.overviewData.sagatavotajs_id;
    data.iesniegsanas_datums = poe.overviewData.iesniegsanas_datums;
    data.iesniedzejs_id = poe.overviewData.iesniedzejs_id;
    data.saskanosanas_datums = poe.overviewData.saskanosanas_datums;
    data.saskanotajs_id = poe.overviewData.saskanotajs_id;
    data.apstiprinasanas_datums = poe.overviewData.apstiprinasanas_datums;
    data.apstiprinatajs_id = poe.overviewData.apstiprinatajs_id;
    data.atalgojums_projekta_kopa = poe.overviewData.atalgojums_projekta_kopa;
    data.socialas_iemaksas_kopa = poe.overviewData.socialas_iemaksas_kopa;
    data.izdevumi_kopa = poe.overviewData.izdevumi_kopa;
    data.statuss = 'IZSKATITS';
    data.noraidisanas_iemesls = poe.overviewData.noraidisanas_iemesls;
    dataOp.saveDefault(data, 'projekta_parskats_apst_nor').then(function (data) {
      Notification.success(gettextCatalog.getString('Dokuments veiksmīgi labots!', null, 'Projektu īstenošanas dokumentācija'));
      $state.reload();
    }, $scope.handleError);
  }

  function resetScientificOverview() {
    poe.overviewData = angular.copy(poe.overviewDataOrigin);
  }

  function setEditMode() {
    poe.allowEdit = false;
  }

  init();
}]);
/**
 * @name project_overview
 * @description Saraksts "Projektu pārskati"
 * @param  {string} url /data/zi_parskats_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificOverviewController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope, $window) {
  var po = this;
  po.overview = null;
  po.allowEdit = false; // tabs

  po.tabs = [{
    id: 'mainDataTab',
    head: 'Pamatdati',
    active: true
  }];
  $scope.$watch('po.allowEdit', function () {
    po.formButtonText = po.allowEdit ? 'Labot' : 'Saglabāt';
  }); // panel collapse initialization

  po.collapseMainData = true; // function initialization

  po.openOverview = openOverview;
  po.createFromTempOverview = createFromTempOverview;
  po.createButtonsIf = createButtonsIf;
  po.canDeleteOverview = canDeleteOverview;
  po.deleteOverview = deleteOverview;

  if ($state.current.name == "app.project_overview.edit") {
    po.allowEdit = true;
    po.overview = $stateParams.overview;
  }

  function openOverview(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.project_overview.edit', {
        id: row.id
      });
    } else {
      $state.go('app.project_overview.new');
    }
  }

  function createFromTempOverview(createObj) {
    var idArr = [];

    if (createObj === parseInt(createObj, 10)) {
      idArr.push(createObj.toString());
    } else {
      for (var key in createObj) {
        idArr.push(key);
      }
    }

    if (idArr.length > 0) {
      $state.go('app.project_overview.new', {
        poId: idArr[0]
      });
    }
  }

  function createButtonsIf() {
    return $rootScope.perms.save.projekta_parskats;
  }

  function canDeleteOverview(row) {
    if (row.can_delete) {
      return true;
    } else {
      return false;
    }
  }

  function deleteOverview(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("projekta_parskats", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Dokuments veiksmīgi dzēsts!', null, 'Projektu īstenošanas dokumentācija'));
      return true;
    }, $scope.handleError);
  }

  po.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās institūcijas/organizācijas", null, 'Projektu īstenošanas dokumentācija'),
      key: "zi_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta numurs", null, 'Projektu īstenošanas dokumentācija'),
      key: "projekta_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta nosaukums", null, 'Projektu īstenošanas dokumentācija'),
      key: "projekta_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Projekta īstenošanas periods no", null, 'Projektu īstenošanas dokumentācija'),
      key: "projekta_realizacijas_termins_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Projekta īstenošanas periods līdz", null, 'Projektu īstenošanas dokumentācija'),
      key: "projekta_realizacijas_termins_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Dokumenta veids", null, 'Projektu īstenošanas dokumentācija'),
      key: "veids_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Periods no", null, 'Projektu īstenošanas dokumentācija'),
      key: "parskata_datums_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Periods līdz", null, 'Projektu īstenošanas dokumentācija'),
      key: "parskata_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Projektu īstenošanas dokumentācija'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Dokumenta statuss", null, 'Projektu īstenošanas dokumentācija'),
      key: "statuss_nosaukums",
      sortable: "true"
    }],
    default_sort_col: 'projekta_nr',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    catalog_name: gettextCatalog.getString('Projektu īstenošanas dokumentācija', null, 'Projektu īstenošanas dokumentācija'),
    click_function: po.openOverview,
    create_from_temp_function: po.createFromTempOverview,
    "delete": false,
    can_delete_row_function: po.canDeleteOverview,
    bulkDelete: true,
    delete_function: po.deleteOverview,
    "export": false,
    createButtonsIf: po.createButtonsIf,
    createButtons: [{
      title: gettextCatalog.getString('Līgumsummas kalkulācija', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        $state.go('app.project_overview.new', {
          type: 'LS_KALKULACIJA'
        });
      }
    }, {
      title: gettextCatalog.getString('Zinātniskās grupas sastāvs', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        $state.go('app.project_overview.new', {
          type: 'ZIN_GR_SASTAVS'
        });
      }
    }, {
      title: gettextCatalog.getString('Finanšu pārskats', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        $state.go('app.project_overview.new', {
          type: 'FIN_PARSKATS'
        });
      }
    }, {
      title: gettextCatalog.getString('Finansēšanas plāns', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        $state.go('app.project_overview.new', {
          type: 'FIN_PLANS'
        });
      }
    }, {
      title: gettextCatalog.getString('Zinātniskais pārskats', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        var href = null;
        angular.forEach($rootScope.currentUser.arejas_sistemas, function (os) {
          if (os.nosaukums && os.nosaukums.indexOf('LZP') >= 0) {
            href = os.url;
          }
        });

        if (href) {
          $window.open(href, '_blank');
        }
      }
    }, {
      title: gettextCatalog.getString('Saturiskā atskaite', null, 'Projektu īstenošanas dokumentācija'),
      create_function: function create_function() {
        $state.go('app.project_overview.new', {
          type: 'SAT_ATSKAITE'
        });
      }
    }]
  };

  if ($rootScope.currentUserRights.hasOwnProperty('projekta_parskats_list') && $rootScope.currentUserRights['projekta_parskats_list'].indexOf('archive_view') != -1) {
    po.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Projektu īstenošanas dokumentācija'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

angular.module('myApp').controller('RolesController', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification) {
  var rc = this; // function initialization

  var openRole = function openRole(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.roles.edit', {
        id: row.id
      });
    } else {
      $state.go('app.roles.new');
    }
  };

  var deleteRole = function deleteRole(deleteObj) {
    var key;
    var idArr = [];

    for (key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one('data').one('loma', idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function () {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta loma!', null, 'Lomas'));
    }, $scope.handleError);
  };

  rc.openRole = openRole;
  rc.deleteRole = deleteRole;
  rc.gridParams = {
    columns: [{
      text: gettextCatalog.getString('Lomas nosaukums', null, 'Lomas'),
      key: 'nosaukums',
      sortable: 'true'
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    click_function: rc.openRole,
    "delete": false,
    bulkDelete: true,
    delete_function: rc.deleteRole,
    filters: false,
    catalog_name: gettextCatalog.getString('Lomas', null, 'Lomas'),
    create_function: rc.openRole,
    "export": false
  };
}).controller('RolesEditController', function (ngDialog, $scope, $state, $stateParams, dataService, gettextCatalog, Notification, $filter, $http, $rootScope, authService, $timeout) {
  var _rec$transationObj;

  var rec = this;

  var shouldBeChecked = function shouldBeChecked(action, set) {
    var res;
    res = true;
    angular.forEach(rec.apakslomasPlaceholder, function (right, key) {
      if (rec.subRoleList[key].permission && rec.subRoleList[key].permission_set === set && !right[action]) {
        res = false;
      }
    });
    return res;
  };

  var loadPermGrid = function loadPermGrid(userExist) {
    return dataService.getChoices('sub_roles_choice').then(function (data) {
      var key, perm, permData, permSet, rKey, right, srKey;
      rec.subRoleList = {};

      for (permSet in data.data) {
        key = void 0;

        if (data.data[permSet].permission) {
          key = gettextCatalog.getString(data.data[permSet].permission, null, 'Lomas');
        } else {
          key = gettextCatalog.getString(data.data[permSet].permission_set, null, 'Lomas');
        }

        rec.subRoleList[key] = data.data[permSet];

        for (perm in data.data[permSet].permissions) {
          permData = {
            permission_id: data.data[permSet].permissions[perm].permission_id,
            code: data.data[permSet].permissions[perm].code,
            permission_set: data.data[permSet].permission_set
          };

          switch (data.data[permSet].permissions[perm].action) {
            case 'LIST':
              rec.subRoleList[key].list = permData;
              break;

            case 'LABOT':
              rec.subRoleList[key].save = permData;
              break;

            case 'SKATIT':
              rec.subRoleList[key].get = permData;
              break;

            case 'DZEST':
              rec.subRoleList[key]["delete"] = permData;
              break;

            case 'ARCHIVE':
              rec.subRoleList[key].archive = permData;
              break;

            case 'VIEW_ARCHIVED':
              rec.subRoleList[key].view_archived = permData;
              break;

            case 'OTHER':
              rec.subRoleList[key].other = permData;
          }
        }
      }

      if (userExist) {
        for (rKey in rec.role.apakslomas) {
          for (srKey in rec.subRoleList) {
            if (!rec.apakslomasPlaceholder[srKey]) {
              rec.apakslomasPlaceholder[srKey] = {};
            }

            if (rec.subRoleList[srKey]["delete"] && rec.subRoleList[srKey]["delete"].code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey]["delete"] = rec.subRoleList[srKey]["delete"];
            }

            if (rec.subRoleList[srKey].get && rec.subRoleList[srKey].get.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].get = rec.subRoleList[srKey].get;
            }

            if (rec.subRoleList[srKey].list && rec.subRoleList[srKey].list.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].list = rec.subRoleList[srKey].list;
            }

            if (rec.subRoleList[srKey].save && rec.subRoleList[srKey].save.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].save = rec.subRoleList[srKey].save;
            }

            if (rec.subRoleList[srKey].archive && rec.subRoleList[srKey].archive.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].archive = rec.subRoleList[srKey].archive;
            }

            if (rec.subRoleList[srKey].view_archived && rec.subRoleList[srKey].view_archived.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].view_archived = rec.subRoleList[srKey].view_archived;
            }

            if (rec.subRoleList[srKey].other && rec.subRoleList[srKey].other.code === rec.role.apakslomas[rKey].apaksloma) {
              rec.apakslomasPlaceholder[srKey].other = rec.subRoleList[srKey].other;
            }
          }
        }
      }

      for (right in rec.apakslomasPlaceholder) {
        if (!rec.subRoleList[right].permission) {
          rec.apakslomasPlaceholder[right] = {
            "delete": shouldBeChecked('delete', rec.subRoleList[right].permission_set),
            get: shouldBeChecked('get', rec.subRoleList[right].permission_set),
            list: shouldBeChecked('list', rec.subRoleList[right].permission_set),
            save: shouldBeChecked('save', rec.subRoleList[right].permission_set),
            archive: shouldBeChecked('archive', rec.subRoleList[right].permission_set),
            view_archived: shouldBeChecked('view_archived', rec.subRoleList[right].permission_set),
            other: shouldBeChecked('other', rec.subRoleList[right].permission_set)
          };
        }
      }

      rec.role.apakslomasPlaceholder = rec.apakslomasPlaceholder;
      $timeout(function () {
        rec.roleOrigin = angular.copy(rec.role);
      });
    });
  };

  var loadQueryParamGrid = function loadQueryParamGrid(userExist) {
    rec.queryParamList = [];
    angular.forEach(dataService.advancedSearchObject, function (qps, key) {
      rec.queryParamList.push({
        query_param_set: dataService.getGridConfig(key).url,
        set_description: dataService.getGridConfig(key).title
      });
      angular.forEach(qps, function (val2, key2) {
        rec.queryParamList.push({
          query_param_set: dataService.getGridConfig(key).url,
          query_param: key2,
          description: val2.name,
          checked: false
        });
      });
    });

    if (userExist) {
      angular.forEach(rec.queryParamList, function (qp) {
        if (qp.query_param && qp.query_param_set) {
          if ($filter("filter")(rec.role.atl_parametri, {
            atl_parametru_grupa: qp.query_param_set,
            atl_parametrs: qp.query_param
          }).length > 0) {
            qp.checked = true;
          }
        }
      });
    }
  };

  var checkAllQp = function checkAllQp(set, queryParam) {
    if (rec.allowEdit) {
      return;
    }

    var calculateQp = true;
    var checkQps = true;
    angular.forEach(rec.queryParamList, function (qp) {
      if (qp.query_param && (qp.query_param_set == set || !set) && (qp.query_param == queryParam || !queryParam)) {
        if (calculateQp) {
          if (qp.checked) {
            checkQps = false;
          }

          calculateQp = false;
        }

        qp.checked = checkQps;
      }
    });
  };

  var init = function init() {
    return loadData();
  };

  var hasPermissionType = function hasPermissionType(type, set) {
    var res = false;
    angular.forEach(rec.subRoleList, function (right) {
      if (right[type] && right[type].permission_set === set) {
        res = true;
      }
    });
    return res;
  };

  var checkAllRow = function checkAllRow(rowName, rowValues) {
    if (rec.allowEdit) {
      return;
    }

    if (!rec.apakslomasPlaceholder) {
      rec.apakslomasPlaceholder = {};
    }

    if (!rec.apakslomasPlaceholder[rowName] || angular.equals(rec.apakslomasPlaceholder[rowName], {}) || !rec.apakslomasPlaceholder[rowName].get && rec.apakslomasPlaceholder[rowName].get !== void 0 || !rec.apakslomasPlaceholder[rowName].list && rec.apakslomasPlaceholder[rowName].list !== void 0 || !rec.apakslomasPlaceholder[rowName].save && rec.apakslomasPlaceholder[rowName].save !== void 0 || !rec.apakslomasPlaceholder[rowName]["delete"] && rec.apakslomasPlaceholder[rowName]["delete"] !== void 0 || !rec.apakslomasPlaceholder[rowName].archive && rec.apakslomasPlaceholder[rowName].archive !== void 0 || !rec.apakslomasPlaceholder[rowName].view_archived && rec.apakslomasPlaceholder[rowName].view_archived !== void 0 || !rec.apakslomasPlaceholder[rowName].other && rec.apakslomasPlaceholder[rowName].other !== void 0) {
      rec.apakslomasPlaceholder[rowName] = {
        get: rowValues.get,
        list: rowValues.list,
        save: rowValues.save,
        "delete": rowValues["delete"],
        archive: rowValues.archive,
        view_archived: rowValues.view_archived,
        other: rowValues.other
      };
    } else {
      delete rec.apakslomasPlaceholder[rowName];
    }
  };

  var checkBlock = function checkBlock(set) {
    if (rec.allowEdit) {
      return;
    }

    var types = ['get', 'list', 'save', 'delete', 'archive', 'view_archived', 'other'];
    var mustCheck = false;

    if (angular.equals(rec.apakslomasPlaceholder, {})) {
      angular.forEach(rec.subRoleList, function (right, key) {
        rec.apakslomasPlaceholder[key] = {};
      });
      mustCheck = true;
    }

    if (!mustCheck) {
      angular.forEach(rec.apakslomasPlaceholder, function (right, key) {
        for (var type in types) {
          if (rec.subRoleList[key].permission_set === set && !right[types[type]] && right[types[type]] !== void 0) {
            mustCheck = true;
          }
        }
      });
    }

    angular.forEach(rec.apakslomasPlaceholder, function (right, key) {
      if (rec.subRoleList[key].permission_set === set) {
        for (var type in types) {
          if (rec.subRoleList[key].permission) {
            if (mustCheck) {
              right[types[type]] = rec.subRoleList[key][types[type]];
            } else {
              delete right[types[type]];
            }
          } else {
            right[types[type]] = mustCheck;
          }
        }
      }
    });
  };

  var checkAllColl = function checkAllColl(permType, set) {
    if (rec.allowEdit) {
      return;
    }

    var applyPerm = false;

    if (!rec.apakslomasPlaceholder) {
      rec.apakslomasPlaceholder = {};
    }

    for (var key in rec.subRoleList) {
      if ((!rec.apakslomasPlaceholder[key] || !rec.apakslomasPlaceholder[key][permType]) && (rec.subRoleList[key].permission_set === set || !set) && rec.subRoleList[key].permission) {
        applyPerm = true;
        break;
      }
    }

    for (var mKey in rec.subRoleList) {
      if (!set || rec.subRoleList[mKey].permission_set === set) {
        if (applyPerm) {
          if (!rec.apakslomasPlaceholder[mKey]) {
            rec.apakslomasPlaceholder[mKey] = {};
          }

          if (!rec.subRoleList[mKey][permType]) {
            rec.subRoleList[mKey][permType] = true;
          }

          rec.apakslomasPlaceholder[mKey][permType] = rec.subRoleList[mKey][permType];
        } else {
          if (Object.keys(rec.apakslomasPlaceholder[mKey]).length === 1) {
            delete rec.apakslomasPlaceholder[mKey];
          } else {
            delete rec.apakslomasPlaceholder[mKey][permType];
          }
        }
      }
    }
  };

  var loadData = function loadData() {
    if ($stateParams.id) {
      rec.title = gettextCatalog.getString('Loma', null, 'Lomas');
      dataService.getDefaultById($stateParams.id, 'loma').then(function (data) {
        rec.role = data;
        rec.loadPermGrid(true);
        rec.loadQueryParamGrid(true);
      });
    } else {
      rec.title = gettextCatalog.getString('Pievienot lomu', null, 'Lomas');
      rec.loadPermGrid();
      rec.loadQueryParamGrid();
      rec.allowEdit = false;
    }
  };

  var updatePrintTabTitle = function updatePrintTabTitle() {
    $timeout(function () {
      var i;
      i = 0;

      while (rec.tabs.length > i) {
        if (rec.tabs[i].active) {
          rec.currentTitle = rec.tabs[i].head;
          break;
        }

        i++;
      }
    });
  };

  var resetRole = function resetRole() {
    rec.role = angular.copy(rec.roleOrigin);
  };

  var saveRole = function saveRole(lock) {
    var key, pKey;

    if (!lock) {
      rec.role.apakslomas = [];

      for (key in rec.apakslomasPlaceholder) {
        for (pKey in rec.apakslomasPlaceholder[key]) {
          if (rec.apakslomasPlaceholder[key][pKey] && rec.apakslomasPlaceholder[key][pKey].code) {
            rec.role.apakslomas.push({
              permission_id: rec.subRoleList[key][pKey].permission_id
            });
          }
        }
      }

      rec.role.atl_parametri = [];
      angular.forEach(rec.queryParamList, function (qp) {
        if (qp.query_param && qp.query_param_set && qp.checked) {
          rec.role.atl_parametri.push({
            atl_parametru_grupa: qp.query_param_set,
            atl_parametrs: qp.query_param
          });
        }
      });
      dataService.saveDefault(rec.role, 'loma').then(function (data) {
        $rootScope.allowPrint = true;

        if (rec.role.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota loma!', null, 'Lomas'));
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienota loma!', null, 'Lomas'));
        }

        authService.loadPerms();
        $state.go('app.roles.edit', {
          id: data.data.id
        });
        rec.allowEdit = true;
      });
    }
  };

  var editRole = function editRole() {
    rec.allowEdit = false;
  };

  rec.role = {};
  rec.roleOrigin = {};
  rec.allowEdit = true;
  rec.currentTitle = null;
  rec.resetRole = resetRole;
  rec.updatePrintTabTitle = updatePrintTabTitle;
  rec.checkAllRow = checkAllRow;
  rec.checkAllColl = checkAllColl;
  rec.checkAllQp = checkAllQp;
  rec.apakslomasPlaceholder = {};
  rec.hasPermissionType = hasPermissionType;
  rec.shouldBeChecked = shouldBeChecked;
  rec.checkBlock = checkBlock; // tabs

  rec.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Lomas'),
    active: true
  }, {
    id: 'queryParamsDataTab',
    head: gettextCatalog.getString('Katalogu filtri', null, 'Lomas'),
    active: false
  }]; // functions

  rec.loadData = loadData;
  rec.saveRole = saveRole;
  rec.editRole = editRole;
  rec.loadPermGrid = loadPermGrid;
  rec.loadQueryParamGrid = loadQueryParamGrid;
  rec.transationObj = (_rec$transationObj = {
    'AKAD_PERSONALS': gettextCatalog.getString('Lomas "AKAD. PERSONALS" apraksts', null, 'Lomas'),
    'INSTITUCIJA': gettextCatalog.getString('Lomas "INSTITUCIJA" apraksts', null, 'Lomas'),
    'LIETOTAJS': gettextCatalog.getString('Lomas "LIETOTAJS" apraksts', null, 'Lomas'),
    'PERSONALS': gettextCatalog.getString('Lomas "PERSONALS" apraksts', null, 'Lomas'),
    'PROJEKTS': gettextCatalog.getString('Lomas "PROJEKTS" apraksts', null, 'Lomas'),
    'ZINATNES_NOZARE': gettextCatalog.getString('Lomas "ZINATNES NOZARE" apraksts', null, 'Lomas'),
    'ZI_PARSKATS': gettextCatalog.getString('Lomas "ZIN. PARSKATS" apraksts', null, 'Lomas'),
    'PROJEKTA_PARSKATS': gettextCatalog.getString('Lomas "PROJEKTA PARSKATS" apraksts', null, 'Lomas'),
    'ZIN_PERSONALS': gettextCatalog.getString('Lomas "ZIN. PERSONALS" apraksts', null, 'Lomas'),
    'ZIN_REZULTATS': gettextCatalog.getString('Lomas "ZIN. REZULTATS" apraksts', null, 'Lomas'),
    'METADATI_CHOICES': gettextCatalog.getString('Lomas "METADATI CHOICES" apraksts', null, 'Lomas'),
    'SISTEMA_ADMINISTRET': gettextCatalog.getString('Lomas "SISTEMA ADMINISTRET" apraksts', null, 'Lomas'),
    'VESTURE': gettextCatalog.getString('Lomas "VESTURE" apraksts', null, 'Lomas'),
    'PERSONALS_SKATIT_VISU': gettextCatalog.getString('Lomas "PERSONALS SKATIT VISU" apraksts', null, 'Lomas'),
    'VIIS_INTEGR': gettextCatalog.getString('Lomas "VIIS INTEGR" apraksts', null, 'Lomas'),
    'IMPORTA_APSKATE': gettextCatalog.getString('Lomas "IMPORTA APSKATE" apraksts', null, 'Lomas'),
    'IMPORTA_APSTIPRINASANA': gettextCatalog.getString('Lomas "IMPORTA APSTIPRINASANA" apraksts', null, 'Lomas')
  }, _defineProperty(_rec$transationObj, "VESTURE", gettextCatalog.getString('Lomas "VESTURE" apraksts', null, 'Lomas')), _defineProperty(_rec$transationObj, "VESTURE", gettextCatalog.getString('Lomas "LIGUMPROJEKTS" apraksts', null, 'Lomas')), _defineProperty(_rec$transationObj, 'ZI_PGP', gettextCatalog.getString('Lomas "ZIN. PGP" apraksts', null, 'Lomas')), _rec$transationObj);
  init();
});
/**
 * @name lzp_controller
 * @description Saraksts "LZP zinatnes nozare"
 * @param  {string} url /data/zinatnes_nozare_lzp_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('LZPController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope) {
  var lzp = this;
  lzp.person = null;
  lzp.allowEdit = false;
  lzp.collapsePhoneData = true; // function initialization

  lzp.openLzp = openLzp;
  lzp.deleteLzp = deleteLzp;

  function deleteLzp(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("zinatnes_nozare_lzp", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts LZP zinātnisko nozaru klasifikators!', null, 'Zinātņu nozares'));
      return true;
    }, $scope.handleError);
  }

  function openLzp(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.sci_branch_lzp.edit', {
        id: row.id
      });
    } else {
      $state.go('app.sci_branch_lzp.new');
    }
  }

  lzp.gridParams = {
    columns: [{
      text: gettextCatalog.getString("LZP kods", null, 'Zinātņu nozares'),
      key: "kods_lzp",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("LZP nozare", null, 'Zinātņu nozares'),
      key: "zinatnes_nozare",
      sortable: "true"
    }],
    default_sort_col: 'kods_lzp',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: lzp.openLzp,
    "delete": false,
    bulkDelete: true,
    delete_function: lzp.deleteLzp,
    create_function: lzp.openLzp,
    catalog_name: gettextCatalog.getString('LZP Zinātnisko nozaru klasifikators', null, 'Zinātņu nozares'),
    "export": false
  };
}]);
/**
 * @name lzp_form
 * @description "LZP zinatnes nozare" forma
 * @param  {string} url /data/zinatnes_nozare_lzp/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('LZPEditController', ['ngDialog', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$timeout', '$rootScope', function (ngDialog, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $timeout, $rootScope) {
  var lzpe = this;
  lzpe.dataObj = null;
  lzpe.dataObjOrigin = null;
  lzpe.allowEdit = true;
  lzpe.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Zinātņu nozares'),
    active: true
  }]; // functions

  lzpe.loadData = loadData;
  lzpe.saveData = saveData;
  lzpe.resetData = resetData;

  function init() {
    dataOp.getChoices('science_branch_full').then(function (data) {
      lzpe.science_branch = data.data;
    });
    lzpe.loadData();
  }

  function loadData() {
    if ($stateParams.id) {
      lzpe.title = gettextCatalog.getString('LZP Zinātnisko nozaru klasifikators', null, 'Zinātņu nozares');
      dataOp.getDefaultById($stateParams.id, 'zinatnes_nozare_lzp').then(function (data) {
        if (data.science_branch_id) {
          data.science_branch_id = data.science_branch_id;
        }

        lzpe.dataObj = data;
        $timeout(function () {
          lzpe.dataObjOrigin = angular.copy(lzpe.dataObj);
        });
      });
    } else {
      lzpe.title = gettextCatalog.getString('Pievienot LZP Zinātnisko nozaru klasifikatoru', null, 'Zinātņu nozares');
      lzpe.allowEdit = false;
      lzpe.dataObj = {};
    }
  }

  function saveData(lock) {
    if (!lock) {
      dataOp.saveDefault(lzpe.dataObj, 'zinatnes_nozare_lzp').then(function (data) {
        $rootScope.allowPrint = true;

        if (lzpe.dataObj.id) {
          Notification.success(gettextCatalog.getString('Klasifikators veiksmīgi saglabāts!', null, 'Zinātņu nozares'));
          lzpe.dataObjOrigin = angular.copy(lzpe.dataObj);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots klasifikators!', null, 'Zinātņu nozares'));
          $state.go('app.sci_branch_lzp.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function resetData() {
    lzpe.dataObj = angular.copy(lzpe.dataObjOrigin);
  }

  init();
}]);
/**
 * @name scientific_action_form
 * @description Forma "Zinātniskās darbības rezultāti"
 * @param  {string} url /data/zin_rezultats_veids_{type}/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificActionResultsEditController', ['ngDialog', 'Select2Data', 'SearchPerson', 'UploadService', '$timeout', 'Upload', 'Restangular', '$scope', '$window', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$rootScope', 'gettextUtil', '$cookies', function (ngDialog, Select2Data, SearchPerson, UploadService, $timeout, Upload, Restangular, $scope, $window, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $rootScope, gettextUtil, $cookies) {
  var sarf = this;
  $scope.allowEdit = true;
  sarf.resData = {
    apaksnozares: []
  };
  sarf.resData = null;
  sarf.resDataOrigin = null;
  sarf.contact_data = [];
  sarf.reg_apliecibas_datums_edit = false;
  sarf.registracijas_datums_edit = false;
  sarf.idsToUnarchive = [];
  sarf.formats = ['dd.MM.yyyy'];
  sarf.dateFormat = sarf.formats[0];
  sarf.formType = null; // tabs

  sarf.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Rezultāti'),
    active: true
  }, {
    id: 'formType1DataTab',
    head: gettextCatalog.getString('Zinātniskais raksts, monogrāfija', null, 'Rezultāti'),
    active: false
  }, {
    id: 'formType2DataTab',
    head: gettextCatalog.getString('Intelektuālais īpašums', null, 'Rezultāti'),
    active: false
  }, {
    id: 'formType3DataTab',
    head: gettextCatalog.getString('Ar zinātni saistīts pasākums', null, 'Rezultāti'),
    active: false
  }, {
    id: 'attachmentDataTab',
    head: gettextCatalog.getString('Pielikums', null, 'Rezultāti'),
    active: false
  }];

  if (typeof $state.params != 'undefined' && typeof $state.params.type != 'undefined') {
    sarf.formType = $state.params.type;
  } // functions


  sarf.loadData = loadData;
  sarf.scientificActioResults = scientificActioResults;
  sarf.setEditMode = setEditMode;
  sarf.resetScientific = resetScientific;
  sarf.UploadService = UploadService;
  sarf.discardUserData = discardUserData;
  sarf.searchPersonByPersonalCode = searchPersonByPersonalCode;
  sarf.loadUserData = loadUserData;
  sarf.updatePrintTabTitle = updatePrintTabTitle;
  sarf.processData = processData;
  sarf.openHomepage = openHomepage;
  sarf.openZinRez = openZinRez;
  sarf.addAuthor = addAuthor;
  sarf.addInstitution = addInstitution;
  sarf.removeInstitution = removeInstitution;
  sarf.addMeToAuthorList = addMeToAuthorList;
  sarf.checkMeAsAuthor = checkMeAsAuthor;
  sarf.isSimilar = isSimilar;
  sarf.isOwner = isOwner;
  sarf.isMe = isMe;
  sarf.isLockable = isLockable;
  sarf.hasReqSciBranches = hasReqSciBranches;
  sarf.showPersonData = showPersonData;
  sarf.swapWithPreviousAuthor = swapWithPreviousAuthor;
  sarf.swapWithNextAuthor = swapWithNextAuthor;
  sarf.swapWithPreviousInstitution = swapWithPreviousInstitution;
  sarf.swapWithNextInstitution = swapWithNextInstitution;
  sarf.checkAuthorInstitutions = checkAuthorInstitutions;
  sarf.updateAuthorInstitutionList = updateAuthorInstitutionList;
  sarf.isDifferentName = isDifferentName;
  sarf.isDifferentSurname = isDifferentSurname;
  sarf.normalizeNameSurname = normalizeNameSurname;
  sarf.handleDuplicateAuthors = handleDuplicateAuthors;
  sarf.isCtxInstitution = isCtxInstitution;
  sarf.isSameInstitution = isSameInstitution;
  sarf.contactInfoTypes = null;
  sarf.scientificInstitutions = null;
  sarf.scienceRootBranches = null;
  sarf.projectList = null;
  sarf.articleTypes = null;
  sarf.intellectualTypes = null;
  sarf.eventScale = null;
  sarf.countries = null;
  sarf.progress = 100;
  sarf.files = null;
  sarf.personsFound = null;
  sarf.currentTitle = null;

  function isCtxInstitution(iId) {
    var context = dataOp.getContext();
    var flag = false;

    if (context == -1) {
      flag = true;
    }

    if (iId && context != -1) {
      flag = iId == context.id;
    }

    return flag;
  }

  function normalizeNameSurname(s) {
    if (s) {
      var r = s.toLowerCase();
      r = r.replace(/["':;,.\-]/g, "");
      r = r.replace(/[àáâãäåā]/g, "a");
      r = r.replace(/æ/g, "ae");
      r = r.replace(/[çč]/g, "c");
      r = r.replace(/[èéêëē]/g, "e");
      r = r.replace(/[ģ]/g, "g");
      r = r.replace(/[ìíîïī]/g, "i");
      r = r.replace(/[ķ]/g, "k");
      r = r.replace(/[ļ]/g, "l");
      r = r.replace(/[ñņ]/g, "n");
      r = r.replace(/[òóôõö]/g, "o");
      r = r.replace(/œ/g, "oe");
      r = r.replace(/[š]/g, "s");
      r = r.replace(/[ùúûüū]/g, "u");
      r = r.replace(/[ýÿ]/g, "y");
      r = r.replace(/[ž]/g, "z");
      return r;
    } else {
      return s;
    }
  }

  function isDifferentName(ns1, ns2) {
    if (ns1 && !ns2 || !ns1 && ns2) {
      return true;
    } else if (!ns1 && !ns2) {
      return false;
    } else {
      nsTmp1 = normalizeNameSurname(ns1).substring(0, 1);
      nsTmp2 = normalizeNameSurname(ns2).substring(0, 1);
      return nsTmp1 != nsTmp2;
    }
  }

  function isDifferentSurname(ns1, ns2) {
    if (ns1 && !ns2 || !ns1 && ns2) {
      return true;
    } else if (!ns1 && !ns2) {
      return false;
    } else {
      nsTmp1 = normalizeNameSurname(ns1);
      nsTmp2 = normalizeNameSurname(ns2);
      return nsTmp1 != nsTmp2;
    }
  }

  function updateAuthorInstitutionList() {
    sarf.authInstitutionDataWrapper.data = [];

    for (var j = 0; sarf.resData.zin_rezultatu_institucijas.length > j; j++) {
      if (sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.id) {
        var d = {
          id: sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.id,
          text: sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.text
        };
        sarf.authInstitutionDataWrapper.data.push(d);
      } else if (sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.text) {
        var d = {
          id: -10 * j - 2,
          text: sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.text
        };
        sarf.authInstitutionDataWrapper.data.push(d);
      }
    }
  }

  function checkAuthorInstitutions() {
    sarf.resData.auth_inst_refs_ok = true;

    for (var i = 0; sarf.resData.zin_rezultatu_autori.length > i; i++) {
      sarf.resData.zin_rezultatu_autori[i].inst_ref_ok = false;

      if (!sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj) {
        sarf.resData.zin_rezultatu_autori[i].inst_ref_ok = true;
      } else {
        if (sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj.id) {
          for (var j = 0; sarf.resData.zin_rezultatu_institucijas.length > j; j++) {
            if (sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.id) {
              if (sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj.id == sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.id) {
                sarf.resData.zin_rezultatu_autori[i].inst_ref_ok = true;
              }
            }
          }
        } else if (sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj.text && sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj.text.length > 0) {
          for (var j = 0; sarf.resData.zin_rezultatu_institucijas.length > j; j++) {
            if (!sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.id) {
              if (sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj.text == sarf.resData.zin_rezultatu_institucijas[j].sci_institution_select_obj.text) {
                sarf.resData.zin_rezultatu_autori[i].inst_ref_ok = true;
              }
            }
          }
        } else {
          sarf.resData.zin_rezultatu_autori[i].inst_ref_ok = true;
        }
      }

      if (!sarf.resData.zin_rezultatu_autori[i].inst_ref_ok) {
        sarf.resData.auth_inst_refs_ok = false;
      }
    }
  }

  function swapWithPreviousAuthor(idx) {
    if (idx > 0) {
      var o = sarf.resData.zin_rezultatu_autori[idx];
      sarf.resData.zin_rezultatu_autori[idx] = sarf.resData.zin_rezultatu_autori[idx - 1];
      sarf.resData.zin_rezultatu_autori[idx - 1] = o;
    }
  }

  function swapWithNextAuthor(idx) {
    if (idx < sarf.resData.zin_rezultatu_autori.length - 1) {
      var o = sarf.resData.zin_rezultatu_autori[idx];
      sarf.resData.zin_rezultatu_autori[idx] = sarf.resData.zin_rezultatu_autori[idx + 1];
      sarf.resData.zin_rezultatu_autori[idx + 1] = o;
    }
  }

  function swapWithPreviousInstitution(idx) {
    if (idx > 0) {
      var o = sarf.resData.zin_rezultatu_institucijas[idx];
      sarf.resData.zin_rezultatu_institucijas[idx] = sarf.resData.zin_rezultatu_institucijas[idx - 1];
      sarf.resData.zin_rezultatu_institucijas[idx - 1] = o;
    }
  }

  function swapWithNextInstitution(idx) {
    if (idx < sarf.resData.zin_rezultatu_institucijas.length - 1) {
      var o = sarf.resData.zin_rezultatu_institucijas[idx];
      sarf.resData.zin_rezultatu_institucijas[idx] = sarf.resData.zin_rezultatu_institucijas[idx + 1];
      sarf.resData.zin_rezultatu_institucijas[idx + 1] = o;
    }
  }

  function showPersonData(pId) {
    $state.go('app.personal.edit', {
      id: pId
    });
  }

  function hasReqSciBranches() {
    var hasReqBranches = true;

    if (sarf.resData && (!sarf.resData.apaksnozares || sarf.resData.apaksnozares.length <= 0)) {
      hasReqBranches = false;
    }

    return hasReqBranches;
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; sarf.tabs.length > i; i++) {
        if (sarf.tabs[i].active) {
          sarf.currentTitle = sarf.tabs[i].head;
          break;
        }
      }
    });
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function openZinRez(id) {
    $state.go('app.scientific_action_results.edit', {
      id: id,
      type: $stateParams.type
    });
  }

  function init() {
    sarf.scientificInstitutions = new Select2Data('choices', 'institutions');
    sarf.authInstitutionDataWrapper = {
      data: []
    };
    sarf.scientificInstitutions2 = new Select2Data('array', null, sarf.authInstitutionDataWrapper);
    dataOp.getChoices('science_branch_full').then(function (data) {
      sarf.scienceRootBranches = data.data;
    });
    sarf.projectList = new Select2Data('choices', 'projects');
    sarf.articleTypes = new Select2Data('codificator', 'article_type');
    sarf.intellectualTypes = new Select2Data('codificator', 'intellectual_property_type');
    sarf.intellectualForm = new Select2Data('codificator', 'intellectual_property_form');
    dataOp.getCodificator('event_scale').then(function (data) {
      sarf.eventScale = data.data;
    });
    dataOp.getCodificator('countries').then(function (data) {
      sarf.countries = data.data;
    });
    dataOp.getCodificator('event_type').then(function (data) {
      sarf.eventTypes = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.zinatnes_nozare_id) {
      data.zinatnes_nozare_id = data.zinatnes_nozare_id.toString();
    }

    if (data.projekts_id) {
      data.project_select_obj = {
        id: data.projekts_id,
        text: data.projekts_nosaukums
      };
    }

    if (data.izdosanas_gads) {
      data.izdosanas_gads = parseInt(data.izdosanas_gads);
    }

    if (data.registracijas_datums) {
      data.registracijas_datums = new Date(data.registracijas_datums);
    }

    if (data.registracija_lidz) {
      data.registracija_lidz = new Date(data.registracija_lidz);
    }

    if (data.intelektuala_ipasuma_tips_id) {
      data.intelektuala_ipasuma_tips_select_obj = {
        id: data.intelektuala_ipasuma_tips_id,
        text: data.intelektuala_ipasuma_tips_nosaukums
      };
    }

    if (data.tips_id) {
      data.tips_id = data.tips_id.toString();
      data.tips_select_obj = {
        id: data.tips_id
      };

      if (data.tips_nosaukums) {
        data.tips_select_obj.text = data.tips_nosaukums;
      }

      if (data.tips) {
        data.tips_select_obj.text = data.tips;
      }
    }

    if (data.intelektuala_ipasuma_veids_id) {
      data.intelektuala_ipasuma_veids_id = data.intelektuala_ipasuma_veids_id.toString();
      data.intelektuala_ipasuma_veids_select_obj = {
        id: data.intelektuala_ipasuma_veids_id
      };

      if (data.intelektuala_ipasuma_veids_nosaukums) {
        data.intelektuala_ipasuma_veids_select_obj.text = data.intelektuala_ipasuma_veids_nosaukums;
      }

      if (data.intelektuala_ipasuma_veids) {
        data.intelektuala_ipasuma_veids_select_obj.text = data.intelektuala_ipasuma_veids;
      }
    }

    if (data.konference_no) {
      data.konference_no = new Date(data.konference_no);
    }

    if (data.konference_lidz) {
      data.konference_lidz = new Date(data.konference_lidz);
    }

    if (data.merogs_id) {
      data.merogs_id = data.merogs_id.toString();
    }

    if (data.norises_valsts_id) {
      data.norises_valsts_id = data.norises_valsts_id.toString();
    }

    if (data.pasakums_veids_id) {
      data.pasakums_veids_id = data.pasakums_veids_id.toString();
    }

    var context = dataOp.getContext();

    if (data.zin_rezultatu_institucijas && data.zin_rezultatu_institucijas.length) {
      for (var i = 0; data.zin_rezultatu_institucijas.length > i; i++) {
        if (data.zin_rezultatu_institucijas[i].zin_institucija_id) {
          data.zin_rezultatu_institucijas[i].sci_institution_select_obj = {
            id: data.zin_rezultatu_institucijas[i].zin_institucija_id,
            text: data.zin_rezultatu_institucijas[i].zin_institucija_nosaukums
          };

          if (context != -1 && data.zin_rezultatu_institucijas[i].zin_institucija_id == context.id) {
            data.zin_rezultatu_institucijas[i].ir_ctx_institucija = true;
          }
        } else {
          data.zin_rezultatu_institucijas[i].sci_institution_select_obj = {
            id: null,
            text: data.zin_rezultatu_institucijas[i].zin_institucija_cits ? data.zin_rezultatu_institucijas[i].zin_institucija_cits : ' '
          };
        }
      }
    } else {
      data.zin_rezultatu_institucijas = [];
    }

    if (data.zin_rezultatu_autori && data.zin_rezultatu_autori.length) {
      for (var i = 0; data.zin_rezultatu_autori.length > i; i++) {
        if (data.zin_rezultatu_autori[i].zin_institucija_id) {
          data.zin_rezultatu_autori[i].sci_institution_select_obj = {
            id: data.zin_rezultatu_autori[i].zin_institucija_id,
            text: data.zin_rezultatu_autori[i].zin_institucija_nosaukums
          };
        } else {
          data.zin_rezultatu_autori[i].sci_institution_select_obj = {
            id: null,
            text: data.zin_rezultatu_autori[i].zin_institucija_cits ? data.zin_rezultatu_autori[i].zin_institucija_cits : ''
          };
        }
      }
    } else {
      data.zin_rezultatu_autori = [];
    }

    if (data.pielikumi && data.pielikumi.length) {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    } else {
      data.pielikumi = [];
    }

    data.apv_zin_rez_ids = [];

    if (data.merged_zin_rez_ids) {
      var tmp = data.merged_zin_rez_ids.split(',');
      angular.forEach(tmp, function (t) {
        if (t && t.trim().length > 0) {
          data.apv_zin_rez_ids.push(t.trim());
        }
      });
    }

    sarf.resData = data;
    sarf.checkAuthorInstitutions();
    sarf.updateAuthorInstitutionList();
    sarf.isSameInstitution();
    $timeout(function () {
      sarf.resDataOrigin = angular.copy(sarf.resData);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      sarf.title = gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Rezultāti');
      dataOp.getDefaultById($stateParams.id, 'zin_rezultats_veids_' + $stateParams.type).then(function (data) {
        sarf.processData(data);
      });
    } else {
      sarf.title = gettextCatalog.getString('Pievienot zinātniskās darbības rezultātu', null, 'Rezultāti');
      $scope.allowEdit = false;

      if (!$rootScope.perms.save.zin_rezultats_base && $rootScope.perms.save.zin_rezultats_piev_manu_rez) {
        sarf.resData = {
          veids: $stateParams.type,
          nosaukums: $stateParams.nosaukums,
          izdosanas_gads: $stateParams.izdosanas_gads,
          registracijas_datums: $stateParams.registracijas_datums,
          konference_no: $stateParams.konference_no,
          konference_lidz: $stateParams.konference_lidz,
          pielikumi: [],
          zin_rezultatu_autori: [{
            personals_id: $rootScope.currentUser.person_id,
            vards_tmp: $rootScope.currentUser.vards,
            uzvards_tmp: $rootScope.currentUser.uzvards,
            vards: $rootScope.currentUser.vards,
            uzvards: $rootScope.currentUser.uzvards
          }],
          apaksnozares: [],
          zin_rezultatu_institucijas: [],
          created_by_id: $rootScope.currentUser.id
        };
      } else {
        sarf.resData = {
          veids: $stateParams.type,
          nosaukums: $stateParams.nosaukums,
          izdosanas_gads: $stateParams.izdosanas_gads,
          registracijas_datums: $stateParams.registracijas_datums,
          konference_no: $stateParams.konference_no,
          konference_lidz: $stateParams.konference_lidz,
          pielikumi: [],
          zin_rezultatu_autori: [],
          apaksnozares: [],
          zin_rezultatu_institucijas: [],
          created_by_id: $rootScope.currentUser.id
        };
      }

      var context = dataOp.getContext();

      if (context != -1) {
        dataOp.getChoices('institutions', {
          id: context.id
        }).then(function (data) {
          if (data.data[0]) {
            var d = {};
            d.sci_institution_select_obj = {
              id: data.data[0].id,
              text: data.data[0].title
            };
            d.ir_ctx_institucija = true;
            sarf.resData.zin_rezultatu_institucijas.push(d);
            sarf.checkAuthorInstitutions();
            sarf.updateAuthorInstitutionList();
          }
        });
      }

      sarf.checkAuthorInstitutions();
      sarf.updateAuthorInstitutionList();
    }
  }

  function scientificActioResults(lock) {
    if (!lock) {
      if (sarf.resData.zin_rezultatu_institucijas && sarf.resData.zin_rezultatu_institucijas.length) {
        for (var i = 0; sarf.resData.zin_rezultatu_institucijas.length > i; i++) {
          var data = sarf.resData.zin_rezultatu_institucijas[i];

          if (data.sci_institution_select_obj) {
            if (data.sci_institution_select_obj.id) {
              data.zin_institucija_id = data.sci_institution_select_obj.id;
              data.zin_institucija_cits = null;
            } else {
              data.zin_institucija_id = null;
              data.zin_institucija_cits = data.sci_institution_select_obj.text;
            }
          }

          data.seciba = i + 1;
        }
      }

      if (sarf.resData.intelektuala_ipasuma_tips_select_obj && sarf.resData.intelektuala_ipasuma_tips_select_obj.id) {
        sarf.resData.intelektuala_ipasuma_tips_id = sarf.resData.intelektuala_ipasuma_tips_select_obj.id;
      }

      if (sarf.resData.veids) {
        sarf.resData.veids = sarf.resData.veids.toString();
      }

      if (sarf.resData.zin_rezultatu_autori && sarf.resData.zin_rezultatu_autori.length) {
        for (var i = 0; sarf.resData.zin_rezultatu_autori.length > i; i++) {
          if (sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj) {
            var data = sarf.resData.zin_rezultatu_autori[i];

            if (data.sci_institution_select_obj) {
              if (data.sci_institution_select_obj.id) {
                data.zin_institucija_id = data.sci_institution_select_obj.id;
                data.zin_institucija_cits = null;
              } else {
                data.zin_institucija_id = null;
                data.zin_institucija_cits = data.sci_institution_select_obj.text;
              }
            }
          }

          data.seciba = i + 1;
        }
      }

      if (sarf.resData.project_select_obj) {
        sarf.resData.projekts_id = sarf.resData.project_select_obj.id;
      }

      if (sarf.resData.tips_select_obj) {
        sarf.resData.tips_id = sarf.resData.tips_select_obj.id;
      }

      if (sarf.resData.intelektuala_ipasuma_veids_select_obj) {
        sarf.resData.intelektuala_ipasuma_veids_id = sarf.resData.intelektuala_ipasuma_veids_select_obj.id;
      }

      angular.forEach(sarf.resData.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      saveScientificResult0();
    }
  }

  function saveScientificResult0() {
    if (sarf.resData.zin_rezultatu_autori && sarf.resData.zin_rezultatu_autori.length) {
      var foundI = -1;
      var foundJ = -1;
      var showReplaceBtn = true;

      for (var i = 0; sarf.resData.zin_rezultatu_autori.length > i; i++) {
        if (!sarf.resData.zin_rezultatu_autori[i].id && !sarf.resData.zin_rezultatu_autori[i].resolved) {
          var data1 = sarf.resData.zin_rezultatu_autori[i];

          for (var j = 0; sarf.resData.zin_rezultatu_autori.length > j; j++) {
            var data2 = sarf.resData.zin_rezultatu_autori[j];

            if (i != j) {
              if (!isDifferentName(data1.vards, data2.vards) && !isDifferentSurname(data1.uzvards, data2.uzvards)) {
                foundI = i;
                foundJ = j;

                if (data2.personals_id) {
                  showReplaceBtn = false;
                }
              }
            }
          }
        }
      }

      if (foundI >= 0 && foundJ >= 0) {
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-a-duplicates.html',
          scope: $scope,
          data: {
            autori: sarf.resData.zin_rezultatu_autori,
            i: foundI,
            j: foundJ,
            showReplaceBtn: showReplaceBtn,
            vards: sarf.resData.zin_rezultatu_autori[foundI].vards,
            uzvards: sarf.resData.zin_rezultatu_autori[foundI].uzvards
          }
        });
        return;
      } else {
        saveScientificResult2();
      }
    } else {
      saveScientificResult2();
    }
  }

  function handleDuplicateAuthors(i, j, a) {
    if (sarf.resData.zin_rezultatu_autori && sarf.resData.zin_rezultatu_autori.length) {
      if (a == 1) {
        if (sarf.resData.zin_rezultatu_autori.length > i) {
          sarf.resData.zin_rezultatu_autori[i].resolved = true;
        }

        if (sarf.resData.zin_rezultatu_autori.length > j) {
          sarf.resData.zin_rezultatu_autori[j].resolved = true;
        }
      } else if (a == 2) {
        if (sarf.resData.zin_rezultatu_autori.length > j) {
          sarf.resData.zin_rezultatu_autori.splice(j, 1);
        }
      } else if (a == 3) {
        if (sarf.resData.zin_rezultatu_autori.length > i) {
          sarf.resData.zin_rezultatu_autori.splice(i, 1);
        }
      }
    }

    saveScientificResult0();
  }

  function saveScientificResult2() {
    var saveViewBase = 'zin_rezultats_veids_';

    if (!$rootScope.perms.save.zin_rezultats_base && $rootScope.perms.save.zin_rezultats_atz_ka_autoru) {
      saveViewBase = 'zin_rezultats_atz_ka_autoru_veids_';
    } else if (!$rootScope.perms.save.zin_rezultats_base && $rootScope.perms.save.zin_rezultats_piev_manu_rez) {
      saveViewBase = 'zin_rezultats_piev_manu_rez_veids_';
    }

    dataOp.saveScientificResultById(sarf.resData, saveViewBase).then(function (data) {
      $rootScope.allowPrint = true;
      angular.forEach(sarf.resData.zin_rezultatu_autori, function (aut) {
        if (aut.personals_id && aut.archiving_date) {
          dataOp.ArchiveData('personals', {
            id: aut.personals_id
          });
        }
      });

      if (sarf.resData.id) {
        Notification.success(gettextCatalog.getString('Veiksmīgi laboti zinātniskās darbības rezultāti!', null, 'Rezultāti'));
        $state.reload();
      } else {
        Notification.success(gettextCatalog.getString('Veiksmīgi pievienoti zinātniskās darbības rezultāti!', null, 'Rezultāti'));
        $state.go('app.scientific_action_results.edit', {
          id: data.data.id,
          type: sarf.resData.veids
        });
      }
    }, $scope.handleError);
  }

  function resetScientific() {
    $scope.allowEdit = true;
    sarf.resData = angular.copy(sarf.resDataOrigin);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function isSameInstitution() {
    if (sarf.resData) {
      var v = false;
      var context = $rootScope.u.context;

      if (sarf.resData.zin_rezultatu_institucijas && sarf.resData.zin_rezultatu_institucijas.length) {
        for (var i = 0; sarf.resData.zin_rezultatu_institucijas.length > i; i++) {
          var institucijasNosaukums = sarf.resData.zin_rezultatu_institucijas[i].zin_institucija_nosaukums;

          if (institucijasNosaukums == $rootScope.u.contextName | !context.startsWith('zi_')) {
            v = true;
          }
        }
      }

      return v;
    }
  }

  function loadUserData(personsFound, i) {
    sarf.resData.zin_rezultatu_autori[i].vards_tmp = personsFound.vards;
    sarf.resData.zin_rezultatu_autori[i].uzvards_tmp = personsFound.uzvards;
    sarf.resData.zin_rezultatu_autori[i].vards = personsFound.vards;
    sarf.resData.zin_rezultatu_autori[i].uzvards = personsFound.uzvards;
    sarf.resData.zin_rezultatu_autori[i].archiving_date = personsFound.archiving_date;
    sarf.resData.zin_rezultatu_autori[i].personals_id = personsFound.id.toString();
  }

  function discardUserData(personsFound, i) {
    sarf.resData.zin_rezultatu_autori.splice(i, 1);
    sarf.resData.zin_rezultatu_autori.push({});
  }

  function searchPersonByPersonalCode(code, index) {
    var userIds = [];
    var showDialog = false;

    for (var key in sarf.resData.zin_rezultatu_autori) {
      if (sarf.resData.zin_rezultatu_autori[key].personals_id) {
        userIds.push(sarf.resData.zin_rezultatu_autori[key].personals_id.toString());
      }

      if (sarf.resData.zin_rezultatu_autori[key].personas_kods == code) {
        delete sarf.resData.zin_rezultatu_autori[key].personals_id;
      }
    }

    SearchPerson.search(code, userIds, sarf.loadUserData, sarf.discardUserData, showDialog, index).then(function (data) {
      if (sarf.resData.zin_rezultatu_autori[index].personas_kods.length < 11 && sarf.resData.zin_rezultatu_autori[index].personals_id !== null && (data === null || typeof data === 'undefined')) {
        sarf.resData.zin_rezultatu_autori[index].personals_id = null;
        sarf.resData.zin_rezultatu_autori[index].vards_tmp = null;
        sarf.resData.zin_rezultatu_autori[index].uzvards_tmp = null;
        sarf.resData.zin_rezultatu_autori[index].vards = null;
        sarf.resData.zin_rezultatu_autori[index].uzvards = null;
        sarf.resData.zin_rezultatu_autori[index].archiving_date = null;
      }
    });
  }

  function addAuthor() {
    sarf.resData.zin_rezultatu_autori.push({
      zin_institucija_id: null,
      zin_institucija_cits: null
    });
  }

  function addInstitution() {
    sarf.resData.zin_rezultatu_institucijas.push({
      sci_institution_select_obj: {
        id: null,
        text: ' '
      }
    });
  }

  function removeInstitution(i) {
    sarf.resData.zin_rezultatu_institucijas.splice(i, 1);

    if (sarf.resData.zin_rezultatu_institucijas.length <= 0) {
      for (var i = 0; sarf.resData.zin_rezultatu_autori.length > i; i++) {
        sarf.resData.zin_rezultatu_autori[i].sci_institution_select_obj = null;
      }
    }
  }

  function addMeToAuthorList() {
    sarf.resData.zin_rezultatu_autori.push({
      personals_id: $rootScope.currentUser.person_id,
      vards_tmp: $rootScope.currentUser.vards,
      uzvards_tmp: $rootScope.currentUser.uzvards,
      vards: $rootScope.currentUser.vards,
      uzvards: $rootScope.currentUser.uzvards,
      zin_institucija_id: null,
      zin_institucija_cits: null
    });
  }

  function checkMeAsAuthor() {
    var v = false;
    angular.forEach(sarf.resData.zin_rezultatu_autori, function (author) {
      if (author.personals_id && author.personals_id === $rootScope.currentUser.person_id) {
        v = true;
      }
    });
    return v;
  }

  function isSimilar(author) {
    var v = false;

    if (author.personals_id && author.personals_id === $rootScope.currentUser.person_id) {
      v = true;
    }

    if (author.uzvards_tmp && author.uzvards_tmp === $rootScope.currentUser.uzvards && author.vards_tmp && author.vards_tmp === $rootScope.currentUser.vards) {
      v = true;
    }

    return v;
  }

  function isOwner() {
    var v = false;

    if (sarf.resData.created_by_id && sarf.resData.created_by_id === $rootScope.currentUser.id) {
      v = true;
    }

    return v;
  }

  function isMe(author) {
    var v = false;

    if (author.personals_id && author.personals_id === $rootScope.currentUser.person_id) {
      v = true;
    }

    return v;
  }

  init();
}]);
/**
 * @name budget_expenses_position_form
 * @description "Budžeta izdevumu pozīcija" forma
 * @param  {string} url /data/budzeta_izdevumu_klasifikacija_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificActionResultsMergeToolEditController', ['ngDialog', 'Select2Data', 'SearchPerson', 'UploadService', '$timeout', 'Upload', 'Restangular', '$scope', '$window', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$rootScope', 'gettextUtil', '$cookies', function (ngDialog, Select2Data, SearchPerson, UploadService, $timeout, Upload, Restangular, $scope, $window, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $rootScope, gettextUtil, $cookies) {
  var sarf = this;
  sarf.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Rezultāti'),
    active: true
  }];
  sarf.resData1 = {};
  sarf.resData2 = {};
  sarf.resData3 = {};
  $scope.allowEdit = true;
  sarf.formats = ['dd.MM.yyyy'];
  sarf.dateFormat = sarf.formats[0];
  sarf.resData1Origin = null;
  sarf.resData2Origin = null;
  sarf.resData3Origin = null; // functions

  sarf.loadData = loadData;
  sarf.saveResData = saveResData;
  sarf.setEditMode = setEditMode;
  sarf.resetResData = resetResData;
  sarf.processData = processData;
  sarf.mergeData = mergeData;
  sarf.updatePrintTabTitle = updatePrintTabTitle;
  sarf.openHomepage = openHomepage;
  sarf.addInstitution = addInstitution;
  sarf.addAuthor = addAuthor;
  sarf.discardUserData = discardUserData;
  sarf.searchPersonByPersonalCode = searchPersonByPersonalCode;
  sarf.loadUserData = loadUserData;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; sarf.tabs.length > i; i++) {
        if (sarf.tabs[i].active) {
          sarf.currentTitle = sarf.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function addInstitution() {
    sarf.resData3.zin_rezultatu_institucijas.push({
      sci_institution_select_obj: {
        id: null,
        text: ' '
      }
    });
  }

  function addAuthor() {
    sarf.resData3.zin_rezultatu_autori.push({
      zin_institucija_id: null,
      zin_institucija_cits: null
    });
  }

  function loadUserData(personsFound, i) {
    sarf.resData3.zin_rezultatu_autori[i].vards_tmp = personsFound.vards;
    sarf.resData3.zin_rezultatu_autori[i].uzvards_tmp = personsFound.uzvards;
    sarf.resData3.zin_rezultatu_autori[i].vards = personsFound.vards;
    sarf.resData3.zin_rezultatu_autori[i].uzvards = personsFound.uzvards;
    sarf.resData3.zin_rezultatu_autori[i].archiving_date = personsFound.archiving_date;
    sarf.resData3.zin_rezultatu_autori[i].personals_id = personsFound.id.toString();
  }

  function discardUserData(personsFound, i) {
    sarf.resData3.zin_rezultatu_autori.splice(i, 1);
    sarf.resData3.zin_rezultatu_autori.push({});
  }

  function searchPersonByPersonalCode(code, index) {
    var userIds = [];
    var showDialog = false;

    for (var key in sarf.resData3.zin_rezultatu_autori) {
      if (sarf.resData3.zin_rezultatu_autori[key].personals_id) {
        userIds.push(sarf.resData3.zin_rezultatu_autori[key].personals_id.toString());
      }

      if (sarf.resData3.zin_rezultatu_autori[key].personas_kods == code) {
        delete sarf.resData3.zin_rezultatu_autori[key].personals_id;
      }
    }

    SearchPerson.search(code, userIds, sarf.loadUserData, sarf.discardUserData, showDialog, index).then(function (data) {
      if (sarf.resData3.zin_rezultatu_autori[index].personas_kods.length < 11 && sarf.resData3.zin_rezultatu_autori[index].personals_id !== null && (data === null || typeof data === 'undefined')) {
        sarf.resData3.zin_rezultatu_autori[index].personals_id = null;
        sarf.resData3.zin_rezultatu_autori[index].vards_tmp = null;
        sarf.resData3.zin_rezultatu_autori[index].uzvards_tmp = null;
        sarf.resData3.zin_rezultatu_autori[index].vards = null;
        sarf.resData3.zin_rezultatu_autori[index].uzvards = null;
        sarf.resData3.zin_rezultatu_autori[index].archiving_date = null;
      }
    });
  }

  function copyIfEqual(name) {
    if (sarf.resData1[name] && sarf.resData2[name] && sarf.resData1[name] == sarf.resData2[name]) {
      sarf.resData3[name] = sarf.resData1[name];
    }
  }

  function copyIfEqual3(name) {
    if (sarf.resData1[name] && sarf.resData2[name] && sarf.resData1[name].toString() == sarf.resData2[name].toString()) {
      sarf.resData3[name] = sarf.resData1[name];
    }
  }

  function copyIfEqual2(name) {
    if (sarf.resData1[name] && sarf.resData2[name] && sarf.resData1[name].id && sarf.resData2[name].id && sarf.resData1[name].id == sarf.resData2[name].id) {
      sarf.resData3[name] = sarf.resData1[name];
    }
  }

  function mergeData() {
    sarf.resData3 = {
      veids: $stateParams.type,
      zin_rez1_id: $stateParams.zin_rez1_id,
      zin_rez2_id: $stateParams.zin_rez2_id,
      pielikumi: [],
      zin_rezultatu_autori: [],
      apaksnozares: [],
      zin_rezultatu_institucijas: [],
      created_by_id: $rootScope.currentUser.id
    };
    copyIfEqual('nosaukums');
    copyIfEqual2('project_select_obj');
    copyIfEqual2('tips_select_obj');
    copyIfEqual('izdosanas_gads');
    copyIfEqual('zurnals');
    copyIfEqual('doi');
    copyIfEqual('scopus_eid');
    copyIfEqual('isbn13');
    copyIfEqual('issn');
    copyIfEqual('scopus_nr');
    copyIfEqual('wos_nr');
    copyIfEqual('sejums');
    copyIfEqual('lpp');
    copyIfEqual('avota_url');
    copyIfEqual('scopus_url');
    copyIfEqual('wos_url');
    copyIfEqual('scopus_citeta_sk');
    copyIfEqual('wos_citeta_sk');
    copyIfEqual('atslegvardi');
    copyIfEqual('anotacija');
    copyIfEqual('anotacija_en');
    copyIfEqual2('intelektuala_ipasuma_veids_select_obj');
    copyIfEqual('registra_nosaukums');
    copyIfEqual('registracijas_nr');
    copyIfEqual3('registracijas_datums');
    copyIfEqual3('registracija_lidz');
    copyIfEqual('info_url');
    copyIfEqual2('intelektuala_ipasuma_tips_select_obj');
    copyIfEqual2('pasakums_veids_select_obj');
    copyIfEqual('apraksts');
    copyIfEqual2('merogs_select_obj');
    copyIfEqual2('norises_valsts_select_obj');
    copyIfEqual('norises_pilseta');
    copyIfEqual3('konference_no');
    copyIfEqual3('konference_lidz');
    copyIfEqual('konferences_org');

    if (sarf.resData1.apaksnozares) {
      for (var i = 0; sarf.resData1.apaksnozares.length > i; i++) {
        sarf.resData3.apaksnozares.push(sarf.resData1.apaksnozares[i]);
      }
    }

    if (sarf.resData1.apaksnozares && sarf.resData2.apaksnozares) {
      for (var i = 0; sarf.resData2.apaksnozares.length > i; i++) {
        var found = false;

        for (var j = 0; sarf.resData1.apaksnozares.length > j; j++) {
          if (sarf.resData2.apaksnozares[i].zinatnes_nozare_id == sarf.resData1.apaksnozares[j].zinatnes_nozare_id) {
            found = true;
          }
        }

        if (!found) {
          sarf.resData3.apaksnozares.push(sarf.resData2.apaksnozares[i]);
        }
      }
    }

    if (sarf.resData1.pielikumi) {
      for (var i = 0; sarf.resData1.pielikumi.length > i; i++) {
        var tmp = angular.copy(sarf.resData1.pielikumi[i]);
        tmp.id = null;
        tmp.zin_rezultats_id = null;
        sarf.resData3.pielikumi.push(tmp);
      }
    }

    if (sarf.resData2.pielikumi) {
      for (var i = 0; sarf.resData2.pielikumi.length > i; i++) {
        var tmp = angular.copy(sarf.resData2.pielikumi[i]);
        tmp.id = null;
        tmp.zin_rezultats_id = null;
        sarf.resData3.pielikumi.push(tmp);
      }
    }

    if (sarf.resData1.zin_rezultatu_institucijas) {
      for (var i = 0; sarf.resData1.zin_rezultatu_institucijas.length > i; i++) {
        var tmp = angular.copy(sarf.resData1.zin_rezultatu_institucijas[i]);
        tmp.id = null;
        tmp.zin_rezultats_id = null;
        sarf.resData3.zin_rezultatu_institucijas.push(tmp);
      }
    }

    if (sarf.resData1.zin_rezultatu_institucijas && sarf.resData2.zin_rezultatu_institucijas) {
      for (var i = 0; sarf.resData2.zin_rezultatu_institucijas.length > i; i++) {
        var found = false;

        for (var j = 0; sarf.resData3.zin_rezultatu_institucijas.length > j; j++) {
          if (sarf.resData2.zin_rezultatu_institucijas[i].zin_institucija_id && sarf.resData3.zin_rezultatu_institucijas[j].zin_institucija_id && sarf.resData2.zin_rezultatu_institucijas[i].zin_institucija_id == sarf.resData3.zin_rezultatu_institucijas[j].zin_institucija_id) {
            found = true;

            if (sarf.resData2.zin_rezultatu_institucijas[i].scopus_afid && !sarf.resData3.zin_rezultatu_institucijas[j].scopus_afid) {
              sarf.resData3.zin_rezultatu_institucijas[j].scopus_afid = sarf.resData2.zin_rezultatu_institucijas[i].scopus_afid;
            }
          } else if (sarf.resData2.zin_rezultatu_institucijas[i].zin_institucija_cits && sarf.resData3.zin_rezultatu_institucijas[j].zin_institucija_cits && sarf.resData2.zin_rezultatu_institucijas[i].zin_institucija_cits == sarf.resData3.zin_rezultatu_institucijas[j].zin_institucija_cits) {
            found = true;

            if (sarf.resData2.zin_rezultatu_institucijas[i].scopus_afid && !sarf.resData3.zin_rezultatu_institucijas[j].scopus_afid) {
              sarf.resData3.zin_rezultatu_institucijas[j].scopus_afid = sarf.resData2.zin_rezultatu_institucijas[i].scopus_afid;
            }
          }
        }

        if (!found) {
          var tmp = angular.copy(sarf.resData2.zin_rezultatu_institucijas[i]);
          tmp.id = null;
          tmp.zin_rezultats_id = null;
          sarf.resData3.zin_rezultatu_institucijas.push(tmp);
        }
      }
    }

    if (sarf.resData1.zin_rezultatu_autori) {
      for (var i = 0; sarf.resData1.zin_rezultatu_autori.length > i; i++) {
        var tmp = angular.copy(sarf.resData1.zin_rezultatu_autori[i]);
        tmp.id = null;
        tmp.zin_rezultats_id = null;
        sarf.resData3.zin_rezultatu_autori.push(tmp);
      }
    }

    if (sarf.resData1.zin_rezultatu_autori && sarf.resData2.zin_rezultatu_autori) {
      for (var i = 0; sarf.resData2.zin_rezultatu_autori.length > i; i++) {
        var found = false;

        for (var j = 0; sarf.resData3.zin_rezultatu_autori.length > j; j++) {
          if (sarf.resData2.zin_rezultatu_autori[i].vards && sarf.resData3.zin_rezultatu_autori[j].vards && sarf.resData2.zin_rezultatu_autori[i].vards == sarf.resData3.zin_rezultatu_autori[j].vards && sarf.resData2.zin_rezultatu_autori[i].uzvards && sarf.resData3.zin_rezultatu_autori[j].uzvards && sarf.resData2.zin_rezultatu_autori[i].uzvards == sarf.resData3.zin_rezultatu_autori[j].uzvards) {
            found = true;

            if (sarf.resData2.zin_rezultatu_autori[i].personals_id && !sarf.resData3.zin_rezultatu_autori[j].personals_id) {
              sarf.resData3.zin_rezultatu_autori[j].personals_id = sarf.resData2.zin_rezultatu_autori[i].personals_id;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].personas_kods && !sarf.resData3.zin_rezultatu_autori[j].personas_kods) {
              sarf.resData3.zin_rezultatu_autori[j].personas_kods = sarf.resData2.zin_rezultatu_autori[i].personas_kods;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].scopus_afid && !sarf.resData3.zin_rezultatu_autori[j].scopus_afid) {
              sarf.resData3.zin_rezultatu_autori[j].scopus_afid = sarf.resData2.zin_rezultatu_autori[i].scopus_afid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].scopus_auid && !sarf.resData3.zin_rezultatu_autori[j].scopus_auid) {
              sarf.resData3.zin_rezultatu_autori[j].scopus_auid = sarf.resData2.zin_rezultatu_autori[i].scopus_auid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].wos_auid && !sarf.resData3.zin_rezultatu_autori[j].wos_auid) {
              sarf.resData3.zin_rezultatu_autori[j].wos_auid = sarf.resData2.zin_rezultatu_autori[i].wos_auid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id && !sarf.resData3.zin_rezultatu_autori[j].zin_institucija_id) {
              sarf.resData3.zin_rezultatu_autori[j].zin_institucija_id = sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id;
              sarf.resData3.zin_rezultatu_autori[j].sci_institution_select_obj = {
                id: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id,
                text: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_nosaukums
              };
            }

            if (sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits && !sarf.resData3.zin_rezultatu_autori[j].zin_institucija_cits) {
              sarf.resData3.zin_rezultatu_autori[j].zin_institucija_cits = sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits;
              sarf.resData3.zin_rezultatu_autori[j].sci_institution_select_obj = {
                id: null,
                text: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits ? sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits : ' '
              };
            }
          } else if (!sarf.resData2.zin_rezultatu_autori[i].vards && !sarf.resData3.zin_rezultatu_autori[j].vards && sarf.resData2.zin_rezultatu_autori[i].uzvards && sarf.resData3.zin_rezultatu_autori[j].uzvards && sarf.resData2.zin_rezultatu_autori[i].uzvards == sarf.resData3.zin_rezultatu_autori[j].uzvards) {
            found = true;

            if (sarf.resData2.zin_rezultatu_autori[i].personals_id && !sarf.resData3.zin_rezultatu_autori[j].personals_id) {
              sarf.resData3.zin_rezultatu_autori[j].personals_id = sarf.resData2.zin_rezultatu_autori[i].personals_id;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].personas_kods && !sarf.resData3.zin_rezultatu_autori[j].personas_kods) {
              sarf.resData3.zin_rezultatu_autori[j].personas_kods = sarf.resData2.zin_rezultatu_autori[i].personas_kods;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].scopus_afid && !sarf.resData3.zin_rezultatu_autori[j].scopus_afid) {
              sarf.resData3.zin_rezultatu_autori[j].scopus_afid = sarf.resData2.zin_rezultatu_autori[i].scopus_afid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].scopus_auid && !sarf.resData3.zin_rezultatu_autori[j].scopus_auid) {
              sarf.resData3.zin_rezultatu_autori[j].scopus_auid = sarf.resData2.zin_rezultatu_autori[i].scopus_auid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].wos_auid && !sarf.resData3.zin_rezultatu_autori[j].wos_auid) {
              sarf.resData3.zin_rezultatu_autori[j].wos_auid = sarf.resData2.zin_rezultatu_autori[i].wos_auid;
            }

            if (sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id && !sarf.resData3.zin_rezultatu_autori[j].zin_institucija_id) {
              sarf.resData3.zin_rezultatu_autori[j].zin_institucija_id = sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id;
              sarf.resData3.zin_rezultatu_autori[j].sci_institution_select_obj = {
                id: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_id,
                text: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_nosaukums
              };
            }

            if (sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits && !sarf.resData3.zin_rezultatu_autori[j].zin_institucija_cits) {
              sarf.resData3.zin_rezultatu_autori[j].zin_institucija_cits = sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits;
              sarf.resData3.zin_rezultatu_autori[j].sci_institution_select_obj = {
                id: null,
                text: sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits ? sarf.resData2.zin_rezultatu_autori[i].zin_institucija_cits : ' '
              };
            }
          }
        }

        if (!found) {
          var tmp = angular.copy(sarf.resData2.zin_rezultatu_autori[i]);
          tmp.id = null;
          tmp.zin_rezultats_id = null;
          sarf.resData3.zin_rezultatu_autori.push(tmp);
        }
      }
    }

    sarf.resData3.zin_rezultatu_autori.sort(function (a, b) {
      var cmp1 = '';

      if (a.vards && a.uzvards) {
        cmp1 = a.uzvards + ' ' + a.vards;
      } else if (a.uzvards) {
        cmp1 = a.uzvards;
      } else if (a.vards) {
        cmp1 = a.vards;
      }

      var cmp2 = '';

      if (b.vards && b.uzvards) {
        cmp2 = b.uzvards + ' ' + b.vards;
      } else if (b.uzvards) {
        cmp2 = b.uzvards;
      } else if (b.vards) {
        cmp2 = b.vards;
      }

      return cmp1.localeCompare(cmp2);
    });
  }

  function init() {
    sarf.scientificInstitutions = new Select2Data('choices', 'institutions');
    sarf.authInstitutionDataWrapper = {
      data: []
    };
    sarf.scientificInstitutions2 = new Select2Data('array', null, sarf.authInstitutionDataWrapper);
    dataOp.getChoices('science_branch_full').then(function (data) {
      sarf.scienceRootBranches = data.data;
    });
    sarf.projectList = new Select2Data('choices', 'projects');
    sarf.articleTypes = new Select2Data('codificator', 'article_type');
    sarf.intellectualTypes = new Select2Data('codificator', 'intellectual_property_type');
    sarf.intellectualForm = new Select2Data('codificator', 'intellectual_property_form');
    sarf.eventTypes = new Select2Data('codificator', 'event_type');
    sarf.eventScale = new Select2Data('codificator', 'event_scale');
    sarf.countries = new Select2Data('codificator', 'countries2');
    loadData();
  }

  function processData(data) {
    if (data.zinatnes_nozare_id) {
      data.zinatnes_nozare_id = data.zinatnes_nozare_id.toString();
    }

    if (data.projekts_id) {
      data.project_select_obj = {
        id: data.projekts_id,
        text: data.projekts_nosaukums
      };
    }

    if (data.izdosanas_gads) {
      data.izdosanas_gads = parseInt(data.izdosanas_gads);
    }

    if (data.registracijas_datums) {
      data.registracijas_datums = new Date(data.registracijas_datums);
    }

    if (data.registracija_lidz) {
      data.registracija_lidz = new Date(data.registracija_lidz);
    }

    if (data.intelektuala_ipasuma_tips_id) {
      data.intelektuala_ipasuma_tips_select_obj = {
        id: data.intelektuala_ipasuma_tips_id,
        text: data.intelektuala_ipasuma_tips_nosaukums
      };
    }

    if (data.tips_id) {
      data.tips_id = data.tips_id.toString();
      data.tips_select_obj = {
        id: data.tips_id
      };

      if (data.tips_nosaukums) {
        data.tips_select_obj.text = data.tips_nosaukums;
      }

      if (data.tips) {
        data.tips_select_obj.text = data.tips;
      }
    }

    if (data.intelektuala_ipasuma_veids_id) {
      data.intelektuala_ipasuma_veids_id = data.intelektuala_ipasuma_veids_id.toString();
      data.intelektuala_ipasuma_veids_select_obj = {
        id: data.intelektuala_ipasuma_veids_id
      };

      if (data.intelektuala_ipasuma_veids_nosaukums) {
        data.intelektuala_ipasuma_veids_select_obj.text = data.intelektuala_ipasuma_veids_nosaukums;
      }

      if (data.intelektuala_ipasuma_veids) {
        data.intelektuala_ipasuma_veids_select_obj.text = data.intelektuala_ipasuma_veids;
      }
    }

    if (data.konference_no) {
      data.konference_no = new Date(data.konference_no);
    }

    if (data.konference_lidz) {
      data.konference_lidz = new Date(data.konference_lidz);
    }

    if (data.merogs_id) {
      data.merogs_select_obj = {
        id: data.merogs_id,
        text: data.merogs_nosaukums
      };
    }

    if (data.norises_valsts_id) {
      data.norises_valsts_select_obj = {
        id: data.norises_valsts_id,
        text: data.norises_valsts_nosaukums
      };
    }

    if (data.pasakums_veids_id) {
      data.pasakums_veids_select_obj = {
        id: data.pasakums_veids_id,
        text: data.pasakums_veids_nosaukums
      };
    }

    var context = dataOp.getContext();

    if (data.zin_rezultatu_institucijas && data.zin_rezultatu_institucijas.length) {
      for (var i = 0; data.zin_rezultatu_institucijas.length > i; i++) {
        if (data.zin_rezultatu_institucijas[i].zin_institucija_id) {
          data.zin_rezultatu_institucijas[i].sci_institution_select_obj = {
            id: data.zin_rezultatu_institucijas[i].zin_institucija_id,
            text: data.zin_rezultatu_institucijas[i].zin_institucija_nosaukums
          };

          if (context != -1 && data.zin_rezultatu_institucijas[i].zin_institucija_id == context.id) {
            data.zin_rezultatu_institucijas[i].ir_ctx_institucija = true;
          }
        } else {
          data.zin_rezultatu_institucijas[i].sci_institution_select_obj = {
            id: null,
            text: data.zin_rezultatu_institucijas[i].zin_institucija_cits ? data.zin_rezultatu_institucijas[i].zin_institucija_cits : ' '
          };
        }
      }
    } else {
      data.zin_rezultatu_institucijas = [];
    }

    if (data.zin_rezultatu_autori && data.zin_rezultatu_autori.length) {
      for (var i = 0; data.zin_rezultatu_autori.length > i; i++) {
        if (data.zin_rezultatu_autori[i].zin_institucija_id) {
          data.zin_rezultatu_autori[i].sci_institution_select_obj = {
            id: data.zin_rezultatu_autori[i].zin_institucija_id,
            text: data.zin_rezultatu_autori[i].zin_institucija_nosaukums
          };
        } else {
          data.zin_rezultatu_autori[i].sci_institution_select_obj = {
            id: null,
            text: data.zin_rezultatu_autori[i].zin_institucija_cits ? data.zin_rezultatu_autori[i].zin_institucija_cits : ''
          };
        }
      }
    } else {
      data.zin_rezultatu_autori = [];
    }

    if (data.pielikumi && data.pielikumi.length) {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    } else {
      data.pielikumi = [];
    }

    data.zin_rezultatu_autori.sort(function (a, b) {
      var cmp1 = '';

      if (a.vards && a.uzvards) {
        cmp1 = a.uzvards + ' ' + a.vards;
      } else if (a.uzvards) {
        cmp1 = a.uzvards;
      } else if (a.vards) {
        cmp1 = a.vards;
      }

      var cmp2 = '';

      if (b.vards && b.uzvards) {
        cmp2 = b.uzvards + ' ' + b.vards;
      } else if (b.uzvards) {
        cmp2 = b.uzvards;
      } else if (b.vards) {
        cmp2 = b.vards;
      }

      return cmp1.localeCompare(cmp2);
    });
  }

  function loadData() {
    if ($stateParams.zin_rez1_id && $stateParams.zin_rez2_id) {
      sarf.title = gettextCatalog.getString('Zinātniskās darbības rezultātu apvienošana', null, 'Rezultāti');
      dataOp.getDefaultById($stateParams.zin_rez1_id, 'zin_rezultats_veids_' + $stateParams.type).then(function (data) {
        sarf.processData(data);
        sarf.resData1 = data;
        sarf.resData1Origin = angular.copy(sarf.resData1);
        dataOp.getDefaultById($stateParams.zin_rez2_id, 'zin_rezultats_veids_' + $stateParams.type).then(function (data) {
          sarf.processData(data);
          sarf.resData2 = data;
          sarf.resData2Origin = angular.copy(sarf.resData2);
          sarf.mergeData();
          $scope.allowEdit = false;
          sarf.showA = true;
          sarf.showG1 = sarf.resData1.veids == 1;
          sarf.showG2 = sarf.resData1.veids == 2;
          sarf.showG3 = sarf.resData1.veids == 3;
        });
      });
    }
  }

  function saveResData(lock) {
    if (!lock) {
      if (sarf.resData3.zin_rezultatu_institucijas && sarf.resData3.zin_rezultatu_institucijas.length) {
        for (var i = 0; sarf.resData3.zin_rezultatu_institucijas.length > i; i++) {
          var data = sarf.resData3.zin_rezultatu_institucijas[i];

          if (data.sci_institution_select_obj) {
            if (data.sci_institution_select_obj.id) {
              data.zin_institucija_id = data.sci_institution_select_obj.id;
              data.zin_institucija_cits = null;
            } else {
              data.zin_institucija_id = null;
              data.zin_institucija_cits = data.sci_institution_select_obj.text;
            }
          }

          data.seciba = i + 1;
        }
      }

      if (sarf.resData3.intelektuala_ipasuma_tips_select_obj && sarf.resData3.intelektuala_ipasuma_tips_select_obj.id) {
        sarf.resData3.intelektuala_ipasuma_tips_id = sarf.resData3.intelektuala_ipasuma_tips_select_obj.id;
      }

      if (sarf.resData3.veids) {
        sarf.resData3.veids = sarf.resData3.veids.toString();
      }

      if (sarf.resData3.zin_rezultatu_autori && sarf.resData3.zin_rezultatu_autori.length) {
        for (var i = 0; sarf.resData3.zin_rezultatu_autori.length > i; i++) {
          if (sarf.resData3.zin_rezultatu_autori[i].sci_institution_select_obj) {
            var data = sarf.resData3.zin_rezultatu_autori[i];

            if (data.sci_institution_select_obj) {
              if (data.sci_institution_select_obj.id) {
                data.zin_institucija_id = data.sci_institution_select_obj.id;
                data.zin_institucija_cits = null;
              } else {
                data.zin_institucija_id = null;
                data.zin_institucija_cits = data.sci_institution_select_obj.text;
              }
            }
          }

          data.seciba = i + 1;
        }
      }

      if (sarf.resData3.project_select_obj) {
        sarf.resData3.projekts_id = sarf.resData3.project_select_obj.id;
      }

      if (sarf.resData3.tips_select_obj) {
        sarf.resData3.tips_id = sarf.resData3.tips_select_obj.id;
      }

      if (sarf.resData3.intelektuala_ipasuma_veids_select_obj) {
        sarf.resData3.intelektuala_ipasuma_veids_id = sarf.resData3.intelektuala_ipasuma_veids_select_obj.id;
      }

      if (sarf.resData3.merogs_select_obj && sarf.resData3.merogs_select_obj.id) {
        sarf.resData3.merogs_id = sarf.resData3.merogs_select_obj.id;
      }

      if (sarf.resData3.norises_valsts_select_obj && sarf.resData3.norises_valsts_select_obj.id) {
        sarf.resData3.norises_valsts_id = sarf.resData3.norises_valsts_select_obj.id;
      }

      if (sarf.resData3.pasakums_veids_select_obj && sarf.resData3.pasakums_veids_select_obj.id) {
        sarf.resData3.pasakums_veids_id = sarf.resData3.pasakums_veids_select_obj.id;
      }

      angular.forEach(sarf.resData3.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      var saveViewBase = 'zin_rezultats_apvienosana_veids_';
      dataOp.saveScientificResultById(sarf.resData3, saveViewBase).then(function (data) {
        $rootScope.allowPrint = true;
        Notification.success(gettextCatalog.getString('Veiksmīgi apvienoti zinātniskās darbības rezultāti!', null, 'Rezultāti'));
        $state.go('app.scientific_action_results.edit', {
          id: data.data.id,
          type: data.data.veids
        });
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetResData() {
    $scope.allowEdit = true;
    sarf.resData1 = angular.copy(sarf.resData1Origin);
    sarf.resData2 = angular.copy(sarf.resData2Origin);
    sarf.resData3 = angular.copy(sarf.resData3Origin);
  }

  init();
}]);
/**
 * @name scientific_action_results
 * @description Saraksts "Zinātniskās darbības rezultāti"
 * @param  {string} url /data/zin_rezultats_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificActionResultsController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', 'dataService', '$cookies', '$http', '$filter', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope, dataOp, $cookies, $http, $filter) {
  var sar = this;
  sar.action_result = null;
  sar.allowEdit = false;
  $scope.$watch('sar.allowEdit', function () {
    sar.formButtonText = sar.allowEdit ? 'Labot' : 'Saglabāt';
  }); // panel collapse initialization

  sar.collapseMainData = true; // function initialization

  sar.openActionResult = openActionResult;
  sar.deleteScientificResult = deleteScientificResult;
  sar.mergeScientificResults = mergeScientificResults;
  sar.createButtonsIf = createButtonsIf;
  sar.importButtonsIf = importButtonsIf;

  if ($state.current.name === "app.scientific_action_results.edit") {
    sar.allowEdit = true;
    sar.action_result = $stateParams.action_result;
  }

  function openActionResult(row) {
    if (typeof row.id !== 'undefined') {
      $state.go('app.scientific_action_results.edit', {
        id: row.id,
        type: row.veids
      });
    }
  }

  function deleteScientificResult(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("zin_rezultats_delete", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts zinātniskās darbības rezultāts!', null, 'Rezultāti'));
      return true;
    }, $scope.handleErrorNew);
  }

  function mergeScientificResults(mergeObj, selected) {
    var veids1 = null;
    var veids2 = null;
    var id1 = null;
    var id2 = null;
    var institucija1 = null;
    var institucija2 = null;
    var contextUser = $rootScope.u.contextName;

    for (var key in mergeObj) {
      if (!veids1) {
        veids1 = mergeObj[key].object.veids;
        id1 = key;
      } else if (!veids2) {
        veids2 = mergeObj[key].object.veids;
        id2 = key;
      }
    }

    for (var key in mergeObj) {
      if (!institucija1) {
        institucija1 = mergeObj[key].object.zin_institucijas;
      } else if (!institucija2) {
        institucija2 = mergeObj[key].object.zin_institucijas;
      }
    }

    if (!institucija1.includes(contextUser) && !institucija2.includes(contextUser) && !contextUser.includes("Administrators")) {
      $scope.showErrorMsg("Nevar apvienot zinātniskās darbības rezultātus, ja neesat saistīts ar vismaz vienu no institūcijām!");
    } else {
      if (veids1 != veids2) {
        $scope.showErrorMsg("Nevar apvienot zinātniskās darbības rezultātus, kuru veids ir atšķirīgs!");
      } else {
        $state.go('app.scientific_action_results_merge_tool.edit', {
          zin_rez1_id: id1,
          zin_rez2_id: id2,
          type: veids1
        });
      }
    }
  }

  function createButtonsIf() {
    return $rootScope.perms.save.zin_rezultats_base || $rootScope.perms.save.zin_rezultats_piev_manu_rez;
  }

  function importButtonsIf() {
    return $rootScope.perms.save.zin_rezultats_base || $rootScope.perms.save.zin_rezultats_piev_manu_rez;
  }

  sar.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās darbības rezultāta nosaukums", null, 'Rezultāti'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Veids", null, 'Rezultāti'),
      key: "veids_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Gads", null, 'Rezultāti'),
      key: "gads",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskās institūcijas/organizācijas", null, 'Rezultāti'),
      key: "zin_institucijas",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Autori", null, 'Rezultāti'),
      key: "autori",
      sortable: "false"
    }],
    default_sort_col: 'gads',
    default_sort_dir: 'desc',
    gridCheckbox: true,
    click_function: sar.openActionResult,
    "delete": false,
    bulkDelete: true,
    delete_function: sar.deleteScientificResult,
    // filters: false,
    catalog_name: gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Rezultāti'),
    merge_tool_function: sar.mergeScientificResults,
    mergeTool: true,
    mergeToolIf: $rootScope.perms.save.zin_rezultats_apvienosana,
    createButtonsIf: sar.createButtonsIf,
    createButtons: [{
      title: gettextCatalog.getString('Zinātniskais raksts, monogrāfija', null, 'Rezultāti'),
      create_function: function create_function() {
        var data = {
          nosaukums: null,
          izdosanas_gads: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-new-sr-form1.html',
          scope: $scope,
          data: data
        }).then(function () {
          $rootScope.showLoader = true;
          var p = {
            veids: '1',
            nosaukums: data.nosaukums,
            izdosanas_gads: data.izdosanas_gads,
            limit: 10,
            offset: 0
          };
          var req = {
            method: 'GET',
            params: p,
            url: '/data/zin_rezultats_duplicates_list',
            headers: {
              "Content-Type": 'application/json; charset=utf-8',
              'AuthToken': $cookies.get("session-id")
            }
          };
          $http(req).then(function (response) {
            if (response.data.length && response.data.length > 0) {
              ngDialog.openConfirm({
                template: 'components/scientific_action_results/tabs/dialog-sr-duplicates.html',
                scope: $scope,
                data: response.data
              }).then(function () {
                $rootScope.showLoader = false;
                $state.go('app.scientific_action_results.new', {
                  type: 1,
                  nosaukums: data.nosaukums,
                  izdosanas_gads: data.izdosanas_gads
                });
              }, function () {
                $rootScope.showLoader = false;
              });
            } else {
              $rootScope.showLoader = false;
              $state.go('app.scientific_action_results.new', {
                type: 1,
                nosaukums: data.nosaukums,
                izdosanas_gads: data.izdosanas_gads
              });
            }
          });
        }, function () {});
      }
    }, {
      title: gettextCatalog.getString('Intelektuālais īpašums', null, 'Rezultāti'),
      create_function: function create_function() {
        var data = {
          nosaukums: null,
          registracijas_datums: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-new-sr-form2.html',
          scope: $scope,
          data: data
        }).then(function () {
          $rootScope.showLoader = true;
          var p = {
            veids: '1',
            nosaukums: data.nosaukums,
            limit: 10,
            offset: 0
          };

          if (data.registracijas_datums) {
            p.registracijas_datums = $filter('date')(data.registracijas_datums, "yyyy-MM-dd");
          }

          var req = {
            method: 'GET',
            params: p,
            url: '/data/zin_rezultats_duplicates_list',
            headers: {
              "Content-Type": 'application/json; charset=utf-8',
              'AuthToken': $cookies.get("session-id")
            }
          };
          $http(req).then(function (response) {
            if (response.data.length && response.data.length > 0) {
              ngDialog.openConfirm({
                template: 'components/scientific_action_results/tabs/dialog-sr-duplicates.html',
                scope: $scope,
                data: response.data
              }).then(function () {
                $rootScope.showLoader = false;
                $state.go('app.scientific_action_results.new', {
                  type: 2,
                  nosaukums: data.nosaukums,
                  registracijas_datums: data.registracijas_datums
                });
              }, function () {
                $rootScope.showLoader = false;
              });
            } else {
              $rootScope.showLoader = false;
              $state.go('app.scientific_action_results.new', {
                type: 2,
                nosaukums: data.nosaukums,
                registracijas_datums: data.registracijas_datums
              });
            }
          });
        }, function () {});
      }
    }, {
      title: gettextCatalog.getString('Ar zinātni saistīts pasākums', null, 'Rezultāti'),
      create_function: function create_function() {
        var data = {
          nosaukums: null,
          konference_no: null,
          konference_lidz: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-new-sr-form3.html',
          scope: $scope,
          data: data
        }).then(function () {
          $rootScope.showLoader = true;
          var p = {
            veids: '1',
            nosaukums: data.nosaukums,
            limit: 10,
            offset: 0
          };

          if (data.konference_no) {
            p.konference_no = $filter('date')(data.konference_no, "yyyy-MM-dd");
          }

          var req = {
            method: 'GET',
            params: p,
            url: '/data/zin_rezultats_duplicates_list',
            headers: {
              "Content-Type": 'application/json; charset=utf-8',
              'AuthToken': $cookies.get("session-id")
            }
          };
          $http(req).then(function (response) {
            if (response.data.length && response.data.length > 0) {
              ngDialog.openConfirm({
                template: 'components/scientific_action_results/tabs/dialog-sr-duplicates.html',
                scope: $scope,
                data: response.data
              }).then(function () {
                $rootScope.showLoader = false;
                $state.go('app.scientific_action_results.new', {
                  type: 3,
                  nosaukums: data.nosaukums,
                  konference_no: data.konference_no,
                  konference_lidz: data.konference_lidz
                });
              }, function () {
                $rootScope.showLoader = false;
              });
            } else {
              $rootScope.showLoader = false;
              $state.go('app.scientific_action_results.new', {
                type: 3,
                nosaukums: data.nosaukums,
                konference_no: data.konference_no,
                konference_lidz: data.konference_lidz
              });
            }
          });
        }, function () {});
      }
    }],
    importButtonsIf: sar.importButtonsIf,
    importButtons: [{
      title: gettextCatalog.getString('Pēc DOI no Scopus datubāzes', null, 'Rezultāti'),
      import_function: function import_function() {
        var data = {
          doi: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-import-doi-scopus.html',
          scope: $scope,
          data: data
        }).then(function () {
          dataOp.getScopusData(data.doi, 'doi').then(function (resp) {
            Notification.success(gettextCatalog.getString('Scopus dati veiksmīgi pārnesti uz sistēmu'));

            if (resp.data && resp.data.id) {
              $state.go('app.scientific_action_results.edit', {
                id: resp.data.id,
                type: 1
              });
            }
          }, $scope.handleErrorNew);
        }, function () {});
      }
    }, {
      title: gettextCatalog.getString('Pēc EID no Scopus datubāzes', null, 'Rezultāti'),
      import_function: function import_function() {
        var data = {
          eid: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-import-eid-scopus.html',
          scope: $scope,
          data: data
        }).then(function () {
          dataOp.getScopusData(data.eid, 'eid').then(function (resp) {
            Notification.success(gettextCatalog.getString('Scopus dati veiksmīgi pārnesti uz sistēmu'));

            if (resp.data && resp.data.id) {
              $state.go('app.scientific_action_results.edit', {
                id: resp.data.id,
                type: 1
              });
            }
          }, $scope.handleErrorNew);
        }, function () {});
      }
    }, {
      title: gettextCatalog.getString('Pēc DOI no WoS datubāzes', null, 'Rezultāti'),
      import_function: function import_function() {
        var data = {
          doi: null
        };
        ngDialog.openConfirm({
          template: 'components/scientific_action_results/tabs/dialog-import-doi-wos.html',
          scope: $scope,
          data: data
        }).then(function () {
          dataOp.getWosData(data.doi, 'doi').then(function (resp) {
            Notification.success(gettextCatalog.getString('WoS dati veiksmīgi pārnesti uz sistēmu'));

            if (resp.data && resp.data.id) {
              $state.go('app.scientific_action_results.edit', {
                id: resp.data.id,
                type: 1
              });
            }
          }, $scope.handleErrorNew);
        }, function () {});
      }
    }],
    "export": true
  };
}]);
/**
 * @name scientific_branch_classifier_form
 * @description Forma "Zinātnisko nozaru klasifikators"
 * @param  {string} url /data/zinatnes_nozare/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificBranchClassifierFormController', ['ngDialog', '$scope', '$state', '$timeout', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$rootScope', function (ngDialog, $scope, $state, $timeout, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $rootScope) {
  var sbcf = this;
  sbcf.scientific_branch = {};
  sbcf.resDataOrigin = {};
  sbcf.allowEdit = true;
  sbcf.mainBranches = []; // tabs

  sbcf.tabs = [{
    id: 'mainDataTab',
    head: 'Pamatdati',
    active: true
  }]; // functions

  sbcf.loadData = loadData;
  sbcf.saveScientificBranchClassifier = saveScientificBranchClassifier;
  sbcf.editScientificBranchClassifier = editScientificBranchClassifier;
  sbcf.updatePrintTabTitle = updatePrintTabTitle;
  sbcf.resetScientificBranchClassifier = resetScientificBranchClassifier;
  sbcf.loadMainBranches = loadMainBranches;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; sbcf.tabs.length > i; i++) {
        if (sbcf.tabs[i].active) {
          sbcf.currentTitle = sbcf.tabs[i].head;
          break;
        }
      }
    });
  }

  function loadMainBranches() {
    var req = {
      method: 'GET',
      url: '/data/zinatnes_pamatnozares_choice',
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).success(function (data) {
      sbcf.mainBranches = data;
    });
  }

  function init() {
    loadMainBranches();
    loadData();
  }

  function loadData() {
    if ($stateParams.id) {
      sbcf.title = gettextCatalog.getString('Zinātniskā nozare', null, 'Zinātņu nozares');
      dataOp.getDefaultById($stateParams.id, 'zinatnes_nozare').then(function (data) {
        if (data.parent_id) {
          data.parent_id = data.parent_id.toString();
        }

        sbcf.scientific_branch = data;
        $timeout(function () {
          sbcf.resDataOrigin = angular.copy(sbcf.scientific_branch);
        });
      });
    } else {
      sbcf.title = gettextCatalog.getString('Pievienot zinātnisko nozari', null, 'Zinātņu nozares');
      sbcf.allowEdit = false;
      $timeout(function () {
        sbcf.resDataOrigin = angular.copy(sbcf.scientific_branch);
      });
    }
  }

  function resetScientificBranchClassifier() {
    sbcf.scientific_branch = angular.copy(sbcf.resDataOrigin);
  }

  function saveScientificBranchClassifier(lock) {
    if (!lock) {
      dataOp.saveDefault(sbcf.scientific_branch, 'zinatnes_nozare').then(function (data) {
        $rootScope.allowPrint = true;

        if (sbcf.scientific_branch.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots nozares klasifikators!', null, 'Zinātņu nozares'));
          sbcf.resDataOrigin = angular.copy(sbcf.scientific_branch);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots nozares klasifikators!', null, 'Zinātņu nozares'));
          $state.go('app.scientific_branch_classifier.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function editScientificBranchClassifier() {
    sbcf.allowEdit = false;
  }

  init();
}]);
/**
 * @name scientific_branch_classifier
 * @description Saraksts "Zinātnisko nozaru klasifikators"
 * @param  {string} url /data/zinatnes_nozares_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificBranchClassifierController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope) {
  var sbc = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('zinatnes_nozares_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  sbc.openBranchClassifier = openBranchClassifier;
  sbc.deleteBranchClassifier = deleteBranchClassifier;

  function openBranchClassifier(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.scientific_branch_classifier.edit', {
        id: row.id
      });
    } else {
      $state.go('app.scientific_branch_classifier.new');
    }
  }

  function deleteBranchClassifier(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("zinatnes_nozare", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts nozares klasifikators!', null, 'Zinātņu nozares'));
      return true;
    }, $scope.handleError);
  }

  sbc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Kods", null, 'Zinātņu nozares'),
      key: "nozares_kods",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Latviešu valodā", null, 'Zinātņu nozares'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Angļu valodā", null, 'Zinātņu nozares'),
      key: "nosaukums_en",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Ir apakšnozare", null, 'Zinātņu nozares'),
      key: "ir_apaksnozare",
      sortable: "true",
      trueFalseVal: "true"
    }, {
      text: gettextCatalog.getString("Ir prioritārs", null, 'Zinātņu nozares'),
      key: "ir_prioritars",
      sortable: "true",
      trueFalseVal: "true"
    }],
    default_sort_col: 'nozares_kods',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    click_function: sbc.openBranchClassifier,
    delete_function: sbc.deleteBranchClassifier,
    filters: false,
    catalog_name: gettextCatalog.getString('Zinātnisko nozaru klasifikators', null, 'Zinātņu nozares'),
    create_function: sbc.openBranchClassifier,
    create_function_right: function create_function_right() {
      $state.go('app.sci_branch_lzp.list');
    },
    create_function_right_permission: "zinatnes_nozare_lzp",
    create_function_right_title: gettextCatalog.getString("LZP Zinātnisko nozaru klasifikators", null, 'Zinātņu nozares'),
    "export": false
  };
}]);
/**
 * @name scientific_institution_evaluation_form
 * @description "Zinātniskās institūcijas starptautiskais novērtējums" forma
 * @param  {string} url /data/institucijas_novertejums/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionEvaluationFormController', ['ngDialog', 'UploadService', 'PermissionService', 'Select2Data', '$timeout', 'Upload', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$rootScope', '$http', function (ngDialog, UploadService, PermissionService, Select2Data, $timeout, Upload, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $filter, $rootScope, $http) {
  var cnrl = this;
  cnrl.evaluation = {
    pielikumi: []
  };
  cnrl.evaluationOrigin = {
    pielikumi: []
  };
  cnrl.pielikumi = [];
  cnrl.pielikumiToDelete = [];
  cnrl.contact_data = [];
  cnrl.allowEdit = true;
  cnrl.formats = ['dd.MM.yyyy'];
  cnrl.dateFormat = cnrl.formats[0]; // tabs

  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Institūciju novērtējumi'),
    active: true
  }, {
    id: 'adminDataTab',
    head: gettextCatalog.getString('Atbildīgie/administratori', null, 'Institūciju novērtējumi'),
    active: false
  }, {
    id: 'expertDataTab',
    head: gettextCatalog.getString('Eksperti', null, 'Institūciju novērtējumi'),
    active: false
  }]; // functions

  cnrl.loadData = loadData;
  cnrl.saveScientificInstitutionEvaluation = saveScientificInstitutionEvaluation;
  cnrl.submitEvaluation = submitEvaluation;
  cnrl.coordSubmitEvaluation = coordSubmitEvaluation;
  cnrl.admSubmitEvaluation = admSubmitEvaluation;
  cnrl.submitExpertList = submitExpertList;
  cnrl.acceptExpertList = acceptExpertList;
  cnrl.rejectExpertList = rejectExpertList;
  cnrl.submitIndividualReports = submitIndividualReports;
  cnrl.acceptIndividualReports = acceptIndividualReports;
  cnrl.rejectIndividualReports = rejectIndividualReports;
  cnrl.ceSubmitEvaluation = ceSubmitEvaluation;
  cnrl.renewEvaluationEditing = renewEvaluationEditing;
  cnrl.coordRenewEvaluationEditing = coordRenewEvaluationEditing;
  cnrl.admRenewEvaluationEditing = admRenewEvaluationEditing;
  cnrl.acceptEvaluation = acceptEvaluation;
  cnrl.publishEvaluation = publishEvaluation;
  cnrl.cancelPublEvaluation = cancelPublEvaluation;
  cnrl.resetEvaluation = resetEvaluation;
  cnrl.setEditMode = setEditMode;
  cnrl.UploadService = UploadService;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.processData = processData;
  cnrl.onUpdateAdminEmail = onUpdateAdminEmail;
  cnrl.onUpdateExpertEmail = onUpdateExpertEmail;
  cnrl.getAttGroup = getAttGroup;
  cnrl.removeAttGroup = removeAttGroup;
  cnrl.currentTitle = null;
  cnrl.hasPermission = PermissionService.hasPermission;

  function init() {
    dataOp.getCodificator('institution_evaluation_status').then(function (data) {
      cnrl.evaluationStatuses = data.data;
    });
    dataOp.getCodificator('countries').then(function (data) {
      cnrl.countries = data.data;
    });
    cnrl.pnZinTeplateData = null;
    dataOp.listDefault('pn_zin_sablons_list').then(function (data) {
      if (data.length && data.length > 0) {
        cnrl.pnZinTeplateData = data[0];
      }
    });
    loadData();
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function processData(data) {
    if (data.novertejuma_datums_no) {
      data.novertejuma_datums_no = new Date(data.novertejuma_datums_no);
    }

    if (data.novertejuma_datums_lidz) {
      data.novertejuma_datums_lidz = new Date(data.novertejuma_datums_lidz);
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.saskanosanas_datums) {
      data.saskanosanas_datums = new Date(data.saskanosanas_datums);
    }

    if (data.publicesanas_datums) {
      data.publicesanas_datums = new Date(data.publicesanas_datums);
    }

    angular.forEach(data.eksperti, function (e) {
      if (e.valsts_id) {
        e.valsts_id = e.valsts_id.toString();
      }
    });

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    cnrl.evaluation = data;
    $timeout(function () {
      cnrl.evaluationOrigin = angular.copy(cnrl.evaluation);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas starptautiskais novērtējums', null, 'Institūciju novērtējumi');
      dataOp.getDefaultById($stateParams.id, 'institucijas_novertejums').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_novertejuma', 'institucijas_novertejums').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
        }, function (aData) {
          cnrl.processData(data);
        });
      });
    }
  }

  function saveScientificInstitutionEvaluation(lock, viewName) {
    if (!lock) {
      var viewNameTmp = 'institucijas_novertejums';

      if (!$rootScope.perms.save.institucijas_novertejums && $rootScope.perms.save.institucijas_novertejums_pn_dati) {
        viewNameTmp = 'institucijas_novertejums_pn_dati_s';
      } else if (!$rootScope.perms.save.institucijas_novertejums && $rootScope.perms.save.institucijas_novertejums_atb) {
        viewNameTmp = 'institucijas_novertejums_atb_s';
      } else if (!$rootScope.perms.save.institucijas_novertejums && $rootScope.perms.save.institucijas_novertejums_eksp) {
        viewNameTmp = 'institucijas_novertejums_eksp_s';
      } else if (!$rootScope.perms.save.institucijas_novertejums && $rootScope.perms.save.institucijas_novertejums_ip_dati) {
        viewNameTmp = 'institucijas_novertejums_ip_dati_s';
      } else if (!$rootScope.perms.save.institucijas_novertejums && $rootScope.perms.save.institucijas_novertejums_kv_dati) {
        viewNameTmp = 'institucijas_novertejums_kv_dati_s';
      }

      if (viewName && viewName != null) {
        viewNameTmp = viewName;
      }

      if (cnrl.evaluation.kopejais_ple) {
        cnrl.evaluation.kopejais_ple = parseFloat(cnrl.evaluation.kopejais_ple);
      }

      if (cnrl.evaluation.vertejums) {
        cnrl.evaluation.vertejums = parseFloat(cnrl.evaluation.vertejums);
      }

      angular.forEach(cnrl.evaluation.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      var attachmentOrigin = cnrl.evaluation.pielikumi;
      dataOp.saveScientificInstitutionEvaluationById(cnrl.evaluation, viewNameTmp).then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.evaluation.pielikumi, function (att) {
          att.institucijas_novertejums_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_novertejuma_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.evaluation.pielikumi, 'institucijas_novertejuma').then(function (aData) {
          if (aData.status == 200) {
            data.data.pielikumi = [];
            angular.forEach(aData, function (val, key) {
              data.data.pielikumi.push(val.data);
            });
          } else {
            data.data.pielikumi = attachmentOrigin;
          }

          Notification.success(gettextCatalog.getString('Zinātniskās institūcijas starptautiskais novērtējums veiksmīgi labots!', null, 'Institūciju novērtējumi'));
          dataOp.getAttachmentsByIdNT(data.data.id, 'institucijas_novertejuma', 'institucijas_novertejums').then(function (aData2) {
            data.data.pielikumi = aData2;
            cnrl.processData(data.data);
          }, function (aData) {
            cnrl.processData(data.data);
          });
        }, function (aData) {
          Notification.success(gettextCatalog.getString('Zinātniskās institūcijas starptautiskais novērtējums veiksmīgi labots!', null, 'Institūciju novērtējumi'));
          dataOp.getAttachmentsByIdNT(data.data.id, 'institucijas_novertejuma', 'institucijas_novertejums').then(function (aData2) {
            data.data.pielikumi = aData2;
            cnrl.processData(data.data);
          }, function (aData) {
            cnrl.processData(data.data);
          });
        });
      }, $scope.handleError);
    }
  }

  function submitEvaluation(lock) {
    cnrl.evaluation.statuss = 'TMP';
    saveScientificInstitutionEvaluation(lock);
  }

  function coordSubmitEvaluation(lock) {
    cnrl.evaluation.statuss = 'SASKANOTS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_sask_nor');
  }

  function admSubmitEvaluation(lock) {
    cnrl.evaluation.statuss = 'IESNIEGTS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_iesn_nor');
  }

  function submitExpertList(lock) {
    cnrl.evaluation.statuss = 'ES_SASKANOSANA';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_iesn_eksp');
  }

  function acceptExpertList(lock) {
    cnrl.evaluation.statuss = 'ES_APSTIPRINATS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_apst_nor_eksp');
  }

  function rejectExpertList(lock) {
    cnrl.evaluation.statuss = 'ADM_APSTIPRINATS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_apst_nor_eksp');
  }

  function submitIndividualReports(lock) {
    cnrl.evaluation.statuss = 'IP_SASKANOSANA';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_iesn_ip');
  }

  function acceptIndividualReports(lock) {
    cnrl.evaluation.statuss = 'IP_SASKANOTI';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_apst_nor_ip');
  }

  function rejectIndividualReports(lock) {
    cnrl.evaluation.statuss = 'ES_APSTIPRINATS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_apst_nor_ip');
  }

  function ceSubmitEvaluation(lock) {
    cnrl.evaluation.statuss = 'KV_SAGATAVOTS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_kv_dati_s');
  }

  function renewEvaluationEditing(lock, view) {
    var v = 'institucijas_novertejums_apst_nor';

    if (view) {
      v = view;
    }

    cnrl.evaluation.noraidisanas_iemesls = null;
    ngDialog.openConfirm({
      template: 'components/scientific_institution_evaluation/tabs/dialog-evaluation-reject.html',
      scope: $scope,
      data: cnrl.evaluation
    }).then(function () {
      cnrl.evaluation.statuss = 'SAGATAVOSANA';
      cnrl.evaluation.iesniegsanas_datums = null;
      cnrl.evaluation.iesniedzejs_id = null;
      cnrl.evaluation.iesniedzeja_vards = null;
      cnrl.evaluation.iesniedzeja_uzvards = null;
      cnrl.evaluation.saskanosanas_datums = null;
      cnrl.evaluation.saskanotajs_id = null;
      cnrl.evaluation.saskanotaja_vards = null;
      cnrl.evaluation.saskanotaja_uzvards = null;
      saveScientificInstitutionEvaluation(lock, v);
    }, function () {});
  }

  function coordRenewEvaluationEditing(lock) {
    renewEvaluationEditing(lock, 'institucijas_novertejums_sask_nor');
  }

  function admRenewEvaluationEditing(lock) {
    renewEvaluationEditing(lock, 'institucijas_novertejums_iesn_nor');
  }

  function acceptEvaluation(lock) {
    cnrl.evaluation.statuss = 'ADM_APSTIPRINATS';
    cnrl.evaluation.noraidisanas_iemesls = null;
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_apst_nor');
  }

  function publishEvaluation(lock) {
    cnrl.evaluation.statuss = 'PUBLICETS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_publ_nor');
  }

  function cancelPublEvaluation(lock) {
    cnrl.evaluation.statuss = 'KV_SAGATAVOTS';
    saveScientificInstitutionEvaluation(lock, 'institucijas_novertejums_publ_nor');
  }

  function resetEvaluation() {
    cnrl.evaluation = angular.copy(cnrl.evaluationOrigin);
  }

  function setEditMode() {
    cnrl.allowEdit = false;
  }

  function onUpdateAdminEmail(data) {
    data.lietotaja_info = null;
    data.ir_pieejas_tiesibas = null;

    if (data.kontaktinfo && data.kontaktinfo != null) {
      var req = {
        method: 'GET',
        url: 'data/institucijas_novertejums_admin_dati?epasts=' + data.kontaktinfo + '&institucija_id=' + cnrl.evaluation.institucija_id,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      $http(req).then(function (response) {
        if (response.data) {
          for (var i = 0; response.data.length > i; i++) {
            data.lietotaja_info = response.data[i].lietotaja_info;
            data.ir_pieejas_tiesibas = response.data[i].ir_pieejas_tiesibas;
          }
        }
      });
    }
  }

  function onUpdateExpertEmail(data) {
    data.lietotaja_info = null;
    data.ir_pieejas_tiesibas = null;

    if (data.kontaktinfo && data.kontaktinfo != null) {
      var req = {
        method: 'GET',
        url: 'data/institucijas_novertejums_eksp_dati?epasts=' + data.kontaktinfo + '&institucija_id=' + cnrl.evaluation.institucija_id,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      $http(req).then(function (response) {
        if (response.data) {
          for (var i = 0; response.data.length > i; i++) {
            data.lietotaja_info = response.data[i].lietotaja_info;
            data.ir_pieejas_tiesibas = response.data[i].ir_pieejas_tiesibas;
          }
        }
      });
    }
  }

  function getAttGroup(groupCode, expertId) {
    if (!expertId) {
      return cnrl.evaluation.pielikumi.filter(function (att) {
        return att.veids === groupCode;
      });
    } else {
      return cnrl.evaluation.pielikumi.filter(function (att) {
        return att.veids === groupCode && att.eksperts_id === expertId;
      });
    }
  }

  function removeAttGroup(groupCode, expertId) {
    if (!expertId) {
      for (var i = 0; cnrl.evaluation.pielikumi.length > i; i++) {
        if (cnrl.evaluation.pielikumi[i].veids === groupCode) {
          cnrl.evaluation.pielikumi.splice(i, 1);
        }
      }
    } else {
      for (var i = 0; cnrl.evaluation.pielikumi.length > i; i++) {
        if (cnrl.evaluation.pielikumi[i].veids === groupCode && cnrl.evaluation.pielikumi[i].eksperts_id === expertId) {
          cnrl.evaluation.pielikumi.splice(i, 1);
        }
      }
    }
  }

  init();
}]);
/**
 * @name scientific_institution_evaluation
 * @description Saraksts "Zinātnisko institūciju starptautiskie novērtējumi"
 * @param  {string} url /data/institucijas_gada_parskats_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificInstitutionEvaluationController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', '$q', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window, $q, dataOp) {
  var cnrl = this; // function initialization

  cnrl.openScientificInstitutionEvaluation = openScientificInstitutionEvaluation;
  cnrl.openHomepage = openHomepage;
  cnrl.canDeleteScientificInstitutionEvaluation = canDeleteScientificInstitutionEvaluation;
  cnrl.publishScientificInstitutionEvaluation = publishScientificInstitutionEvaluation;
  cnrl.deleteScientificInstitutionEvaluation = deleteScientificInstitutionEvaluation;
  cnrl.newScientificInstitutionEvaluation = newScientificInstitutionEvaluation;
  cnrl.onUpdateOfEvaluateWholeInstitution = onUpdateOfEvaluateWholeInstitution;
  cnrl.formats = ['dd.MM.yyyy'];
  cnrl.dateFormat = cnrl.formats[0];

  function openScientificInstitutionEvaluation(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.scientific_institution_evaluation.edit', {
        id: row.id
      });
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function canDeleteScientificInstitutionEvaluation(row) {
    if (row.can_delete) {
      return true;
    } else {
      return false;
    }
  }

  function publishScientificInstitutionEvaluation(confOrCancObj, selected) {
    var noErrors = true;

    function async() {
      var promises = [];
      Object.keys(confOrCancObj).forEach(function (key, val) {
        var pTmp = {
          id: key
        };
        var req = dataOp.saveScientificInstitutionEvaluationById(pTmp, 'institucijas_novertejums_batch_publ').then(function (response) {
          return response;
        }, function (response) {
          noErrors = false;
          return response;
        });
        promises.push(req);
      });
      return $q.all(promises);
    }

    var promise = async();
    promise.then(function (value) {
      if (!noErrors) {
        Notification.error(gettextCatalog.getString('Sistēmas kļūda!'));
      }

      $state.reload();
    });
  }

  function deleteScientificInstitutionEvaluation(deleteObj) {
    var viewName = 'institucijas_novertejums_administret';

    if (!$rootScope.perms["delete"].institucijas_novertejums_administret) {
      viewName = 'institucijas_novertejums';
    }

    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one(viewName, idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts zinātniskās institūcijas starptautiskais novērtējums!', null, 'Institūciju novērtējumi'));
      return true;
    }, $scope.handleError);
  }

  function newScientificInstitutionEvaluation() {
    cnrl.newEvaluation = {
      statuss: 'SAGATAVOSANA',
      institucija_id: null,
      vertet_visu_instituciju: false,
      vienibas_nosaukums: null,
      apaksnozares: [],
      novertejuma_datums_no: new Date(new Date().getFullYear() - 6, 0, 1),
      novertejuma_datums_lidz: new Date(new Date().getFullYear() - 1, 11, 31)
    };
    ngDialog.openConfirm({
      template: 'components/scientific_institution_evaluation/tabs/dialog-new-evaluation.html',
      scope: $scope,
      data: cnrl.newEvaluation
    }).then(function () {
      dataOp.saveScientificInstitutionEvaluationById(cnrl.newEvaluation, 'institucijas_novertejums').then(function (data) {
        Notification.success(gettextCatalog.getString('Veiksmīgi izveidots zinātniskās institūcijas ' + cnrl.newEvaluation.gads + '. gada starptautiskais novērtējums!', null, 'Institūciju novērtējumi'));
        $state.go('app.scientific_institution_evaluation.edit', {
          id: data.data.id
        });
      }, $scope.handleError);
    }, function () {});
  }

  function onUpdateOfEvaluateWholeInstitution() {
    if (cnrl.newEvaluation.vertet_visu_instituciju) {
      cnrl.newEvaluation.vienibas_nosaukums = null;
    }
  }

  function init() {
    dataOp.getChoices('scientific_institutions_ctx_full').then(function (data) {
      cnrl.scientificInstitutions = data.data;
    });
  }

  cnrl.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Institūciju novērtējumi'),
      key: "zi_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Institūciju novērtējumi'),
      key: "zi_reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Novērtējamās vienības nosaukums", null, 'Institūciju novērtējumi'),
      key: "vienibas_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Novērtējuma periods no", null, 'Institūciju novērtējumi'),
      key: "novertejuma_datums_no",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Novērtējuma periods līdz", null, 'Institūciju novērtējumi'),
      key: "novertejuma_datums_lidz",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Institūciju novērtējumi'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Publicēšanas datums", null, 'Institūciju novērtējumi'),
      key: "publicesanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Institūciju novērtējumi'),
      key: "statuss_nosaukums",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Vērtējums", null, 'Institūciju novērtējumi'),
      key: "vertejums",
      sortable: "true"
    }],
    click_function: cnrl.openScientificInstitutionEvaluation,
    publish_function: cnrl.publishScientificInstitutionEvaluation,
    bulkPublish: true,
    hasBulkPublishPerms: $rootScope.perms.save.institucijas_novertejums_batch_publ,
    create_function: cnrl.newScientificInstitutionEvaluation,
    gridCheckbox: true,
    "delete": false,
    can_delete_row_function: cnrl.canDeleteScientificInstitutionEvaluation,
    bulkDelete: true,
    delete_function: cnrl.deleteScientificInstitutionEvaluation,
    filters: false,
    catalog_name: gettextCatalog.getString('Zinātnisko institūciju starptautiskie novērtējumi', null, 'Institūciju novērtējumi'),
    link_function: cnrl.openHomepage,
    "export": true
  };
  init();
}]);
/**
 * @name scientific_institution_pub_report_form
 * @description "Zinātniskās institūcijas publiskais pārskats" forma
 * @param  {string} url /data/institucijas_publ_parskats_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionPubReportFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.report = {};
  cnrl.reportStatuses = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportOrigin = null; // functions

  cnrl.loadData = loadData;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getExportUrl = getExportUrl;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function getExportUrl(eName) {
    if (eName === 'zi_personals') {
      if (cnrl.report && cnrl.report.sadala_b && cnrl.report.sadala_b[0]) {
        return '/data/export_xlsx/parskata_zi_personals_c?sadala_id=' + cnrl.report.sadala_b[0].id;
      }
    } else if (eName === 'ak_personals') {
      if (cnrl.report && cnrl.report.sadala_b && cnrl.report.sadala_b[0]) {
        return '/data/export_xlsx/parskata_ak_personals_c?sadala_id=' + cnrl.report.sadala_b[0].id;
      }
    } else if (eName === 'projekti') {
      if (cnrl.report && cnrl.report.sadala_c && cnrl.report.sadala_c[0]) {
        return '/data/export_xlsx/parskata_projekti_c?sadala_id=' + cnrl.report.sadala_c[0].id;
      }
    } else if (eName === 'publikacijas') {
      if (cnrl.report && cnrl.report.sadala_d && cnrl.report.sadala_d[0]) {
        return '/data/export_xlsx/parskata_publikacijas_c?sadala_id=' + cnrl.report.sadala_d[0].id;
      }
    } else if (eName === 'intelektualais_ipasums') {
      if (cnrl.report && cnrl.report.sadala_d && cnrl.report.sadala_d[0]) {
        return '/data/export_xlsx/parskata_intelektualais_ipasums_c?sadala_id=' + cnrl.report.sadala_d[0].id;
      }
    } else if (eName === 'pasakumi') {
      if (cnrl.report && cnrl.report.sadala_d && cnrl.report.sadala_d[0]) {
        return '/data/export_xlsx/parskata_pasakumi_c?sadala_id=' + cnrl.report.sadala_d[0].id;
      }
    } else if (eName === 'iekartas') {
      if (cnrl.report && cnrl.report.sadala_a && cnrl.report.sadala_a[0]) {
        return '/data/export_xlsx/parskata_iekartas_c?sadala_id=' + cnrl.report.sadala_a[0].id;
      }
    } else if (eName === 'telpas') {
      if (cnrl.report && cnrl.report.sadala_a && cnrl.report.sadala_a[0]) {
        return '/data/export_xlsx/parskata_telpas_c?sadala_id=' + cnrl.report.sadala_a[0].id;
      }
    }
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_status').then(function (data) {
      cnrl.reportStatuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.publicesanas_datums) {
      data.publicesanas_datums = new Date(data.publicesanas_datums);
    }

    cnrl.report = data;
    $timeout(function () {
      cnrl.reportOrigin = angular.copy(cnrl.report);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas publiskais pārskats', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_publ_parskats_editable').then(function (data) {
        cnrl.processData(data);
      });
    }
  }

  init();
}]);
/**
 * @name scientific_institution_pub_report
 * @description Saraksts "Zinātnisko institūciju publiskie pārskati"
 * @param  {string} url /data/institucijas_publ_parskats_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificInstitutionPubReportController', ['ngDialog', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, dataOp, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var cnrl = this; // function initialization

  cnrl.openScientificInstitutionPubReport = openScientificInstitutionPubReport;
  cnrl.openHomepage = openHomepage;

  function openScientificInstitutionPubReport(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.scientific_institution_pub_report.edit', {
        id: row.id
      });
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {}

  cnrl.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Gada pārskati'),
      key: "zi_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Gada pārskati'),
      key: "zi_reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Gads", null, 'Gada pārskati'),
      key: "gads",
      sortable: "true"
    }],
    click_function: cnrl.openScientificInstitutionPubReport,
    gridCheckbox: false,
    "delete": false,
    bulkDelete: false,
    filters: false,
    catalog_name: gettextCatalog.getString('Zinātnisko institūciju publiskie pārskati', null, 'Gada pārskati'),
    link_function: cnrl.openHomepage,
    "export": false
  };
  init();
}]);
/**
 * @name scientific_institution_report_form
 * @description "Zinātniskās institūcijas gada pārskats" forma
 * @param  {string} url /data/institucijas_gada_parskats_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.report = {};
  cnrl.reportStatuses = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportOrigin = null; // functions

  cnrl.loadData = loadData;
  cnrl.saveReport = saveReport;
  cnrl.submitReport = submitReport;
  cnrl.renewReportEditing = renewReportEditing;
  cnrl.acceptReport = acceptReport;
  cnrl.publishReport = publishReport;
  cnrl.cancelPublReport = cancelPublReport;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReport = resetReport;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.openReportP1 = openReportP1;
  cnrl.openReportP2 = openReportP2;
  cnrl.openReportP3 = openReportP3;
  cnrl.openReportP4 = openReportP4;
  cnrl.openReportP5 = openReportP5;
  cnrl.openReportP6 = openReportP6;

  function getInclude(status) {
    if (cnrl.report.statuss && cnrl.report.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-iesniegts.html";
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_status').then(function (data) {
      cnrl.reportStatuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.iesniegsanas_datums) {
      data.iesniegsanas_datums = new Date(data.iesniegsanas_datums);
    }

    if (data.publicesanas_datums) {
      data.publicesanas_datums = new Date(data.publicesanas_datums);
    }

    cnrl.report = data;
    $timeout(function () {
      cnrl.reportOrigin = angular.copy(cnrl.report);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskats', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_editable').then(function (data) {
        cnrl.processData(data);
      });
    } else {
      cnrl.isNew = true;
      cnrl.title = gettextCatalog.getString('Pievienot zinātniskās institūcijas gada pārskatu', null, 'Gada pārskati');
      dataOp.getDefaultById(0, 'institucijas_gada_parskats_editable').then(function (data) {
        cnrl.processData(data);
      });
      $scope.allowEdit = false;
    }
  }

  function saveReport(lock, viewName) {
    if (!lock) {
      var viewNameTmp = 'institucijas_gada_parskats_editable';

      if (viewName && viewName != null) {
        viewNameTmp = viewName;
      }

      dataOp.saveScientificInstitutionReportById(cnrl.report, viewNameTmp).then(function (data) {
        $rootScope.allowPrint = true;

        if (cnrl.report.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labots zinātniskās institūcijas gada pārskats!', null, 'Gada pārskati'));
          cnrl.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots zinātniskās institūcijas gada pārskats!', null, 'Gada pārskati'));
          $state.go('app.user_expert_application.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function submitReport(lock) {
    cnrl.report.statuss = 'IESNIEGTS';
    saveReport(lock, 'institucijas_gada_parskats_iesn');
  }

  function renewReportEditing(lock) {
    cnrl.report.noraidisanas_iemesls = null;
    ngDialog.openConfirm({
      template: 'components/scientific_institution_report/tabs/dialog-report-reject.html',
      scope: $scope,
      data: cnrl.report
    }).then(function () {
      cnrl.report.statuss = 'SAGATAVOSANA';
      cnrl.report.iesniegsanas_datums = null;
      cnrl.report.publicesanas_datums = null;
      saveReport(lock, 'institucijas_gada_parskats_apst_nor');
    }, function () {});
  }

  function acceptReport(lock) {
    cnrl.report.statuss = 'APSTIPRINATS';
    cnrl.report.publicesanas_datums = null;
    cnrl.report.noraidisanas_iemesls = null;
    saveReport(lock, 'institucijas_gada_parskats_apst_nor');
  }

  function publishReport(lock) {
    cnrl.report.publicesanas_datums = new Date();
    ngDialog.openConfirm({
      template: 'components/scientific_institution_report/tabs/dialog-report-publish.html',
      scope: $scope,
      data: cnrl.report
    }).then(function () {
      cnrl.report.statuss = 'PUBLICETS';
      saveReport(lock, 'institucijas_gada_parskats_publ_nor');
    }, function () {});
  }

  function cancelPublReport(lock) {
    cnrl.report.statuss = 'APSTIPRINATS';
    cnrl.report.publicesanas_datums = null;
    saveReport(lock, 'institucijas_gada_parskats_publ_nor');
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReport() {
    $scope.allowEdit = true;
    cnrl.report = angular.copy(cnrl.reportOrigin);
  }

  function openReportP1() {
    if (cnrl.report.sadala_a && cnrl.report.sadala_a[0] && cnrl.report.sadala_a[0].id) {
      $state.go('app.scientific_institution_report_p1.edit', {
        id: cnrl.report.sadala_a[0].id
      });
    }
  }

  function openReportP2() {
    if (cnrl.report.sadala_b && cnrl.report.sadala_b[0] && cnrl.report.sadala_b[0].id) {
      $state.go('app.scientific_institution_report_p2.edit', {
        id: cnrl.report.sadala_b[0].id
      });
    }
  }

  function openReportP3() {
    if (cnrl.report.sadala_c && cnrl.report.sadala_c[0] && cnrl.report.sadala_c[0].id) {
      $state.go('app.scientific_institution_report_p3.edit', {
        id: cnrl.report.sadala_c[0].id
      });
    }
  }

  function openReportP4() {
    if (cnrl.report.sadala_d && cnrl.report.sadala_d[0] && cnrl.report.sadala_d[0].id) {
      $state.go('app.scientific_institution_report_p4.edit', {
        id: cnrl.report.sadala_d[0].id
      });
    }
  }

  function openReportP5() {
    if (cnrl.report.sadala_e && cnrl.report.sadala_e[0] && cnrl.report.sadala_e[0].id) {
      $state.go('app.scientific_institution_report_p5.edit', {
        id: cnrl.report.sadala_e[0].id
      });
    }
  }

  function openReportP6() {
    if (cnrl.report.sadala_f && cnrl.report.sadala_f[0] && cnrl.report.sadala_f[0].id) {
      $state.go('app.scientific_institution_report_p6.edit', {
        id: cnrl.report.sadala_f[0].id
      });
    }
  }

  init();
}]);
/**
 * @name scientific_institution_report_p1_form
 * @description "Zinātniskās institūcijas gada pārskata 1. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_sa_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP1FormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, PermissionService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('1. ziņas par zinātnisko institūciju', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP1 = {
    pielikumi: []
  };
  cnrl.pielikumiToDelete = [];
  cnrl.reportP1Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP1Origin = null; // functions

  cnrl.UploadService = UploadService;
  cnrl.loadData = loadData;
  cnrl.saveReportP1 = saveReportP1;
  cnrl.submitReportP1 = submitReportP1;
  cnrl.renewReportP1Editing = renewReportP1Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP1 = resetReportP1;
  cnrl.processEquip = processEquip;
  cnrl.processBuildings = processBuildings;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getExportIekartasUrl = getExportIekartasUrl;
  cnrl.getExportTelpasUrl = getExportTelpasUrl;
  cnrl.getReportP = getReportP;

  function getInclude(status) {
    if (cnrl.reportP1.statuss && cnrl.reportP1.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p1-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p1-sagatavots.html";
    }
  }

  function getExportIekartasUrl() {
    if (cnrl.reportP1.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_iekartas_a?sadala_id=' + cnrl.reportP1.id;
    } else {
      return '/data/export_xlsx/parskata_iekartas_b?sadala_id=' + cnrl.reportP1.id;
    }
  }

  function getExportTelpasUrl() {
    if (cnrl.reportP1.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_telpas_a?sadala_id=' + cnrl.reportP1.id;
    } else {
      return '/data/export_xlsx/parskata_telpas_b?sadala_id=' + cnrl.reportP1.id;
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP1Statuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    if (data.zinatnes_budzets_milj_eur) {
      data.zinatnes_budzets_milj_eur = data.zinatnes_budzets_milj_eur.toString();
    }

    if (data.zinatniska_personala_skaits) {
      data.zinatniska_personala_skaits = data.zinatniska_personala_skaits.toString();
    }

    data.pielikumiInd = {
      zi_strukt: [],
      zi_telpas: [],
      zi_iek: [],
      zi_sad: [],
      zi_fin: [],
      zi_strat: [],
      zi_pd: []
    };

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      data.pielikumi_total = data.pielikumi.length;
      angular.forEach(data.pielikumi, function (att) {
        if (att.veids === 'ZI_STRUKT') {
          data.pielikumiInd.zi_strukt.push(att);
        } else if (att.veids === 'ZI_TELPAS') {
          data.pielikumiInd.zi_telpas.push(att);
        } else if (att.veids === 'ZI_IEK') {
          data.pielikumiInd.zi_iek.push(att);
        } else if (att.veids === 'ZI_SAD') {
          data.pielikumiInd.zi_sad.push(att);
        } else if (att.veids === 'ZI_FIN') {
          data.pielikumiInd.zi_fin.push(att);
        } else if (att.veids === 'ZI_STRAT') {
          data.pielikumiInd.zi_strat.push(att);
        } else if (att.veids === 'ZI_PD') {
          data.pielikumiInd.zi_pd.push(att);
        }
      });
    }

    cnrl.reportP1 = data;
    $timeout(function () {
      cnrl.reportP1Origin = angular.copy(cnrl.reportP1);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 1. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_sa_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_gada_parskata', 'sadala').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
        }, function (aData) {
          cnrl.processData(data);
        });
      });
    }

    if ($stateParams.id && (!cnrl.reportP1.statuss || cnrl.reportP1.statuss === 'SAGATAVOSANA')) {
      dataOp.listDefault('gada_parskats_sa_iekartas_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processEquip(data);
      });
      dataOp.listDefault('gada_parskats_sa_telpas_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processBuildings(data);
      });
    }
  }

  function processEquip(data) {
    cnrl.equipAll = data;
  }

  function processBuildings(data) {
    cnrl.telpasAll = data;
  }

  function saveReportP1(lock) {
    if (!lock) {
      cnrl.reportP1.pielikumi = [];
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_strukt, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_telpas, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_iek, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_sad, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_fin, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_strat, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP1.pielikumiInd.zi_pd, function (att) {
        cnrl.reportP1.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP1.pielikumi;
      dataOp.saveDefault(cnrl.reportP1, 'institucijas_gada_parskats_sa_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP1.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP1.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP1.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 1. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function submitReportP1(lock) {
    cnrl.reportP1.statuss = 'SAGATAVOTS';
    cnrl.reportP1.iekartas = [];

    if (cnrl.equipAll) {
      for (var i = 0; cnrl.equipAll.length > i; i++) {
        var sp = {};
        sp.nosaukums = cnrl.equipAll[i].nosaukums;
        sp.razotajs = cnrl.equipAll[i].razotajs;
        sp.modelis = cnrl.equipAll[i].modelis;
        sp.iekartu_grupa_nos = cnrl.equipAll[i].iekartu_grupa_nos;
        sp.atslegvardi = cnrl.equipAll[i].atslegvardi;
        sp.apraksts = cnrl.equipAll[i].apraksts;
        sp.strukturvieniba = cnrl.equipAll[i].strukturvieniba;
        sp.kontaktinfo = cnrl.equipAll[i].kontaktinfo;
        sp.iegades_finansejums = cnrl.equipAll[i].iegades_finansejums;

        if (cnrl.equipAll[i].iegades_gads) {
          sp.iegades_gads = parseInt(cnrl.equipAll[i].iegades_gads);
        }

        sp.iekarta_id = cnrl.equipAll[i].iekarta_id;
        cnrl.reportP1.iekartas.push(sp);
      }
    }

    cnrl.reportP1.telpas = [];

    if (cnrl.telpasAll) {
      for (var i = 0; cnrl.telpasAll.length > i; i++) {
        var sp = {};
        sp.kadastra_numurs = cnrl.telpasAll[i].kadastra_numurs;
        sp.adrese = cnrl.telpasAll[i].adrese;
        sp.izmantosanas_statuss_nos = cnrl.telpasAll[i].izmantosanas_statuss_nos;
        sp.datums_no = cnrl.telpasAll[i].datums_no;
        sp.datums_lidz = cnrl.telpasAll[i].datums_lidz;
        sp.kopeja_platiba = cnrl.telpasAll[i].kopeja_platiba;
        sp.zin_darb_un_izgl_platiba = cnrl.telpasAll[i].zin_darb_un_izgl_platiba;
        sp.adm_darb_platiba = cnrl.telpasAll[i].adm_darb_platiba;
        sp.kopliet_telpu_platiba = cnrl.telpasAll[i].kopliet_telpu_platiba;
        sp.neizm_telpu_platiba = cnrl.telpasAll[i].neizm_telpu_platiba;
        sp.iznom_telpu_platiba = cnrl.telpasAll[i].iznom_telpu_platiba;
        sp.telpu_nodrosinajums_id = cnrl.telpasAll[i].telpu_nodrosinajums_id;
        cnrl.reportP1.telpas.push(sp);
      }
    }

    saveReportP1(lock);
  }

  function renewReportP1Editing(lock) {
    cnrl.reportP1.statuss = 'SAGATAVOSANA';
    cnrl.reportP1.iekartas = [];
    cnrl.reportP1.telpas = [];
    saveReportP1(lock);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP1() {
    cnrl.reportP1 = angular.copy(cnrl.reportP1Origin);
  }

  function getReportP() {
    return cnrl.reportP1;
  }

  init();
}]);
/**
 * @name scientific_institution_report_p2_form
 * @description "Zinātniskās institūcijas gada pārskata 2. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_sbeditable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP2FormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, PermissionService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('2. ziņas par zinātnē nodarbinātajiem', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP2 = {
    pielikumi: []
  };
  cnrl.pielikumiToDelete = [];
  cnrl.reportP2Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP2Origin = null; // functions

  cnrl.UploadService = UploadService;
  cnrl.loadData = loadData;
  cnrl.saveReportP2 = saveReportP2;
  cnrl.submitReportP2 = submitReportP2;
  cnrl.renewReportP2Editing = renewReportP2Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP2 = resetReportP2;
  cnrl.processData = processData;
  cnrl.processSciPersonal = processSciPersonal;
  cnrl.processAcPersonal = processAcPersonal;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getExportZiPersonalsUrl = getExportZiPersonalsUrl;
  cnrl.getExportAkPersonalsUrl = getExportAkPersonalsUrl;
  cnrl.getReportP = getReportP;

  function getInclude(status) {
    if (cnrl.reportP2.statuss && cnrl.reportP2.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p2-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p2-sagatavots.html";
    }
  }

  function getExportZiPersonalsUrl() {
    if (cnrl.reportP2.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_zi_personals_a?sadala_id=' + cnrl.reportP2.id;
    } else {
      return '/data/export_xlsx/parskata_zi_personals_b?sadala_id=' + cnrl.reportP2.id;
    }
  }

  function getExportAkPersonalsUrl() {
    if (cnrl.reportP2.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_ak_personals_a?sadala_id=' + cnrl.reportP2.id;
    } else {
      return '/data/export_xlsx/parskata_ak_personals_b?sadala_id=' + cnrl.reportP2.id;
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP2Statuses = data.data;
    });
    cnrl.instGpApkTehnPersTemplateData = null;
    cnrl.instGpAkPersTemplateData = null;
    dataOp.listDefault('gada_parskats_sb_sablons_list').then(function (data) {
      angular.forEach(data, function (sab) {
        if (sab.kods == 'INST_GP_APK_TEHN_PERS') {
          cnrl.instGpApkTehnPersTemplateData = sab;
        } else if (sab.kods == 'INST_GP_AK_PERS') {
          cnrl.instGpAkPersTemplateData = sab;
        }
      });
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    data.pielikumiInd = {
      zi_apk_pers: [],
      zi_ak_pers_nz: []
    };

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      data.pielikumi_total = data.pielikumi.length;
      angular.forEach(data.pielikumi, function (att) {
        if (att.veids === 'ZI_APK_PERS') {
          data.pielikumiInd.zi_apk_pers.push(att);
        } else if (att.veids === 'ZI_AK_PERS_NZ') {
          data.pielikumiInd.zi_ak_pers_nz.push(att);
        }
      });
    }

    cnrl.reportP2 = data;
    $timeout(function () {
      cnrl.reportP2Origin = angular.copy(cnrl.reportP2);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 2. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_sb_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_gada_parskata', 'sadala').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
        }, function (aData) {
          cnrl.processData(data);
        });
      });
    }

    if ($stateParams.id && (!cnrl.reportP2.statuss || cnrl.reportP2.statuss === 'SAGATAVOSANA')) {
      dataOp.listDefault('gada_parskats_sb_zi_personals_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processSciPersonal(data);
      });
      dataOp.listDefault('gada_parskats_sb_ak_personals_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processAcPersonal(data);
      });
    }
  }

  function processSciPersonal(data) {
    cnrl.sciPersonalAll = data;
  }

  function processAcPersonal(data) {
    cnrl.acPersonalAll = data;
  }

  function saveReportP2(lock) {
    if (!lock) {
      cnrl.reportP2.pielikumi = [];
      angular.forEach(cnrl.reportP2.pielikumiInd.zi_apk_pers, function (att) {
        cnrl.reportP2.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP2.pielikumiInd.zi_ak_pers_nz, function (att) {
        cnrl.reportP2.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP2.pielikumi;
      dataOp.saveDefault(cnrl.reportP2, 'institucijas_gada_parskats_sb_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP2.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP2.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP2.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 2. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function submitReportP2(lock) {
    cnrl.reportP2.statuss = 'SAGATAVOTS';
    cnrl.reportP2.zin_personals = [];

    if (cnrl.sciPersonalAll) {
      for (var i = 0; cnrl.sciPersonalAll.length > i; i++) {
        var sp = {};
        sp.vards = cnrl.sciPersonalAll[i].vards;
        sp.uzvards = cnrl.sciPersonalAll[i].uzvards;
        sp.amats = cnrl.sciPersonalAll[i].amats;

        if (cnrl.sciPersonalAll[i].slodze_h) {
          sp.slodze_h = parseFloat(cnrl.sciPersonalAll[i].slodze_h);
        }

        if (cnrl.sciPersonalAll[i].slodze_ple) {
          sp.slodze_ple = parseFloat(cnrl.sciPersonalAll[i].slodze_ple);
        }

        sp.personals_id = cnrl.sciPersonalAll[i].personals_id;
        sp.veids = 'ZIN_PERS';
        cnrl.reportP2.zin_personals.push(sp);
      }
    }

    cnrl.reportP2.ak_personals = [];

    if (cnrl.acPersonalAll) {
      for (var i = 0; cnrl.acPersonalAll.length > i; i++) {
        var sp = {};
        sp.vards = cnrl.acPersonalAll[i].vards;
        sp.uzvards = cnrl.acPersonalAll[i].uzvards;
        sp.amats = cnrl.acPersonalAll[i].amats;

        if (cnrl.acPersonalAll[i].slodze_h) {
          sp.slodze_h = parseFloat(cnrl.acPersonalAll[i].slodze_h);
        }

        if (cnrl.acPersonalAll[i].slodze_ple) {
          sp.slodze_ple = parseFloat(cnrl.acPersonalAll[i].slodze_ple);
        }

        sp.personals_id = cnrl.acPersonalAll[i].personals_id;
        sp.veids = 'AK_PERS';
        cnrl.reportP2.ak_personals.push(sp);
      }
    }

    saveReportP2(lock);
  }

  function renewReportP2Editing(lock) {
    cnrl.reportP2.statuss = 'SAGATAVOSANA';
    cnrl.reportP2.zin_personals = [];
    cnrl.reportP2.ak_personals = [];
    saveReportP2(lock);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP2() {
    cnrl.reportP2 = angular.copy(cnrl.reportP2Origin);
  }

  function getReportP() {
    return cnrl.reportP2;
  }

  init();
}]);
/**
 * @name scientific_institution_report_p3_form
 * @description "Zinātniskās institūcijas gada pārskata 3. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_sc_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP3FormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, PermissionService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('3. ziņas par zinātniskās darbības projektiem (tai skaitā līgumdarbiem)', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP3 = {
    pielikumi: []
  };
  cnrl.pielikumiToDelete = [];
  cnrl.reportP3Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP3Origin = null; // functions

  cnrl.UploadService = UploadService;
  cnrl.loadData = loadData;
  cnrl.saveReportP3 = saveReportP3;
  cnrl.submitReportP3 = submitReportP3;
  cnrl.renewReportP3Editing = renewReportP3Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP3 = resetReportP3;
  cnrl.processData = processData;
  cnrl.processIfSagatavosana = processIfSagatavosana;
  cnrl.processSciProjects = processSciProjects;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getExportProjektiUrl = getExportProjektiUrl;
  cnrl.getReportP = getReportP;

  function getInclude(status) {
    if (cnrl.reportP3.statuss && cnrl.reportP3.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p3-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p3-sagatavots.html";
    }
  }

  function getExportProjektiUrl() {
    if (cnrl.reportP3.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_projekti_a?sadala_id=' + cnrl.reportP3.id;
    } else {
      return '/data/export_xlsx/parskata_projekti_b?sadala_id=' + cnrl.reportP3.id;
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP3Statuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    data.pielikumiInd = {
      zi_pr_citi_dati: []
    };

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      data.pielikumi_total = data.pielikumi.length;
      angular.forEach(data.pielikumi, function (att) {
        if (att.veids === 'ZI_PR_CITI_DATI') {
          data.pielikumiInd.zi_pr_citi_dati.push(att);
        }
      });
    }

    cnrl.reportP3 = data;
    $timeout(function () {
      cnrl.reportP3Origin = angular.copy(cnrl.reportP3);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 3. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_sc_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_gada_parskata', 'sadala').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
          cnrl.processIfSagatavosana();
        }, function (aData) {
          cnrl.processData(data);
          cnrl.processIfSagatavosana();
        });
      });
    } else {
      cnrl.processIfSagatavosana();
    }
  }

  function processIfSagatavosana() {
    if ($stateParams.id && (!cnrl.reportP3.statuss || cnrl.reportP3.statuss === 'SAGATAVOSANA')) {
      dataOp.listDefault('gada_parskats_sc_zi_projekti_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processSciProjects(data);
      });
    }
  }

  function processSciProjects(data) {
    cnrl.sciProjectsAll = data;

    if (cnrl.reportP3.zin_projekti) {
      for (var i = 0; cnrl.sciProjectsAll.length > i; i++) {
        for (var j = 0; cnrl.reportP3.zin_projekti.length > j; j++) {
          if (cnrl.sciProjectsAll[i].projekts_id == cnrl.reportP3.zin_projekti[j].projekts_id) {
            cnrl.sciProjectsAll[i].publisks = cnrl.reportP3.zin_projekti[j].publisks;
            cnrl.sciProjectsAll[i].pasutitajs_publisks = cnrl.reportP3.zin_projekti[j].pasutitajs_publisks;
            cnrl.sciProjectsAll[i].partneris_publisks = cnrl.reportP3.zin_projekti[j].partneris_publisks;
            cnrl.sciProjectsAll[i].privatais_finansejums_publisks = cnrl.reportP3.zin_projekti[j].privatais_finansejums_publisks;
          }
        }
      }
    }
  }

  function saveReportP3(lock) {
    if (!lock) {
      cnrl.reportP3.zin_projekti = [];

      if (cnrl.sciProjectsAll) {
        for (var i = 0; cnrl.sciProjectsAll.length > i; i++) {
          var sp = {};
          sp.projekts_id = cnrl.sciProjectsAll[i].projekts_id;
          sp.publisks = cnrl.sciProjectsAll[i].publisks;
          sp.pasutitajs_publisks = cnrl.sciProjectsAll[i].pasutitajs_publisks;
          sp.partneris_publisks = cnrl.sciProjectsAll[i].partneris_publisks;
          sp.privatais_finansejums_publisks = cnrl.sciProjectsAll[i].privatais_finansejums_publisks;
          cnrl.reportP3.zin_projekti.push(sp);
        }
      }

      cnrl.reportP3.pielikumi = [];
      angular.forEach(cnrl.reportP3.pielikumiInd.zi_pr_citi_dati, function (att) {
        cnrl.reportP3.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP3.pielikumi;
      dataOp.saveDefault(cnrl.reportP3, 'institucijas_gada_parskats_sc_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP3.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP3.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP3.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 3. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function submitReportP3(lock) {
    if (!lock) {
      cnrl.reportP3.statuss = 'SAGATAVOTS';
      cnrl.reportP3.zin_projekti = [];

      if (cnrl.sciProjectsAll) {
        for (var i = 0; cnrl.sciProjectsAll.length > i; i++) {
          var sp = {};
          sp.nosaukums = cnrl.sciProjectsAll[i].nosaukums;
          sp.projekta_kategorija = cnrl.sciProjectsAll[i].projekta_kategorija;
          sp.projekta_veids = cnrl.sciProjectsAll[i].projekta_veids;
          sp.apaksprogramma = cnrl.sciProjectsAll[i].apaksprogramma;
          sp.projekta_nr = cnrl.sciProjectsAll[i].projekta_nr;
          sp.pasutitajs = cnrl.sciProjectsAll[i].pasutitajs;
          sp.zin_inst_partneri = cnrl.sciProjectsAll[i].zin_inst_partneri;
          sp.citi_partneri = cnrl.sciProjectsAll[i].citi_partneri;
          sp.petniecibas_darbibas_raksturs = cnrl.sciProjectsAll[i].petniecibas_darbibas_raksturs;
          sp.petniecibas_kategorija = cnrl.sciProjectsAll[i].petniecibas_kategorija;
          sp.zin_nozares = cnrl.sciProjectsAll[i].zin_nozares;
          sp.viedas_specializacijas_joma = cnrl.sciProjectsAll[i].viedas_specializacijas_joma;
          sp.uzraudzibas_komisija = cnrl.sciProjectsAll[i].uzraudzibas_komisija;

          if (cnrl.sciProjectsAll[i].nacionalais_finansejums) {
            sp.nacionalais_finansejums = parseFloat(cnrl.sciProjectsAll[i].nacionalais_finansejums);
          }

          if (cnrl.sciProjectsAll[i].piesaist_finansejums_no_arvalstu_fin_instr) {
            sp.piesaist_finansejums_no_arvalstu_fin_instr = parseFloat(cnrl.sciProjectsAll[i].piesaist_finansejums_no_arvalstu_fin_instr);
          }

          if (cnrl.sciProjectsAll[i].piesaist_finansejums_no_pasvaldibam) {
            sp.piesaist_finansejums_no_pasvaldibam = parseFloat(cnrl.sciProjectsAll[i].piesaist_finansejums_no_pasvaldibam);
          }

          if (cnrl.sciProjectsAll[i].privatais_finansejums) {
            sp.privatais_finansejums = parseFloat(cnrl.sciProjectsAll[i].privatais_finansejums);
          }

          sp.projekts_id = cnrl.sciProjectsAll[i].projekts_id;
          sp.publisks = cnrl.sciProjectsAll[i].publisks;
          sp.pasutitajs_publisks = cnrl.sciProjectsAll[i].pasutitajs_publisks;
          sp.partneris_publisks = cnrl.sciProjectsAll[i].partneris_publisks;
          sp.privatais_finansejums_publisks = cnrl.sciProjectsAll[i].privatais_finansejums_publisks;
          cnrl.reportP3.zin_projekti.push(sp);
        }
      }

      cnrl.reportP3.pielikumi = [];
      angular.forEach(cnrl.reportP3.pielikumiInd.zi_pr_citi_dati, function (att) {
        cnrl.reportP3.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP3.pielikumi;
      dataOp.saveDefault(cnrl.reportP3, 'institucijas_gada_parskats_sc_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP3.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP3.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP3.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 3. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function renewReportP3Editing(lock) {
    if (!lock) {
      cnrl.reportP3.statuss = 'SAGATAVOSANA';
      cnrl.reportP3.zin_projekti = [];
      cnrl.reportP3.pielikumi = [];
      angular.forEach(cnrl.reportP3.pielikumiInd.zi_pr_citi_dati, function (att) {
        cnrl.reportP3.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP3.pielikumi;
      dataOp.saveDefault(cnrl.reportP3, 'institucijas_gada_parskats_sc_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP3.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP3.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP3.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 3. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP3() {
    cnrl.reportP3 = angular.copy(cnrl.reportP3Origin);
  }

  function getReportP() {
    return cnrl.reportP3;
  }

  init();
}]);
/**
 * @name scientific_institution_report_p4_form
 * @description "Zinātniskās institūcijas gada pārskata 4. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_sc_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP4FormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('4. ziņas par zinātniskās darbības rezultātiem', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP4 = {};
  cnrl.reportP4Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP4Origin = null; // functions

  cnrl.formatDate = $rootScope.formatDate;
  cnrl.loadData = loadData;
  cnrl.saveReportP4 = saveReportP4;
  cnrl.submitReportP4 = submitReportP4;
  cnrl.renewReportP4Editing = renewReportP4Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP4 = resetReportP4;
  cnrl.processData = processData;
  cnrl.processIfSagatavosana = processIfSagatavosana;
  cnrl.processSciPublications = processSciPublications;
  cnrl.processSciPatients = processSciPatients;
  cnrl.processSciEvents = processSciEvents;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getExportPublikacijasUrl = getExportPublikacijasUrl;
  cnrl.getExportIntelektualaisIpasumsUrl = getExportIntelektualaisIpasumsUrl;
  cnrl.getExportPasakumiUrl = getExportPasakumiUrl;
  cnrl.getReportP = getReportP;

  function getInclude(status) {
    if (cnrl.reportP4.statuss && cnrl.reportP4.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p4-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p4-sagatavots.html";
    }
  }

  function getExportPublikacijasUrl() {
    if (cnrl.reportP4.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_publikacijas_a?sadala_id=' + cnrl.reportP4.id;
    } else {
      return '/data/export_xlsx/parskata_publikacijas_b?sadala_id=' + cnrl.reportP4.id;
    }
  }

  function getExportIntelektualaisIpasumsUrl() {
    if (cnrl.reportP4.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_intelektualais_ipasums_a?sadala_id=' + cnrl.reportP4.id;
    } else {
      return '/data/export_xlsx/parskata_intelektualais_ipasums_b?sadala_id=' + cnrl.reportP4.id;
    }
  }

  function getExportPasakumiUrl() {
    if (cnrl.reportP4.statuss === 'SAGATAVOSANA') {
      return '/data/export_xlsx/parskata_pasakumi_a?sadala_id=' + cnrl.reportP4.id;
    } else {
      return '/data/export_xlsx/parskata_pasakumi_b?sadala_id=' + cnrl.reportP4.id;
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP4Statuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    cnrl.reportP4 = data;
    $timeout(function () {
      cnrl.reportP4Origin = angular.copy(cnrl.reportP4);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 4. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_sd_editable').then(function (data) {
        cnrl.processData(data);
        cnrl.processIfSagatavosana();
      });
    } else {
      cnrl.processIfSagatavosana();
    }
  }

  function processIfSagatavosana() {
    if ($stateParams.id && (!cnrl.reportP4.statuss || cnrl.reportP4.statuss === 'SAGATAVOSANA')) {
      dataOp.listDefault('gada_parskats_sd_publikacijas_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processSciPublications(data);
      });
      dataOp.listDefault('gada_parskats_sd_intelektualais_ipasums_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processSciPatients(data);
      });
      dataOp.listDefault('gada_parskats_sd_pasakumi_list', {
        sadala_id: $stateParams.id
      }).then(function (data) {
        cnrl.processSciEvents(data);
      });
    }
  }

  function processSciPublications(data) {
    cnrl.sciPublicationsAll = data;

    if (cnrl.reportP4.publikacijas) {
      for (var i = 0; cnrl.sciPublicationsAll.length > i; i++) {
        if (cnrl.sciPublicationsAll[i].rez_veids_id) {
          for (var j = 0; cnrl.reportP4.publikacijas.length > j; j++) {
            if (cnrl.sciPublicationsAll[i].zin_rezultats_id == cnrl.reportP4.publikacijas[j].zin_rezultats_id) {
              cnrl.sciPublicationsAll[i].atbilst_bf_kriterijiem = cnrl.reportP4.publikacijas[j].atbilst_bf_kriterijiem;
            }
          }
        }
      }
    }
  }

  function processSciPatients(data) {
    cnrl.sciPatientsAll = data;
  }

  function processSciEvents(data) {
    cnrl.sciEventsAll = data;
  }

  function saveReportP4(lock) {
    if (!lock) {
      cnrl.reportP4.publikacijas = [];

      if (cnrl.sciPublicationsAll) {
        for (var i = 0; cnrl.sciPublicationsAll.length > i; i++) {
          if (cnrl.sciPublicationsAll[i].rez_veids_id) {
            var sp = {};
            sp.atbilst_bf_kriterijiem = cnrl.sciPublicationsAll[i].atbilst_bf_kriterijiem;
            sp.zin_rezultats_id = cnrl.sciPublicationsAll[i].zin_rezultats_id;
            cnrl.reportP4.publikacijas.push(sp);
          }
        }
      }

      dataOp.saveDefault(cnrl.reportP4, 'institucijas_gada_parskats_sd_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (cnrl.reportP4.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 4. sadaļa!', null, 'Gada pārskati'));
          $state.reload();
        }
      }, $scope.handleError);
    }
  }

  function submitReportP4(lock) {
    if (!lock) {
      cnrl.reportP4.statuss = 'SAGATAVOTS';
      cnrl.reportP4.publikacijas = [];
      cnrl.reportP4.patienti = [];
      cnrl.reportP4.pasakumi = [];

      if (cnrl.sciPublicationsAll) {
        for (var i = 0; cnrl.sciPublicationsAll.length > i; i++) {
          var sp = {};
          sp.nosaukums = cnrl.sciPublicationsAll[i].nosaukums;
          sp.autori = cnrl.sciPublicationsAll[i].autori;
          sp.atbilst_bf_kriterijiem = cnrl.sciPublicationsAll[i].atbilst_bf_kriterijiem;
          sp.zin_institucijas = cnrl.sciPublicationsAll[i].zin_institucijas;
          sp.zin_nozares = cnrl.sciPublicationsAll[i].zin_nozares;
          sp.zurnals = cnrl.sciPublicationsAll[i].zurnals;
          sp.lpp = cnrl.sciPublicationsAll[i].lpp;
          sp.sejums = cnrl.sciPublicationsAll[i].sejums;

          if (cnrl.sciPublicationsAll[i].izdosanas_gads) {
            sp.izdosanas_gads = cnrl.sciPublicationsAll[i].izdosanas_gads.toString();
          }

          sp.rez_veids = cnrl.sciPublicationsAll[i].rez_veids;
          sp.identifikatori = cnrl.sciPublicationsAll[i].identifikatori;
          sp.avota_url = cnrl.sciPublicationsAll[i].avota_url;
          sp.projekts = cnrl.sciPublicationsAll[i].projekts;
          sp.zin_rezultats_id = cnrl.sciPublicationsAll[i].zin_rezultats_id;
          cnrl.reportP4.publikacijas.push(sp);
        }
      }

      if (cnrl.sciPatientsAll) {
        for (var i = 0; cnrl.sciPatientsAll.length > i; i++) {
          var sp = {};
          sp.nosaukums = cnrl.sciPatientsAll[i].nosaukums;
          sp.rez_veids = cnrl.sciPatientsAll[i].rez_veids;
          sp.autori = cnrl.sciPatientsAll[i].autori;
          sp.zin_institucijas = cnrl.sciPatientsAll[i].zin_institucijas;
          sp.zin_nozares = cnrl.sciPatientsAll[i].zin_nozares;
          sp.registracijas_veids = cnrl.sciPatientsAll[i].registracijas_veids;
          sp.registra_nosaukums = cnrl.sciPatientsAll[i].registra_nosaukums;
          sp.registracijas_nr = cnrl.sciPatientsAll[i].registracijas_nr;
          sp.registracijas_datums = cnrl.sciPatientsAll[i].registracijas_datums;
          sp.registracija_lidz = cnrl.sciPatientsAll[i].registracija_lidz;
          sp.info_url = cnrl.sciPatientsAll[i].info_url;
          sp.projekts = cnrl.sciPatientsAll[i].projekts;
          sp.zin_rezultats_id = cnrl.sciPatientsAll[i].zin_rezultats_id;
          cnrl.reportP4.patienti.push(sp);
        }
      }

      if (cnrl.sciEventsAll) {
        for (var i = 0; cnrl.sciEventsAll.length > i; i++) {
          var sp = {};
          sp.nosaukums = cnrl.sciEventsAll[i].nosaukums;
          sp.rez_veids = cnrl.sciEventsAll[i].rez_veids;
          sp.merogs = cnrl.sciEventsAll[i].merogs;
          sp.zin_institucijas = cnrl.sciEventsAll[i].zin_institucijas;
          sp.zin_nozares = cnrl.sciEventsAll[i].zin_nozares;
          sp.datums_no = cnrl.sciEventsAll[i].datums_no;
          sp.datums_lidz = cnrl.sciEventsAll[i].datums_lidz;
          sp.norises_vieta = cnrl.sciEventsAll[i].norises_vieta;
          sp.organizators = cnrl.sciEventsAll[i].organizators;
          sp.projekts = cnrl.sciEventsAll[i].projekts;
          sp.zin_rezultats_id = cnrl.sciEventsAll[i].zin_rezultats_id;
          cnrl.reportP4.pasakumi.push(sp);
        }
      }

      dataOp.saveDefault(cnrl.reportP4, 'institucijas_gada_parskats_sd_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (cnrl.reportP4.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 4. sadaļa!', null, 'Gada pārskati'));
          $state.reload();
        }
      }, $scope.handleError);
    }
  }

  function renewReportP4Editing(lock) {
    if (!lock) {
      cnrl.reportP4.statuss = 'SAGATAVOSANA';
      cnrl.reportP4.publikacijas = [];
      cnrl.reportP4.patienti = [];
      cnrl.reportP4.pasakumi = [];
      dataOp.saveDefault(cnrl.reportP4, 'institucijas_gada_parskats_sd_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (cnrl.reportP4.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 4. sadaļa!', null, 'Gada pārskati'));
          $state.reload();
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP4() {
    cnrl.reportP4 = angular.copy(cnrl.reportP4Origin);
  }

  function getReportP() {
    return cnrl.reportP4;
  }

  init();
}]);
/**
 * @name scientific_institution_report_p5_form
 * @description "Zinātniskās institūcijas gada pārskata 5. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_se_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP5FormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, PermissionService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('5. citas zinātniskajai institūcijai būtiskas ziņas', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP5 = {
    pielikumi: []
  };
  cnrl.pielikumiToDelete = [];
  cnrl.reportP5Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP5Origin = null; // functions

  cnrl.UploadService = UploadService;
  cnrl.loadData = loadData;
  cnrl.saveReportP5 = saveReportP5;
  cnrl.submitReportP5 = submitReportP5;
  cnrl.renewReportP5Editing = renewReportP5Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP5 = resetReportP5;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getReportP = getReportP;

  function getInclude(status) {
    if (cnrl.reportP5.statuss && cnrl.reportP5.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p5-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p5-sagatavots.html";
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP5Statuses = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    data.pielikumiInd = {
      snieg_fin_apr_dati: [],
      zi_citi_dati: []
    };

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      data.pielikumi_total = data.pielikumi.length;
      angular.forEach(data.pielikumi, function (att) {
        if (att.veids === 'ZI_CITI_DATI') {
          data.pielikumiInd.zi_citi_dati.push(att);
        } else if (att.veids === 'SNIEG_FIN_APR_DATI') {
          data.pielikumiInd.snieg_fin_apr_dati.push(att);
        }
      });
    }

    cnrl.reportP5 = data;
    $timeout(function () {
      cnrl.reportP5Origin = angular.copy(cnrl.reportP5);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 5. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_se_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_gada_parskata', 'sadala').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
        }, function (aData) {
          cnrl.processData(data);
        });
      });
    }
  }

  function saveReportP5(lock) {
    if (!lock) {
      cnrl.reportP5.pielikumi = [];
      angular.forEach(cnrl.reportP5.pielikumiInd.snieg_fin_apr_dati, function (att) {
        cnrl.reportP5.pielikumi.push(att);
      });
      angular.forEach(cnrl.reportP5.pielikumiInd.zi_citi_dati, function (att) {
        cnrl.reportP5.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP5.pielikumi;
      dataOp.saveDefault(cnrl.reportP5, 'institucijas_gada_parskats_se_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP5.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP5.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP5.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 5. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function submitReportP5(lock) {
    cnrl.reportP5.statuss = 'SAGATAVOTS';
    saveReportP5(lock);
  }

  function renewReportP5Editing(lock) {
    cnrl.reportP5.statuss = 'SAGATAVOSANA';
    cnrl.reportP5.zin_projekti = [];
    saveReportP5(lock);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP5() {
    cnrl.reportP5 = angular.copy(cnrl.reportP5Origin);
  }

  function getReportP() {
    return cnrl.reportP5;
  }

  init();
}]);
/**
 * @name scientific_institution_report_p6_form
 * @description "Zinātniskās institūcijas gada pārskata 6. sadaļa" forma
 * @param  {string} url /data/institucijas_gada_parskats_sf_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionReportP6FormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', 'gettextUtil', function (UploadService, PermissionService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $rootScope, $q, $window, gettextUtil) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('6. CSP statistikas pārskats', null, 'Gada pārskati'),
    active: true
  }];
  cnrl.reportP6 = {
    pielikumi: []
  };
  cnrl.pielikumiToDelete = [];
  cnrl.reportP6Statuses = null;
  cnrl.sciBranchesLzp = null;
  cnrl.expertCommissions = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportP6Origin = null; // functions

  cnrl.UploadService = UploadService;
  cnrl.loadData = loadData;
  cnrl.saveReportP6 = saveReportP6;
  cnrl.submitReportP6 = submitReportP6;
  cnrl.renewReportP6Editing = renewReportP6Editing;
  cnrl.setEditMode = setEditMode;
  cnrl.resetReportP6 = resetReportP6;
  cnrl.processCsbReportPositions = processCsbReportPositions;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.getInclude = getInclude;
  cnrl.getReportP = getReportP;
  cnrl.renderValue = renderValue;
  cnrl.recalculateT1Totals = recalculateT1Totals;
  cnrl.recalculateT2Totals = recalculateT2Totals;
  cnrl.recalculateT3Totals = recalculateT3Totals;
  cnrl.recalculateT4Totals = recalculateT4Totals;
  cnrl.recalculateT5Totals = recalculateT5Totals;
  cnrl.recalculateT6Totals = recalculateT6Totals;
  cnrl.recalculateT7Totals = recalculateT7Totals;
  cnrl.recalculateT8Totals = recalculateT8Totals;
  cnrl.recalculateT9Totals = recalculateT9Totals;
  cnrl.recalculateT10Totals = recalculateT10Totals;
  cnrl.recalculateT11Totals = recalculateT11Totals;
  cnrl.recalculateT12Totals = recalculateT12Totals;
  cnrl.recalculateT13Totals = recalculateT13Totals;
  cnrl.recalculateT14Totals = recalculateT14Totals;
  cnrl.addErrCode = addErrCode;
  cnrl.removeErrCode = removeErrCode;
  cnrl.containsErrCode = containsErrCode;
  cnrl.getValidationErrMsg = getValidationErrMsg;
  cnrl.hasValidationErrors = hasValidationErrors;
  cnrl.isSpecialT12Code = isSpecialT12Code;
  cnrl.getT12Positions = getT12Positions;
  cnrl.expandT12PositionList = expandT12PositionList;
  cnrl.shrinkT12PositionList = shrinkT12PositionList;
  cnrl.isSpecialT13Code = isSpecialT13Code;
  cnrl.getT13Positions = getT13Positions;
  cnrl.expandT13PositionList = expandT13PositionList;
  cnrl.shrinkT13PositionList = shrinkT13PositionList;

  function expandT12PositionList() {
    if (!cnrl.reportP6.valstu_skaits) {
      cnrl.reportP6.valstu_skaits = 0;
    }

    cnrl.reportP6.valstu_skaits = cnrl.reportP6.valstu_skaits + 1;
  }

  function shrinkT12PositionList() {
    if (cnrl.reportP6.valstu_skaits && cnrl.reportP6.valstu_skaits > 0) {
      cnrl.reportP6.valstu_skaits = cnrl.reportP6.valstu_skaits - 1;
    }

    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === 'T12';
      });
      var cnt = 0;

      for (var i = 0; tmpPos.length > i; i++) {
        if (isSpecialT12Code(tmpPos[i].kods)) {
          if (!cnrl.reportP6.valstu_skaits || cnt >= cnrl.reportP6.valstu_skaits) {
            tmpPos[i].valsts_id = null;
            tmpPos[i].vertiba_a = null;
            tmpPos[i].vertiba_b = null;
          }

          cnt = cnt + 1;
        }
      }
    }
  }

  function getT12Positions() {
    var ps = [];

    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === 'T12';
      });
      var cnt = 0;

      for (var i = 0; tmpPos.length > i; i++) {
        if (isSpecialT12Code(tmpPos[i].kods)) {
          if (cnrl.reportP6.valstu_skaits && cnt < cnrl.reportP6.valstu_skaits) {
            ps.push(tmpPos[i]);
          }

          cnt = cnt + 1;
        } else {
          ps.push(tmpPos[i]);
        }
      }
    }

    return ps;
  }

  function isSpecialT12Code(code) {
    var isc = false;

    if (parseInt(code) >= 2908) {
      isc = true;
    }

    return isc;
  }

  function expandT13PositionList() {
    if (!cnrl.reportP6.cits_finansejums_skaits) {
      cnrl.reportP6.cits_finansejums_skaits = 0;
    }

    cnrl.reportP6.cits_finansejums_skaits = cnrl.reportP6.cits_finansejums_skaits + 1;
  }

  function shrinkT13PositionList() {
    if (cnrl.reportP6.cits_finansejums_skaits && cnrl.reportP6.cits_finansejums_skaits > 0) {
      cnrl.reportP6.cits_finansejums_skaits = cnrl.reportP6.cits_finansejums_skaits - 1;
    }

    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === 'T13';
      });
      var cnt = 0;

      for (var i = 0; tmpPos.length > i; i++) {
        if (isSpecialT13Code(tmpPos[i].kods)) {
          if (!cnrl.reportP6.cits_finansejums_skaits || cnt >= cnrl.reportP6.cits_finansejums_skaits) {
            tmpPos[i].valsts_id = null;
            tmpPos[i].vertiba_a = null;
            tmpPos[i].vertiba_b = null;
            tmpPos[i].vertiba_c = null;
          }

          cnt = cnt + 1;
        }
      }
    }
  }

  function getT13Positions() {
    var ps = [];

    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === 'T13';
      });
      var cnt = 0;

      for (var i = 0; tmpPos.length > i; i++) {
        if (isSpecialT13Code(tmpPos[i].kods)) {
          if (cnrl.reportP6.cits_finansejums_skaits && cnt < cnrl.reportP6.cits_finansejums_skaits) {
            ps.push(tmpPos[i]);
          }

          cnt = cnt + 1;
        } else {
          ps.push(tmpPos[i]);
        }
      }
    }

    return ps;
  }

  function isSpecialT13Code(code) {
    var isc = false;

    if (parseInt(code) >= 31610) {
      isc = true;
    }

    return isc;
  }

  function getInclude(status) {
    if (cnrl.reportP6.statuss && cnrl.reportP6.statuss === 'SAGATAVOSANA') {
      return "components/scientific_institution_report/tabs/tab-maindata-p6-sagatavosana.html";
    } else {
      return "components/scientific_institution_report/tabs/tab-maindata-p6-sagatavots.html";
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getCodificator('scientific_institution_report_part_status').then(function (data) {
      cnrl.reportP6Statuses = data.data;
    });
    dataOp.getCodificator('countries').then(function (data) {
      cnrl.countries = data.data;
    });
    loadData();
  }

  function processData(data) {
    if (data.institucija_id) {
      data.institucija_id = data.institucija_id.toString();
    }

    if (data.parskats_id) {
      data.parskats_id = data.parskats_id.toString();
    }

    data.pielikumiInd = {
      zi_citi_dati: []
    };

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      data.pielikumi_total = data.pielikumi.length;
      angular.forEach(data.pielikumi, function (att) {
        if (att.veids === 'ZI_CITI_DATI') {
          data.pielikumiInd.zi_citi_dati.push(att);
        }
      });
    }

    cnrl.reportP6 = data;

    if (!cnrl.reportP6.statuss || cnrl.reportP6.statuss === 'SAGATAVOSANA') {
      dataOp.listDefault('gada_parskats_sf_csp_parskata_pozicijas_list', {
        sadala_id: cnrl.reportP6.id
      }).then(function (data) {
        cnrl.processCsbReportPositions(data);
      });
    }

    $timeout(function () {
      cnrl.reportP6Origin = angular.copy(cnrl.reportP6);
    });
  }

  function processCsbReportPositions(data) {
    cnrl.csbReportPositionsAll = data;

    for (var i = 0; cnrl.csbReportPositionsAll.length > i; i++) {
      var kods2 = cnrl.csbReportPositionsAll[i].kods;

      if (kods2 === '32100') {
        kods2 = '32150';
      } else if (kods2 === '12210') {
        kods2 = '12212';
      }

      cnrl.csbReportPositionsAll[i].kods2 = kods2.replace(/[0]+$/, '');
    }

    for (var i = 0; cnrl.csbReportPositionsAll.length > i; i++) {
      if (cnrl.csbReportPositionsAll.length - 1 > i) {
        if (gettextUtil.startsWith(cnrl.csbReportPositionsAll[i + 1].kods2, cnrl.csbReportPositionsAll[i].kods2)) {
          cnrl.csbReportPositionsAll[i].is_leaf = false;
        } else {
          cnrl.csbReportPositionsAll[i].is_leaf = true;
        }
      } else {
        cnrl.csbReportPositionsAll[i].is_leaf = true;
      }

      cnrl.csbReportPositionsAll[i].kludas_kods1 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods2 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods3 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods4 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods5 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods6 = '=';
      cnrl.csbReportPositionsAll[i].kludas_kods7 = '=';
    }

    for (var i = 0; cnrl.csbReportPositionsAll.length > i; i++) {
      for (var j = 0; cnrl.reportP6.pozicijas.length > j; j++) {
        if (cnrl.csbReportPositionsAll[i].kods === cnrl.reportP6.pozicijas[j].kods) {
          cnrl.csbReportPositionsAll[i].vertiba_a = cnrl.reportP6.pozicijas[j].vertiba_a;
          cnrl.csbReportPositionsAll[i].vertiba_b = cnrl.reportP6.pozicijas[j].vertiba_b;
          cnrl.csbReportPositionsAll[i].vertiba_c = cnrl.reportP6.pozicijas[j].vertiba_c;
          cnrl.csbReportPositionsAll[i].vertiba_d = cnrl.reportP6.pozicijas[j].vertiba_d;
          cnrl.csbReportPositionsAll[i].vertiba_e = cnrl.reportP6.pozicijas[j].vertiba_e;
          cnrl.csbReportPositionsAll[i].vertiba_f = cnrl.reportP6.pozicijas[j].vertiba_f;
          cnrl.csbReportPositionsAll[i].vertiba_g = cnrl.reportP6.pozicijas[j].vertiba_g;
          cnrl.csbReportPositionsAll[i].komentars = cnrl.reportP6.pozicijas[j].komentars;

          if (cnrl.reportP6.pozicijas[j].valsts_id) {
            cnrl.csbReportPositionsAll[i].valsts_id = cnrl.reportP6.pozicijas[j].valsts_id.toString();
          }

          cnrl.csbReportPositionsAll[i].cits_finansejums = cnrl.reportP6.pozicijas[j].cits_finansejums;
          break;
        }
      }
    }

    recalculateT1Totals();
    recalculateT2Totals();
    recalculateT3Totals();
    recalculateT4Totals();
    recalculateT5Totals();
    recalculateT6Totals();
    recalculateT7Totals();
    recalculateT8Totals();
    recalculateT9Totals();
    recalculateT10Totals();
    recalculateT11Totals();
    recalculateT12Totals();
    recalculateT13Totals();
    recalculateT14Totals();
  }

  function loadData() {
    if ($stateParams.id) {
      cnrl.title = gettextCatalog.getString('Zinātniskās institūcijas gada pārskata 6. sadaļa', null, 'Gada pārskati');
      dataOp.getDefaultById($stateParams.id, 'institucijas_gada_parskats_sf_editable').then(function (data) {
        dataOp.getAttachmentsByIdNT($stateParams.id, 'institucijas_gada_parskata', 'sadala').then(function (aData) {
          data.pielikumi = aData;
          cnrl.processData(data);
        }, function (aData) {
          cnrl.processData(data);
        });
      });
    }
  }

  function saveReportP6(lock, statusOld) {
    if (!lock) {
      if (cnrl.reportP6.statuss === 'SAGATAVOTS' && statusOld === 'SAGATAVOSANA' || cnrl.reportP6.statuss === 'SAGATAVOSANA' && statusOld !== 'SAGATAVOTS') {
        cnrl.reportP6.pozicijas = [];

        if (cnrl.csbReportPositionsAll) {
          var t12ValstisCnt = 0;
          var t13CitsFinansejumsCnt = 0;

          for (var i = 0; cnrl.csbReportPositionsAll.length > i; i++) {
            var sp = {};
            sp.tbl_kods = cnrl.csbReportPositionsAll[i].tbl_kods;
            sp.kods = cnrl.csbReportPositionsAll[i].kods;
            sp.nosaukums = cnrl.csbReportPositionsAll[i].nosaukums;
            sp.apraksts = cnrl.csbReportPositionsAll[i].apraksts;
            sp.paskaidrojums = cnrl.csbReportPositionsAll[i].paskaidrojums;
            sp.limenis = cnrl.csbReportPositionsAll[i].limenis;

            if (cnrl.csbReportPositionsAll[i].vertiba_a) {
              sp.vertiba_a = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_a);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_b) {
              sp.vertiba_b = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_b);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_c) {
              sp.vertiba_c = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_c);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_d) {
              sp.vertiba_d = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_d);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_e) {
              sp.vertiba_e = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_e);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_f) {
              sp.vertiba_f = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_f);
            }

            if (cnrl.csbReportPositionsAll[i].vertiba_g) {
              sp.vertiba_g = parseFloat(cnrl.csbReportPositionsAll[i].vertiba_g);
            }

            sp.komentars = cnrl.csbReportPositionsAll[i].komentars;
            sp.valsts_id = cnrl.csbReportPositionsAll[i].valsts_id;
            sp.cits_finansejums = cnrl.csbReportPositionsAll[i].cits_finansejums;
            var collectSp = true;

            if (cnrl.csbReportPositionsAll[i].tbl_kods === 'T12') {
              if (isSpecialT12Code(cnrl.csbReportPositionsAll[i].kods)) {
                if (!cnrl.reportP6.valstu_skaits || t12ValstisCnt >= cnrl.reportP6.valstu_skaits) {
                  collectSp = false;
                }

                t12ValstisCnt = t12ValstisCnt + 1;
              }
            } else if (cnrl.csbReportPositionsAll[i].tbl_kods === 'T13') {
              if (isSpecialT13Code(cnrl.csbReportPositionsAll[i].kods)) {
                if (!cnrl.reportP6.cits_finansejums_skaits || t13CitsFinansejumsCnt >= cnrl.reportP6.cits_finansejums_skaits) {
                  collectSp = false;
                }

                t13CitsFinansejumsCnt = t13CitsFinansejumsCnt + 1;
              }
            }

            if (collectSp) {
              cnrl.reportP6.pozicijas.push(sp);
            }
          }
        }
      }

      cnrl.reportP6.pielikumi = [];
      angular.forEach(cnrl.reportP6.pielikumiInd.zi_citi_dati, function (att) {
        cnrl.reportP6.pielikumi.push(att);
      });
      var attachmentOrigin = cnrl.reportP6.pielikumi;
      dataOp.saveDefault(cnrl.reportP6, 'institucijas_gada_parskats_sf_editable').then(function (data) {
        $rootScope.allowPrint = true;
        angular.forEach(cnrl.reportP6.pielikumi, function (att) {
          att.sadala_id = data.data.id;
        });

        if (cnrl.pielikumiToDelete && cnrl.pielikumiToDelete.length) {
          cnrl.pielikumiToDelete.join(',');
          Restangular.one("data").one("institucijas_gada_parskata_pielikumi", cnrl.pielikumiToDelete).remove(cnrl.pielikumiToDelete, {
            'Content-Type': 'application/json'
          }).then(function (response) {
            cnrl.pielikumiToDelete = [];
          });
        }

        dataOp.saveAttachmentsByIdNT(cnrl.reportP6.pielikumi, 'institucijas_gada_parskata').then(function (aData) {
          data.data.pielikumi = [];
          angular.forEach(aData, function (val, key) {
            data.data.pielikumi.push(val.data);
          });

          if (cnrl.reportP6.id) {
            Notification.success(gettextCatalog.getString('Veiksmīgi labota zinātniskās institūcijas gada pārskata 6. sadaļa!', null, 'Gada pārskati'));
            $state.reload();
          }
        }, $scope.handleError);
      }, $scope.handleError);
    }
  }

  function submitReportP6(lock) {
    var statusOld = cnrl.reportP6.statuss;
    cnrl.reportP6.statuss = 'SAGATAVOTS';
    saveReportP6(lock, statusOld);
  }

  function renewReportP6Editing(lock) {
    var statusOld = cnrl.reportP6.statuss;
    cnrl.reportP6.statuss = 'SAGATAVOSANA';
    saveReportP6(lock, statusOld);
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetReportP6() {
    cnrl.reportP6 = angular.copy(cnrl.reportP6Origin);
  }

  function getReportP() {
    return cnrl.reportP6;
  }

  function renderValue(num, prec) {
    if (num && num != null) {
      return num.toFixed(prec);
    } else {
      return '-';
    }
  }

  function recalculateT1Totals(kods, calcDeps) {
    recalculateAtLevel('T01', kods, 2, '>=');
    recalculateAtLevel('T01', kods, 1, '=');
    checkLeq('1110', '1111', 'T01E1', 1);
    checkLeq('1120', '1121', 'T01E2', 1);
    checkLeq('1130', '1131', 'T01E3', 1);
    checkReq('1100', 'T01E4');

    if (calcDeps) {
      recalculateT2Totals(kods, calcDeps);
      recalculateT3Totals(kods, calcDeps);
    }
  }

  function recalculateT2Totals(kods, calcDeps) {
    recalculateAtLevel('T02', kods, 2, '=');
    recalculateAtLevel('T02', kods, 1, '=');
    checkSum('12000', ['1100'], 'T02E1K1', 1);
  }

  function recalculateT3Totals(kods, calcDeps) {
    recalculateAtLevel('T03', kods, 4, '>=');
    recalculateAtLevel('T03', kods, 3, '=');
    recalculateAtLevel('T03', kods, 2, '=');
    recalculateAtLevel('T03', kods, 1, '=');
    checkLeq('131120', '131121', 'T03E1', 1);
    checkSum('131000', ['1100'], 'T03E2K1', 1);

    if (calcDeps) {
      recalculateT13Totals(kods, calcDeps);
    }
  }

  function recalculateT4Totals(kods, calcDeps) {
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K1', 1);
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K2', 2);
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K3', 3);
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K4', 4);
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K5', 5);
    checkSum('21000', ['21010', '21020', '21030'], 'T04E1K6', 6);
    checkLeq2('T04', 'T04E2K1K2', 2, 1);
    checkLeq2('T04', 'T04E2K3K4', 4, 3);
    checkLeq2('T04', 'T04E2K5K6', 6, 5);
    checkLeq2('T04', 'T04E2K1K5', 1, 5);
    checkLeq2('T04', 'T04E2K2K6', 2, 6);
    checkSumSpecial('T04', 5, 1, 3, 'T04E20K5', 'T04E21K5');
    checkSumSpecial('T04', 6, 2, 4, 'T04E20K6', 'T04E21K6');
    checkLeq3('21001', '21000', 'T04E3', 1);
    checkLeq3('21011', '21010', 'T04E4', 1);
    checkLeq3('21110', '21100', 'T04E5', 1);
    checkLeq3('21101', '21100', 'T04E6', 1);
    checkLeq3('21111', '21110', 'T04E7', 1);
    checkLeq3('21210', '21200', 'T04E8', 1);

    if (calcDeps) {
      recalculateT5Totals(kods, calcDeps);
      recalculateT8Totals(kods, calcDeps);
      recalculateT11Totals(kods, calcDeps);
      recalculateT12Totals(kods, calcDeps);
    }
  }

  function recalculateT5Totals(kods, calcDeps) {
    recalculateAtLevel('T05', kods, 1, '=', true);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K1', 1);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K2', 2);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K3', 3);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K4', 4);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K5', 5);
    checkSum('2200', ['21000', '21100', '21200'], 'T05E1K6', 6);
    checkLeq2('T05', 'T05E2K1K2', 2, 1);
    checkLeq2('T05', 'T05E2K3K4', 4, 3);
    checkLeq2('T05', 'T05E2K5K6', 6, 5);
    checkLeq2('T05', 'T05E2K1K5', 1, 5);
    checkLeq2('T05', 'T05E2K2K6', 2, 6);
    checkSumSpecial('T05', 5, 1, 3, 'T05E20K5', 'T05E21K5');
    checkSumSpecial('T05', 6, 2, 4, 'T05E20K6', 'T05E21K6');

    if (calcDeps) {
      recalculateT6Totals(kods, calcDeps);
    }
  }

  function recalculateT6Totals(kods, calcDeps) {
    recalculateAtLevel('T06', kods, 1, '=', true);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K1', 1);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K2', 2);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K3', 3);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K4', 4);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K5', 5);
    checkSum('2300', ['21010', '21110', '21210'], 'T06E1K6', 6);
    checkLeq2('T06', 'T06E2K1K2', 2, 1);
    checkLeq2('T06', 'T06E2K3K4', 4, 3);
    checkLeq2('T06', 'T06E2K5K6', 6, 5);
    checkLeq2('T06', 'T06E2K1K5', 1, 5);
    checkLeq2('T06', 'T06E2K2K6', 2, 6);
    checkSumSpecial('T06', 5, 1, 3, 'T06E20K5', 'T06E21K5');
    checkSumSpecial('T06', 6, 2, 4, 'T06E20K6', 'T06E21K6');
    checkLeq3('2300', '2200', 'T06E3', 1);
    checkLeq3('2301', '2201', 'T06E4', 1);
    checkLeq3('2302', '2202', 'T06E5', 1);
    checkLeq3('2303', '2203', 'T06E6', 1);
    checkLeq3('2304', '2204', 'T06E7', 1);
    checkLeq3('2305', '2205', 'T06E8', 1);

    if (calcDeps) {
      recalculateT7Totals(kods, calcDeps);
    }
  }

  function recalculateT7Totals(kods) {
    recalculateAtLevel('T07', kods, 1, '=', true);
    checkSum('2400', ['21010'], 'T07E1K1', 1);
    checkSum('2400', ['21010'], 'T07E1K2', 2);
    checkSum('2400', ['21010'], 'T07E1K3', 3);
    checkSum('2400', ['21010'], 'T07E1K4', 4);
    checkSum('2400', ['21010'], 'T07E1K5', 5);
    checkSum('2400', ['21010'], 'T07E1K6', 6);
    checkLeq2('T07', 'T07E2K1K2', 2, 1);
    checkLeq2('T07', 'T07E2K3K4', 4, 3);
    checkLeq2('T07', 'T07E2K5K6', 6, 5);
    checkLeq2('T07', 'T07E2K1K5', 1, 5);
    checkLeq2('T07', 'T07E2K2K6', 2, 6);
    checkSumSpecial('T07', 5, 1, 3, 'T07E20K5', 'T07E21K5');
    checkSumSpecial('T07', 6, 2, 4, 'T07E20K6', 'T07E21K6');
    checkLeq3('2400', '2300', 'T07E3', 1);
    checkLeq3('2401', '2301', 'T07E4', 1);
    checkLeq3('2402', '2302', 'T07E5', 1);
    checkLeq3('2403', '2303', 'T07E6', 1);
    checkLeq3('2404', '2304', 'T07E7', 1);
    checkLeq3('2405', '2305', 'T07E8', 1);
  }

  function recalculateT8Totals(kods, calcDeps) {
    recalculateAtLevel('T08', kods, 1, '=', true);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K1', 1);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K2', 2);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K3', 3);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K4', 4);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K5', 5);
    checkSum('2500', ['21000', '21100', '21200'], 'T08E1K6', 6);
    checkLeq2('T08', 'T08E2K1K2', 2, 1);
    checkLeq2('T08', 'T08E2K3K4', 4, 3);
    checkLeq2('T08', 'T08E2K5K6', 6, 5);
    checkLeq2('T08', 'T08E2K1K5', 1, 5);
    checkLeq2('T08', 'T08E2K2K6', 2, 6);
    checkSumSpecial('T08', 5, 1, 3, 'T08E20K5', 'T08E21K5');
    checkSumSpecial('T08', 6, 2, 4, 'T08E20K6', 'T08E21K6');

    if (calcDeps) {
      recalculateT9Totals(kods, calcDeps);
    }
  }

  function recalculateT9Totals(kods, calcDeps) {
    recalculateAtLevel('T09', kods, 1, '=', true);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K1', 1);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K2', 2);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K3', 3);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K4', 4);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K5', 5);
    checkSum('2600', ['21010', '21110', '21210'], 'T09E1K6', 6);
    checkLeq2('T09', 'T09E2K1K2', 2, 1);
    checkLeq2('T09', 'T09E2K3K4', 4, 3);
    checkLeq2('T09', 'T09E2K5K6', 6, 5);
    checkLeq2('T09', 'T09E2K1K5', 1, 5);
    checkLeq2('T09', 'T09E2K2K6', 2, 6);
    checkSumSpecial('T09', 5, 1, 3, 'T09E20K5', 'T09E21K5');
    checkSumSpecial('T09', 6, 2, 4, 'T09E20K6', 'T09E21K6');
    checkLeq3('2600', '2500', 'T09E3', 1);
    checkLeq3('2610', '2510', 'T09E4', 1);
    checkLeq3('2620', '2520', 'T09E5', 1);
    checkLeq3('2630', '2530', 'T09E6', 1);
    checkLeq3('2640', '2540', 'T09E7', 1);
    checkLeq3('2650', '2550', 'T09E8', 1);
    checkLeq3('2660', '2560', 'T09E9', 1);

    if (calcDeps) {
      recalculateT10Totals(kods);
    }
  }

  function recalculateT10Totals(kods) {
    recalculateAtLevel('T10', kods, 1, '=', true);
    checkSum('2700', ['21010'], 'T10E1K1', 1);
    checkSum('2700', ['21010'], 'T10E1K2', 2);
    checkSum('2700', ['21010'], 'T10E1K3', 3);
    checkSum('2700', ['21010'], 'T10E1K4', 4);
    checkSum('2700', ['21010'], 'T10E1K5', 5);
    checkSum('2700', ['21010'], 'T10E1K6', 6);
    checkLeq2('T10', 'T10E2K1K2', 2, 1);
    checkLeq2('T10', 'T10E2K3K4', 4, 3);
    checkLeq2('T10', 'T10E2K5K6', 6, 5);
    checkLeq2('T10', 'T10E2K1K5', 1, 5);
    checkLeq2('T10', 'T10E2K2K6', 2, 6);
    checkSumSpecial('T10', 5, 1, 3, 'T10E20K5', 'T10E21K5');
    checkSumSpecial('T10', 6, 2, 4, 'T10E20K6', 'T10E21K6');
    checkLeq3('2700', '2600', 'T10E3', 1);
    checkLeq3('2710', '2610', 'T10E4', 1);
    checkLeq3('2720', '2620', 'T10E5', 1);
    checkLeq3('2730', '2630', 'T10E6', 1);
    checkLeq3('2740', '2640', 'T10E7', 1);
    checkLeq3('2750', '2650', 'T10E8', 1);
    checkLeq3('2760', '2660', 'T10E9', 1);
  }

  function recalculateT11Totals(kods) {
    calculateColSum('T11', 1, [2, 3, 4, 5, 6, 7]);
    checkLeq4('2810', '2800', 'T11E1', 1);
    checkSumSpecial2('2800', '21010', 1, [1, 3], 'T11E2');
    checkSumSpecial2('2810', '21010', 1, [2, 4], 'T11E3');
  }

  function recalculateT12Totals(kods, calcDeps) {
    checkSum('2900', ['2901', '2902', '2903', '2904'], 'T12E1K1', 1);
    checkSum('2900', ['2901', '2902', '2903', '2904'], 'T12E1K2', 2);
    checkSum('2900', ['2905', '2906', '2907'], 'T12E3K1', 1);
    checkSum('2900', ['2905', '2906', '2907'], 'T12E3K2', 2);
    checkSumSpecial3('T12E4K1', 1);
    checkSumSpecial3('T12E4K2', 2);
    checkLeq2('T12', 'T12E2K1K2', 2, 1);
    checkSumSpecial2('2900', '21010', 1, [1, 3], 'T12E5');
    checkSumSpecial2('2900', '21010', 2, [2, 4], 'T12E6');
  }

  function recalculateT13Totals(kods, calcDeps) {
    calculateColSum('T13', 1, [2, 3]);
    recalculateAtLevel('T13', kods, 3, '=', true);
    recalculateAtLevel('T13', kods, 2, '=', true);
    recalculateAtLevel('T13', kods, 1, '=', true);
    checkSumSpecial2('31000', '130000', 1, [1], 'T13E1');
    checkSumSpecial2('31000', '131000', 2, [1], 'T13E2');
    checkSumSpecial2('31000', '132000', 3, [1], 'T13E3');

    if (calcDeps) {
      recalculateT14Totals(kods, calcDeps);
    }
  }

  function recalculateT14Totals(kods, calcDeps) {
    recalculateAtLevel('T14', kods, 2, '=', true);
    recalculateAtLevel('T14', kods, 1, '=', true);
    checkLeq2('T14', 'T14E1K1K2', 2, 1);
    checkSumSpecial2('32000', '31000', 1, [2], 'T14E2');
    checkSumSpecial2('32000', '31100', 2, [2], 'T14E3');
  }

  function getValidationErrMsg(errCode) {
    if (errCode === 'T01E1') {
      return gettextCatalog.getString('Vērtība nedrīkst būt mazāka par pozīcijas 1111 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T01E2') {
      return gettextCatalog.getString('Vērtība nedrīkst būt mazāka par pozīcijas 1121 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T01E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt mazāka par pozīcijas 1131 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T01E4') {
      return gettextCatalog.getString('Komentārs ir obligāts, ja nav aizpildīta pozīcijas 1100 vērtība!', null, 'Gada pārskati');
    } else if (errCode === 'T02E1K1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar pozīcijas 1100 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T03E1') {
      return gettextCatalog.getString('Vērtība nedrīkst būt mazāka par pozīcijas 131121 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T03E2K1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar pozīcijas 1100 vērtību!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T04E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijās 21010, 21020, 21030 attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T05E1' || errCode.substring(0, 5) === 'T08E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijās 21000, 21100, 21200 attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E2K1K2' || errCode === 'T05E2K1K2' || errCode === 'T06E2K1K2' || errCode === 'T07E2K1K2' || errCode === 'T08E2K1K2' || errCode === 'T09E2K1K2' || errCode === 'T10E2K1K2' || errCode === 'T14E1K1K2') {
      return gettextCatalog.getString('Vērtība 2. ailē nedrīkst pārsniegt vērtību 1. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E2K3K4' || errCode === 'T05E2K3K4' || errCode === 'T06E2K3K4' || errCode === 'T07E2K3K4' || errCode === 'T08E2K3K4' || errCode === 'T09E2K3K4' || errCode === 'T10E2K3K4') {
      return gettextCatalog.getString('Vērtība 4. ailē nedrīkst pārsniegt vērtību 3. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E2K5K6' || errCode === 'T05E2K5K6' || errCode === 'T06E2K5K6' || errCode === 'T07E2K5K6' || errCode === 'T08E2K5K6' || errCode === 'T09E2K5K6' || errCode === 'T10E2K5K6') {
      return gettextCatalog.getString('Vērtība 6. ailē nedrīkst pārsniegt vērtību 5. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E2K1K5' || errCode === 'T05E2K1K5' || errCode === 'T06E2K1K5' || errCode === 'T07E2K1K5' || errCode === 'T08E2K1K5' || errCode === 'T09E2K1K5' || errCode === 'T10E2K1K5') {
      return gettextCatalog.getString('Vērtība 1. ailē nedrīkst pārsniegt vērtību 5. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E2K2K6' || errCode === 'T05E2K2K6' || errCode === 'T06E2K2K6' || errCode === 'T07E2K2K6' || errCode === 'T08E2K2K6' || errCode === 'T09E2K2K6' || errCode === 'T10E2K2K6') {
      return gettextCatalog.getString('Vērtība 2. ailē nedrīkst pārsniegt vērtību 6. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E20K5' || errCode === 'T05E20K5' || errCode === 'T06E20K5' || errCode === 'T07E20K5' || errCode === 'T08E20K5' || errCode === 'T09E20K5' || errCode === 'T10E20K5') {
      return gettextCatalog.getString('Vērtība 5. ailē nedrīkst pārsniegt vērtību 1. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E21K5' || errCode === 'T05E21K5' || errCode === 'T06E21K5' || errCode === 'T07E21K5' || errCode === 'T08E21K5' || errCode === 'T09E21K5' || errCode === 'T10E21K5') {
      return gettextCatalog.getString('Vērtība 5. ailē nedrīkst būt lielāka par vērtību summu 1. ailē un 3. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E20K6' || errCode === 'T05E20K6' || errCode === 'T06E20K6' || errCode === 'T07E20K6' || errCode === 'T08E20K6' || errCode === 'T09E20K6' || errCode === 'T10E20K6') {
      return gettextCatalog.getString('Vērtība 6. ailē nedrīkst pārsniegt vērtību 2. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E21K6' || errCode === 'T05E21K6' || errCode === 'T06E21K6' || errCode === 'T07E21K6' || errCode === 'T08E21K6' || errCode === 'T09E21K6' || errCode === 'T10E21K6') {
      return gettextCatalog.getString('Vērtība 6. ailē nedrīkst būt lielāka par vērtību summu 2. ailē un 4. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21000 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E4') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21010 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E5') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21100 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E6') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21100 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E7') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21110 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T04E8') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 21200 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T06E1' || errCode.substring(0, 5) === 'T09E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijās 21010, 21110, 21210 attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2200 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E4') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2201 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E5') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2202 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E6') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2203 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E7') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2204 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T06E8') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2205 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T07E1' || errCode.substring(0, 5) === 'T10E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību pozīcijā 21010 attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2300 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E4') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2301 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E5') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2302 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E6') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2303 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E7') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2304 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T07E8') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2305 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2500 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E4') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2510 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E5') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2520 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E6') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2530 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E7') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2540 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E8') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2550 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T09E9') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2560 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E3') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2600 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E4') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2610 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E5') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2620 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E6') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2630 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E7') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2640 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E8') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2650 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T10E9') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2660 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T11E1') {
      return gettextCatalog.getString('Vērtība nedrīkst būt lielāka par pozīcijas 2800 vērtību attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T11E2') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijas 21010 1. un 3. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T11E3') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijas 21010 2. un 4. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T12E2K1K2') {
      return gettextCatalog.getString('Vērtība 2. ailē nedrīkst pārsniegt vērtību 1. ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T12E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pa kategorijām attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T12E3') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pa pilsonībām attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode.substring(0, 5) === 'T12E4') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pa valstīm attiecīgajā ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T12E5') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijas 21010 1. un 3. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T12E6') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību summu pozīcijas 21010 2. un 4. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T13E1') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar pozīcijas 130000 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T13E2') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar pozīcijas 131000 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T13E3') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar pozīcijas 132000 vērtību!', null, 'Gada pārskati');
    } else if (errCode === 'T14E2') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību pozīcijas 31000 2. ailē!', null, 'Gada pārskati');
    } else if (errCode === 'T14E3') {
      return gettextCatalog.getString('Vērtībai jāsakrīt ar vērtību pozīcijas 31100 2. ailē!', null, 'Gada pārskati');
    }

    checkLeq2('T12', 'T12E2K1K2', 2, 1);
    return null;
  }

  function hasValidationErrors() {
    var hasErrors = false;

    if (cnrl.csbReportPositionsAll) {
      hasErrors = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.kludas_kods1 != '=' || pos.kludas_kods2 != '=' || pos.kludas_kods3 != '=' || pos.kludas_kods4 != '=' || pos.kludas_kods5 != '=' || pos.kludas_kods6 != '=' || pos.kludas_kods7 != '=';
      }).length > 0;
    }

    return hasErrors;
  }

  function addErrCode(pos, errCode, k) {
    if (k === 1 && pos.kludas_kods1.indexOf(';' + errCode) < 0) {
      pos.kludas_kods1 = pos.kludas_kods1 + ';' + errCode;
    } else if (k === 2 && pos.kludas_kods2.indexOf(';' + errCode) < 0) {
      pos.kludas_kods2 = pos.kludas_kods2 + ';' + errCode;
    } else if (k === 3 && pos.kludas_kods3.indexOf(';' + errCode) < 0) {
      pos.kludas_kods3 = pos.kludas_kods3 + ';' + errCode;
    } else if (k === 4 && pos.kludas_kods4.indexOf(';' + errCode) < 0) {
      pos.kludas_kods4 = pos.kludas_kods4 + ';' + errCode;
    } else if (k === 5 && pos.kludas_kods5.indexOf(';' + errCode) < 0) {
      pos.kludas_kods5 = pos.kludas_kods5 + ';' + errCode;
    } else if (k === 6 && pos.kludas_kods6.indexOf(';' + errCode) < 0) {
      pos.kludas_kods6 = pos.kludas_kods6 + ';' + errCode;
    } else if (k === 7 && pos.kludas_kods7.indexOf(';' + errCode) < 0) {
      pos.kludas_kods7 = pos.kludas_kods7 + ';' + errCode;
    }
  }

  function removeErrCode(pos, errCode, k) {
    if (k === 1 && pos.kludas_kods1.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods1 = pos.kludas_kods1.replace(';' + errCode, '');
    } else if (k === 2 && pos.kludas_kods2.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods2 = pos.kludas_kods2.replace(';' + errCode, '');
    } else if (k === 3 && pos.kludas_kods3.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods3 = pos.kludas_kods3.replace(';' + errCode, '');
    } else if (k === 4 && pos.kludas_kods4.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods4 = pos.kludas_kods4.replace(';' + errCode, '');
    } else if (k === 5 && pos.kludas_kods5.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods5 = pos.kludas_kods5.replace(';' + errCode, '');
    } else if (k === 6 && pos.kludas_kods6.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods6 = pos.kludas_kods6.replace(';' + errCode, '');
    } else if (k === 7 && pos.kludas_kods7.indexOf(';' + errCode) >= 0) {
      pos.kludas_kods7 = pos.kludas_kods7.replace(';' + errCode, '');
    }
  }

  function containsErrCode(pos, errCode, k) {
    if (k === 1 && pos.kludas_kods1.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 2 && pos.kludas_kods2.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 3 && pos.kludas_kods3.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 4 && pos.kludas_kods4.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 5 && pos.kludas_kods5.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 6 && pos.kludas_kods6.indexOf(';' + errCode) >= 0) {
      return true;
    } else if (k === 7 && pos.kludas_kods7.indexOf(';' + errCode) >= 0) {
      return true;
    }

    return false;
  }

  function recalculateAtLevel(tblCode, kods, limenis, check, allVals) {
    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === tblCode;
      });

      for (var i = 0; tmpPos.length > i; i++) {
        if (tmpPos[i].kods !== kods && tmpPos[i].limenis === limenis - 1 && !tmpPos[i].is_leaf) {
          calcSum(tmpPos, i, limenis, check, 1);

          if (allVals) {
            calcSum(tmpPos, i, limenis, check, 2);
            calcSum(tmpPos, i, limenis, check, 3);
            calcSum(tmpPos, i, limenis, check, 4);
            calcSum(tmpPos, i, limenis, check, 5);
            calcSum(tmpPos, i, limenis, check, 6);
            calcSum(tmpPos, i, limenis, check, 7);
          }
        }
      }
    }
  }

  function calcSum(tmpPos, i, limenis, check, k) {
    var sum = 0;

    for (var j = 0; tmpPos.length > j; j++) {
      if (gettextUtil.startsWith(tmpPos[j].kods2, tmpPos[i].kods2) && tmpPos[j].limenis === limenis) {
        if (tmpPos[j].vertiba_a && k === 1) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_a).toFixed(2));
        } else if (tmpPos[j].vertiba_b && k === 2) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_b).toFixed(2));
        } else if (tmpPos[j].vertiba_c && k === 3) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_c).toFixed(2));
        } else if (tmpPos[j].vertiba_d && k === 4) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_d).toFixed(2));
        } else if (tmpPos[j].vertiba_e && k === 5) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_e).toFixed(2));
        } else if (tmpPos[j].vertiba_f && k === 6) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_f).toFixed(2));
        } else if (tmpPos[j].vertiba_g && k === 7) {
          sum = sum + parseFloat(parseFloat(tmpPos[j].vertiba_g).toFixed(2));
        }
      }
    }

    if (check == '=') {
      if (k === 1 && (!tmpPos[i].vertiba_a && sum > 0 || tmpPos[i].vertiba_a && sum != tmpPos[i].vertiba_a)) {
        tmpPos[i].vertiba_a = parseFloat(sum.toFixed(2));
      } else if (k === 2 && (!tmpPos[i].vertiba_b && sum > 0 || tmpPos[i].vertiba_b && sum != tmpPos[i].vertiba_b)) {
        tmpPos[i].vertiba_b = parseFloat(sum.toFixed(2));
      } else if (k === 3 && (!tmpPos[i].vertiba_c && sum > 0 || tmpPos[i].vertiba_c && sum != tmpPos[i].vertiba_c)) {
        tmpPos[i].vertiba_c = parseFloat(sum.toFixed(2));
      } else if (k === 4 && (!tmpPos[i].vertiba_d && sum > 0 || tmpPos[i].vertiba_d && sum != tmpPos[i].vertiba_d)) {
        tmpPos[i].vertiba_d = parseFloat(sum.toFixed(2));
      } else if (k === 5 && (!tmpPos[i].vertiba_e && sum > 0 || tmpPos[i].vertiba_e && sum != tmpPos[i].vertiba_e)) {
        tmpPos[i].vertiba_e = parseFloat(sum.toFixed(2));
      } else if (k === 6 && (!tmpPos[i].vertiba_f && sum > 0 || tmpPos[i].vertiba_f && sum != tmpPos[i].vertiba_f)) {
        tmpPos[i].vertiba_f = parseFloat(sum.toFixed(2));
      } else if (k === 7 && (!tmpPos[i].vertiba_g && sum > 0 || tmpPos[i].vertiba_g && sum != tmpPos[i].vertiba_g)) {
        tmpPos[i].vertiba_g = parseFloat(sum.toFixed(2));
      }
    } else if (check == '>=') {
      if (k === 1 && (!tmpPos[i].vertiba_a && sum > 0 || tmpPos[i].vertiba_a && sum >= tmpPos[i].vertiba_a)) {
        tmpPos[i].vertiba_a = parseFloat(sum.toFixed(2));
      } else if (k === 2 && (!tmpPos[i].vertiba_b && sum > 0 || tmpPos[i].vertiba_b && sum >= tmpPos[i].vertiba_b)) {
        tmpPos[i].vertiba_b = parseFloat(sum.toFixed(2));
      } else if (k === 3 && (!tmpPos[i].vertiba_c && sum > 0 || tmpPos[i].vertiba_c && sum >= tmpPos[i].vertiba_c)) {
        tmpPos[i].vertiba_c = parseFloat(sum.toFixed(2));
      } else if (k === 4 && (!tmpPos[i].vertiba_d && sum > 0 || tmpPos[i].vertiba_d && sum >= tmpPos[i].vertiba_d)) {
        tmpPos[i].vertiba_d = parseFloat(sum.toFixed(2));
      } else if (k === 5 && (!tmpPos[i].vertiba_e && sum > 0 || tmpPos[i].vertiba_e && sum >= tmpPos[i].vertiba_e)) {
        tmpPos[i].vertiba_e = parseFloat(sum.toFixed(2));
      } else if (k === 6 && (!tmpPos[i].vertiba_f && sum > 0 || tmpPos[i].vertiba_f && sum >= tmpPos[i].vertiba_f)) {
        tmpPos[i].vertiba_f = parseFloat(sum.toFixed(2));
      } else if (k === 7 && (!tmpPos[i].vertiba_g && sum > 0 || tmpPos[i].vertiba_g && sum >= tmpPos[i].vertiba_g)) {
        tmpPos[i].vertiba_g = parseFloat(sum.toFixed(2));
      }
    }
  }

  function calculateColSum(tblCode, i, js) {
    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === tblCode;
      });

      for (var k = 0; tmpPos.length > k; k++) {
        calcSum2(tmpPos[k], i, js);
      }
    }
  }

  function calcSum2(pos, i, js) {
    var sum = 0;

    for (var j = 0; js.length > j; j++) {
      if (js[j] === 1 && pos.vertiba_a) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_a).toFixed(2));
      } else if (js[j] === 2 && pos.vertiba_b) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_b).toFixed(2));
      } else if (js[j] === 3 && pos.vertiba_c) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_c).toFixed(2));
      } else if (js[j] === 4 && pos.vertiba_d) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_d).toFixed(2));
      } else if (js[j] === 5 && pos.vertiba_e) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_e).toFixed(2));
      } else if (js[j] === 6 && pos.vertiba_f) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_f).toFixed(2));
      } else if (js[j] === 7 && pos.vertiba_g) {
        sum = sum + parseFloat(parseFloat(pos.vertiba_g).toFixed(2));
      }
    }

    if (i === 1 && (!pos.vertiba_a && sum > 0 || pos.vertiba_a && sum != pos.vertiba_a)) {
      pos.vertiba_a = sum;
    } else if (i === 2 && (!pos.vertiba_b && sum > 0 || pos.vertiba_b && sum != pos.vertiba_b)) {
      pos.vertiba_b = sum;
    } else if (i === 3 && (!pos.vertiba_c && sum > 0 || pos.vertiba_c && sum != pos.vertiba_c)) {
      pos.vertiba_c = sum;
    } else if (i === 4 && (!pos.vertiba_d && sum > 0 || pos.vertiba_d && sum != pos.vertiba_d)) {
      pos.vertiba_d = sum;
    } else if (i === 5 && (!pos.vertiba_e && sum > 0 || pos.vertiba_e && sum != pos.vertiba_e)) {
      pos.vertiba_e = sum;
    } else if (i === 6 && (!pos.vertiba_f && sum > 0 || pos.vertiba_f && sum != pos.vertiba_f)) {
      pos.vertiba_f = sum;
    } else if (i === 7 && (!pos.vertiba_g && sum > 0 || pos.vertiba_g && sum != pos.vertiba_g)) {
      pos.vertiba_g = sum;
    }
  }

  function checkReq(kods, errCode) {
    var isOk = true;
    var pos = findPosition(kods);

    if (pos) {
      if (!pos.vertiba_a || parseFloat(parseFloat(pos.vertiba_a).toFixed(2)) <= 0) {
        if (!pos.komentars || pos.komentars.length <= 0) {
          isOk = false;
        }
      }
    }

    if (isOk) {
      removeErrCode(pos, errCode, 1);
    } else {
      addErrCode(pos, errCode, 1);
    }
  }

  function checkSumSpecial(tblCode, k, j1, j2, errCode1, errCode2) {
    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === tblCode;
      });

      for (var i = 0; tmpPos.length > i; i++) {
        checkSum2(tmpPos[i], k, j1, j2, errCode1, errCode2);
      }
    }
  }

  function checkSumSpecial2(kods1, kods2, k, js, errCode) {
    var isOk = true;
    var pos1 = findPosition(kods1);
    var pos2 = findPosition(kods2);

    if (pos1 && pos2) {
      var sum = 0;

      for (var j = 0; js.length > j; j++) {
        if (js[j] === 1 && pos2.vertiba_a) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_a).toFixed(2));
        } else if (js[j] === 2 && pos2.vertiba_b) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_b).toFixed(2));
        } else if (js[j] === 3 && pos2.vertiba_c) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_c).toFixed(2));
        } else if (js[j] === 4 && pos2.vertiba_d) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_d).toFixed(2));
        }
      }

      if (k === 1 && (!pos1.vertiba_a && sum != 0 || pos1.vertiba_a && parseFloat(parseFloat(pos1.vertiba_a).toFixed(2)) != sum)) {
        isOk = false;
      } else if (k === 2 && (!pos1.vertiba_b && sum != 0 || pos1.vertiba_b && parseFloat(parseFloat(pos1.vertiba_b).toFixed(2)) != sum)) {
        isOk = false;
      } else if (k === 3 && (!pos1.vertiba_c && sum != 0 || pos1.vertiba_c && parseFloat(parseFloat(pos1.vertiba_c).toFixed(2)) != sum)) {
        isOk = false;
      }
    }

    if (isOk) {
      removeErrCode(pos1, errCode, k);
    } else {
      addErrCode(pos1, errCode, k);
    }
  }

  function checkSumSpecial3(errCode, k) {
    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === 'T12' && isSpecialT12Code(pos.kods);
      });
      var js = [];

      for (var i = 0; tmpPos.length > i; i++) {
        if (cnrl.reportP6.valstu_skaits && i < cnrl.reportP6.valstu_skaits) {
          js.push(tmpPos[i].kods);
        }
      }

      if (js.length > 0) {
        checkSum('2907', js, errCode, k);
      }
    }
  }

  function checkLeq2(tblCode, errCode, k1, k2) {
    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.tbl_kods === tblCode;
      });

      for (var i = 0; tmpPos.length > i; i++) {
        var isOk = true;
        var pos = tmpPos[i];
        var vertiba_a = null;

        if (k1 === 1) {
          vertiba_a = pos.vertiba_a;
        } else if (k1 === 2) {
          vertiba_a = pos.vertiba_b;
        } else if (k1 === 3) {
          vertiba_a = pos.vertiba_c;
        } else if (k1 === 4) {
          vertiba_a = pos.vertiba_d;
        } else if (k1 === 5) {
          vertiba_a = pos.vertiba_e;
        } else if (k1 === 6) {
          vertiba_a = pos.vertiba_f;
        } else if (k1 === 7) {
          vertiba_a = pos.vertiba_g;
        }

        var vertiba_b = null;

        if (k2 === 1) {
          vertiba_b = pos.vertiba_a;
        } else if (k2 === 2) {
          vertiba_b = pos.vertiba_b;
        } else if (k2 === 3) {
          vertiba_b = pos.vertiba_c;
        } else if (k2 === 4) {
          vertiba_b = pos.vertiba_d;
        } else if (k2 === 5) {
          vertiba_b = pos.vertiba_e;
        } else if (k2 === 6) {
          vertiba_b = pos.vertiba_f;
        } else if (k2 === 7) {
          vertiba_b = pos.vertiba_g;
        }

        if (vertiba_a && vertiba_b && vertiba_a != null && vertiba_b != null) {
          if (parseFloat(parseFloat(vertiba_a).toFixed(2)) > parseFloat(parseFloat(vertiba_b).toFixed(2))) {
            isOk = false;
          }
        }

        if (isOk) {
          removeErrCode(pos, errCode, k1);
        } else {
          addErrCode(pos, errCode, k1);
        }
      }
    }
  }

  function checkLeq3(kods1, kods2, errCode, mode) {
    checkLeq(kods1, kods2, errCode, 1, mode);
    checkLeq(kods1, kods2, errCode, 2, mode);
    checkLeq(kods1, kods2, errCode, 3, mode);
    checkLeq(kods1, kods2, errCode, 4, mode);
    checkLeq(kods1, kods2, errCode, 5, mode);
    checkLeq(kods1, kods2, errCode, 6, mode);
  }

  function checkLeq4(kods1, kods2, errCode, mode) {
    checkLeq(kods1, kods2, errCode, 1, mode);
    checkLeq(kods1, kods2, errCode, 2, mode);
    checkLeq(kods1, kods2, errCode, 3, mode);
    checkLeq(kods1, kods2, errCode, 4, mode);
    checkLeq(kods1, kods2, errCode, 5, mode);
    checkLeq(kods1, kods2, errCode, 6, mode);
    checkLeq(kods1, kods2, errCode, 7, mode);
  }

  function checkLeq(kods1, kods2, errCode, k, mode) {
    var isOk = true;
    var pos1 = findPosition(kods1);
    var pos2 = findPosition(kods2);

    if (pos1 && pos2) {
      if (mode === 1) {
        if (k === 1 && (pos1.vertiba_a && pos1.vertiba_a > 0 && !pos2.vertiba_a || pos1.vertiba_a && pos2.vertiba_a && parseFloat(parseFloat(pos1.vertiba_a).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_a).toFixed(2)))) {
          isOk = false;
        } else if (k === 2 && (pos1.vertiba_b && pos1.vertiba_b > 0 && !pos2.vertiba_b || pos1.vertiba_b && pos2.vertiba_b && parseFloat(parseFloat(pos1.vertiba_b).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_b).toFixed(2)))) {
          isOk = false;
        } else if (k === 3 && (pos1.vertiba_c && pos1.vertiba_c > 0 && !pos2.vertiba_c || pos1.vertiba_c && pos2.vertiba_c && parseFloat(parseFloat(pos1.vertiba_c).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_c).toFixed(2)))) {
          isOk = false;
        } else if (k === 4 && (pos1.vertiba_d && pos1.vertiba_d > 0 && !pos2.vertiba_d || pos1.vertiba_d && pos2.vertiba_d && parseFloat(parseFloat(pos1.vertiba_d).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_d).toFixed(2)))) {
          isOk = false;
        } else if (k === 5 && (pos1.vertiba_e && pos1.vertiba_e > 0 && !pos2.vertiba_e || pos1.vertiba_e && pos2.vertiba_e && parseFloat(parseFloat(pos1.vertiba_e).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_e).toFixed(2)))) {
          isOk = false;
        } else if (k === 6 && (pos1.vertiba_f && pos1.vertiba_f > 0 && !pos2.vertiba_f || pos1.vertiba_f && pos2.vertiba_f && parseFloat(parseFloat(pos1.vertiba_f).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_f).toFixed(2)))) {
          isOk = false;
        } else if (k === 7 && (pos1.vertiba_g && pos1.vertiba_g > 0 && !pos2.vertiba_g || pos1.vertiba_g && pos2.vertiba_g && parseFloat(parseFloat(pos1.vertiba_g).toFixed(2)) > parseFloat(parseFloat(pos2.vertiba_g).toFixed(2)))) {
          isOk = false;
        }
      } else {
        if (k === 1 && (!pos1.vertiba_a && pos2.vertiba_a || pos1.vertiba_a && pos2.vertiba_a && parseFloat(parseFloat(pos1.vertiba_a).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_a).toFixed(2)))) {
          isOk = false;
        } else if (k === 2 && (!pos1.vertiba_b && pos2.vertiba_b || pos1.vertiba_b && pos2.vertiba_b && parseFloat(parseFloat(pos1.vertiba_b).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_b).toFixed(2)))) {
          isOk = false;
        } else if (k === 3 && (!pos1.vertiba_c && pos2.vertiba_c || pos1.vertiba_c && pos2.vertiba_c && parseFloat(parseFloat(pos1.vertiba_c).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_c).toFixed(2)))) {
          isOk = false;
        } else if (k === 4 && (!pos1.vertiba_d && pos2.vertiba_d || pos1.vertiba_d && pos2.vertiba_d && parseFloat(parseFloat(pos1.vertiba_d).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_d).toFixed(2)))) {
          isOk = false;
        } else if (k === 5 && (!pos1.vertiba_e && pos2.vertiba_e || pos1.vertiba_e && pos2.vertiba_e && parseFloat(parseFloat(pos1.vertiba_e).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_e).toFixed(2)))) {
          isOk = false;
        } else if (k === 6 && (!pos1.vertiba_f && pos2.vertiba_f || pos1.vertiba_f && pos2.vertiba_f && parseFloat(parseFloat(pos1.vertiba_f).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_f).toFixed(2)))) {
          isOk = false;
        } else if (k === 7 && (!pos1.vertiba_g && pos2.vertiba_g || pos1.vertiba_g && pos2.vertiba_g && parseFloat(parseFloat(pos1.vertiba_g).toFixed(2)) < parseFloat(parseFloat(pos2.vertiba_g).toFixed(2)))) {
          isOk = false;
        }
      }
    }

    if (isOk) {
      removeErrCode(pos1, errCode, k);
    } else {
      addErrCode(pos1, errCode, k);
    }
  }

  function checkSum(kods1, kodss2, errCode, k) {
    var isOk = true;
    var pos1 = findPosition(kods1);
    var sum = 0;

    for (var j = 0; kodss2.length > j; j++) {
      var pos2 = findPosition(kodss2[j]);

      if (pos2) {
        if (k === 1 && pos2.vertiba_a) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_a).toFixed(2));
        } else if (k === 2 && pos2.vertiba_b) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_b).toFixed(2));
        } else if (k === 3 && pos2.vertiba_c) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_c).toFixed(2));
        } else if (k === 4 && pos2.vertiba_d) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_d).toFixed(2));
        } else if (k === 5 && pos2.vertiba_e) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_e).toFixed(2));
        } else if (k === 6 && pos2.vertiba_f) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_f).toFixed(2));
        } else if (k === 7 && pos2.vertiba_g) {
          sum = sum + parseFloat(parseFloat(pos2.vertiba_g).toFixed(2));
        }
      }
    }

    sum = parseFloat(parseFloat(sum).toFixed(2));

    if (pos1) {
      if (k === 1 && (!pos1.vertiba_a && sum !== 0 || pos1.vertiba_a && parseFloat(parseFloat(pos1.vertiba_a).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 2 && (!pos1.vertiba_b && sum !== 0 || pos1.vertiba_b && parseFloat(parseFloat(pos1.vertiba_b).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 3 && (!pos1.vertiba_c && sum !== 0 || pos1.vertiba_c && parseFloat(parseFloat(pos1.vertiba_c).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 4 && (!pos1.vertiba_d && sum !== 0 || pos1.vertiba_d && parseFloat(parseFloat(pos1.vertiba_d).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 5 && (!pos1.vertiba_e && sum !== 0 || pos1.vertiba_e && parseFloat(parseFloat(pos1.vertiba_e).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 6 && (!pos1.vertiba_f && sum !== 0 || pos1.vertiba_f && parseFloat(parseFloat(pos1.vertiba_f).toFixed(2)) !== sum)) {
        isOk = false;
      } else if (k === 7 && (!pos1.vertiba_g && sum !== 0 || pos1.vertiba_g && parseFloat(parseFloat(pos1.vertiba_g).toFixed(2)) !== sum)) {
        isOk = false;
      }
    }

    if (isOk) {
      removeErrCode(pos1, errCode, k);
    } else {
      addErrCode(pos1, errCode, k);
    }
  }

  function checkSum2(pos, i, j1, j2, errCode1, errCode2) {
    var isOk1 = true;
    var isOk2 = true;
    var sum = 0;
    var check = 0;

    if (j1 === 1 && pos.vertiba_a) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_a).toFixed(2));
    } else if (j1 === 2 && pos.vertiba_b) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_b).toFixed(2));
    } else if (j1 === 3 && pos.vertiba_c) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_c).toFixed(2));
    } else if (j1 === 4 && pos.vertiba_d) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_d).toFixed(2));
    } else if (j1 === 5 && pos.vertiba_e) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_e).toFixed(2));
    } else if (j1 === 6 && pos.vertiba_f) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_f).toFixed(2));
    } else if (j1 === 7 && pos.vertiba_g) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_g).toFixed(2));
    }

    if (j2 === 1 && pos.vertiba_a) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_a).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_a).toFixed(2));
    } else if (j2 === 2 && pos.vertiba_b) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_b).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_b).toFixed(2));
    } else if (j2 === 3 && pos.vertiba_c) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_c).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_c).toFixed(2));
    } else if (j2 === 4 && pos.vertiba_d) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_d).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_d).toFixed(2));
    } else if (j2 === 5 && pos.vertiba_e) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_e).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_e).toFixed(2));
    } else if (j2 === 6 && pos.vertiba_f) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_f).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_f).toFixed(2));
    } else if (j2 === 7 && pos.vertiba_g) {
      sum = sum + parseFloat(parseFloat(pos.vertiba_g).toFixed(2));
      check = parseFloat(parseFloat(pos.vertiba_g).toFixed(2));
    }

    if (check <= 0) {
      if (i === 1 && pos.vertiba_a && parseFloat(parseFloat(pos.vertiba_a).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 2 && pos.vertiba_b && parseFloat(parseFloat(pos.vertiba_b).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 3 && pos.vertiba_c && parseFloat(parseFloat(pos.vertiba_c).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 4 && pos.vertiba_d && parseFloat(parseFloat(pos.vertiba_d).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 5 && pos.vertiba_e && parseFloat(parseFloat(pos.vertiba_e).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 6 && pos.vertiba_f && parseFloat(parseFloat(pos.vertiba_f).toFixed(2)) > sum) {
        isOk1 = false;
      } else if (i === 7 && pos.vertiba_g && parseFloat(parseFloat(pos.vertiba_g).toFixed(2)) > sum) {
        isOk1 = false;
      }
    } else {
      if (i === 1 && pos.vertiba_a && parseFloat(parseFloat(pos.vertiba_a).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 2 && pos.vertiba_b && parseFloat(parseFloat(pos.vertiba_b).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 3 && pos.vertiba_c && parseFloat(parseFloat(pos.vertiba_c).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 4 && pos.vertiba_d && parseFloat(parseFloat(pos.vertiba_d).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 5 && pos.vertiba_e && parseFloat(parseFloat(pos.vertiba_e).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 6 && pos.vertiba_f && parseFloat(parseFloat(pos.vertiba_f).toFixed(2)) > sum) {
        isOk2 = false;
      } else if (i === 7 && pos.vertiba_g && parseFloat(parseFloat(pos.vertiba_g).toFixed(2)) > sum) {
        isOk2 = false;
      }
    }

    if (isOk1) {
      removeErrCode(pos, errCode1, i);
    } else {
      addErrCode(pos, errCode1, i);
    }

    if (isOk2) {
      removeErrCode(pos, errCode2, i);
    } else {
      addErrCode(pos, errCode2, i);
    }
  }

  function findPosition(kods) {
    var pos = null;

    if (cnrl.csbReportPositionsAll) {
      var tmpPos = cnrl.csbReportPositionsAll.filter(function (pos) {
        return pos.kods === kods;
      });

      if (tmpPos.length > 0) {
        pos = tmpPos[0];
      }
    }

    return pos;
  }

  init();
}]);
/**
 * @name scientific_institution_report
 * @description Saraksts "Zinātnisko institūciju gada pārskati"
 * @param  {string} url /data/institucijas_gada_parskats_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificInstitutionReportController', ['ngDialog', 'Select2Data', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, Select2Data, $scope, $state, $stateParams, dataOp, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var cnrl = this; // function initialization

  cnrl.openScientificInstitutionReport = openScientificInstitutionReport;
  cnrl.openHomepage = openHomepage;
  cnrl.canDeleteScientificInstitutionReport = canDeleteScientificInstitutionReport;
  cnrl.deleteScientificInstitutionReport = deleteScientificInstitutionReport;
  cnrl.newScientificInstitutionReport = newScientificInstitutionReport;

  function openScientificInstitutionReport(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.scientific_institution_report.edit', {
        id: row.id
      });
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function canDeleteScientificInstitutionReport(row) {
    if (row.can_delete) {
      return true;
    } else {
      return false;
    }
  }

  function deleteScientificInstitutionReport(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("institucijas_gada_parskats_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts zinātniskās institūcijas gada pārskats!', null, 'Gada pārskati'));
      return true;
    }, $scope.handleError);
  }

  function newScientificInstitutionReport() {
    cnrl.newReport = {
      statuss: 'SAGATAVOSANA',
      institucija_id: null,
      institucija_select_obj: {
        id: null,
        text: ''
      },
      gads: 2017,
      versija: 4,
      sadala_a: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA1'
      }],
      sadala_b: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA2'
      }],
      sadala_c: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA3'
      }],
      sadala_d: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA4'
      }],
      sadala_e: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA5'
      }],
      sadala_f: [{
        statuss: 'SAGATAVOSANA',
        veids: 'SADALA6'
      }]
    };
    ngDialog.openConfirm({
      template: 'components/scientific_institution_report/tabs/dialog-new-report.html',
      scope: $scope,
      data: cnrl.newReport
    }).then(function () {
      if (cnrl.newReport.institucija_select_obj) {
        cnrl.newReport.institucija_id = cnrl.newReport.institucija_select_obj.id;
      }

      if (cnrl.newReport.gads && cnrl.newReport.gads <= 2016) {
        cnrl.newReport.versija = -1;
      }

      dataOp.saveScientificInstitutionReportById(cnrl.newReport, 'institucijas_gada_parskats_editable').then(function (data) {
        Notification.success(gettextCatalog.getString('Veiksmīgi izveidots zinātniskās institūcijas ' + cnrl.newReport.gads + '. gada pārskats!', null, 'Gada pārskati'));
        $state.go('app.scientific_institution_report.edit', {
          id: data.data.id
        });
      }, $scope.handleError);
    }, function () {});
  }

  function init() {
    cnrl.scientificInstitutions = new Select2Data('choices', 'scientific_institutions_ctx_full');
    var currentDate = new Date();
    var maxYear = currentDate.getFullYear() - 1;

    if (currentDate.getMonth() >= 11) {
      maxYear = maxYear + 1;
    }

    cnrl.reportYears = [];

    for (var j = 2010; maxYear >= j; j++) {
      cnrl.reportYears.push({
        id: j,
        title: j.toString()
      });
    }
  }

  cnrl.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Gada pārskati'),
      key: "zi_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Gada pārskati'),
      key: "zi_reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Gads", null, 'Gada pārskati'),
      key: "gads",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Iesniegšanas datums", null, 'Gada pārskati'),
      key: "iesniegsanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Publicēšanas datums", null, 'Gada pārskati'),
      key: "publicesanas_datums",
      sortable: "true",
      dateVal: "true"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'Gada pārskati'),
      key: "statuss_nosaukums",
      sortable: "false"
    }],
    click_function: cnrl.openScientificInstitutionReport,
    create_function: cnrl.newScientificInstitutionReport,
    gridCheckbox: true,
    "delete": false,
    can_delete_row_function: cnrl.canDeleteScientificInstitutionReport,
    bulkDelete: true,
    delete_function: cnrl.deleteScientificInstitutionReport,
    filters: false,
    catalog_name: gettextCatalog.getString('Zinātnisko institūciju gada pārskati', null, 'Gada pārskati'),
    link_function: cnrl.openHomepage,
    "export": false,
    bulkExportCspData: true
  };
  init();
}]);
/**
 * @name scientific_institution_form
 * @description Forma "Zinātniskās institūcijas"
 * @param  {string} url /data/institucija/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificInstitutionFormController', ['UploadService', 'PermissionService', 'Select2Data', 'ngDialog', '$scope', '$timeout', '$window', '$state', '$stateParams', 'Restangular', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$cookies', '$rootScope', 'SearchPerson', function (UploadService, PermissionService, Select2Data, ngDialog, $scope, $timeout, $window, $state, $stateParams, Restangular, dataOp, gettextCatalog, Notification, $filter, $http, $cookies, $rootScope, SearchPerson) {
  var sif = this;
  sif.institution = {
    kontaktinfo: [],
    proj_doc_sask_kontaktinfo: [],
    pielikumi: [],
    komersanta_personals: [],
    telpu_nodrosinajums: [],
    sopus: [],
    wos: []
  };
  sif.institutionOrigin = null;
  sif.contact_data = [];
  sif.allowEdit = true;
  sif.reg_apliecibas_datums_edit = false;
  sif.reg_datums_edit = false;
  sif.isArchived = false;
  sif.isNew = false;
  sif.hasEmail = false;
  sif.legalStatuses = [];
  sif.ZITypes = [];
  sif.formats = ['dd.MM.yyyy'];
  sif.format = sif.formats[0];
  sif.pgpObj = {}; // tabs

  sif.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Institūcijas'),
    active: true
  }, {
    id: 'contactDataTab',
    head: gettextCatalog.getString('Kontaktinformācija un apziņošanas iestatījumi', null, 'Institūcijas'),
    active: false
  }, {
    id: 'attachmentDataTab',
    head: gettextCatalog.getString('Pielikums', null, 'Institūcijas'),
    active: false
  }, {
    id: 'sciPersonalDataTab',
    head: gettextCatalog.getString('Zin. personāls', null, 'Institūcijas'),
    active: false
  }, {
    id: 'acadPersonalDataTab',
    head: gettextCatalog.getString('Akad. personāls', null, 'Institūcijas'),
    active: false
  }, {
    id: 'projectDataTab',
    head: gettextCatalog.getString('Projekti', null, 'Institūcijas'),
    active: false
  }, {
    id: 'busPersonalDataTab',
    head: gettextCatalog.getString('Komersanta personāls', null, 'Institūcijas'),
    active: false
  }, {
    id: 'equipmentDataTab',
    head: gettextCatalog.getString('Zinātniskās iekārtas', null, 'Institūcijas'),
    active: false
  }, {
    id: 'buildingsDataTab',
    head: gettextCatalog.getString('Telpu nodrošinājums', null, 'Institūcijas'),
    active: false
  }]; // functions

  sif.loadData = loadData;
  sif.saveInstitution = saveInstitution;
  sif.editInstitution = editInstitution;
  sif.checkContactInfo = checkContactInfo;
  sif.saveContactInfo = saveContactInfo;
  sif.removeContactInfo = removeContactInfo;
  sif.addContactInfo = addContactInfo;
  sif.loadZITypes = loadZITypes;
  sif.updatePrintTabTitle = updatePrintTabTitle;
  sif.resetScientific = resetScientific;
  sif.contactInfoTypes = null;
  sif.UploadService = UploadService;
  sif.searchPersonByPersonalCode = searchPersonByPersonalCode;
  sif.loadPersonData = loadPersonData;
  sif.resetPersonData = resetPersonData;
  sif.loadContactData = loadContactData;
  sif.resetContactData = resetContactData;
  sif.searchContactByPersonalCode = searchContactByPersonalCode;
  sif.loadBusinessPersonalData = loadBusinessPersonalData;
  sif.resetBusinessPersonalData = resetBusinessPersonalData;
  sif.searchBusinessPersonalByPersonalCode = searchBusinessPersonalByPersonalCode;
  sif.pgpKeyDialog = pgpKeyDialog;
  sif.emailDialog = emailDialog;
  sif.getPgpKey = getPgpKey;
  sif.processData = processData;
  sif.returnToList = returnToList;
  sif.archiveInstitution = archiveInstitution;
  sif.unarchiveInstitution = unarchiveInstitution;
  sif.isNotUndefined = isNotUndefined;
  sif.hasPermission = PermissionService.hasPermission;
  sif.openHomepage = openHomepage;
  sif.gotoState = gotoState;
  sif.showInstitutionManagerData = showInstitutionManagerData;
  sif.showContactPersonData = showContactPersonData;
  sif.refreshScopusSciResData = refreshScopusSciResData;
  sif.getScopusData = getScopusData;
  sif.refreshWosSciResData = refreshWosSciResData;
  sif.getWosData = getWosData;
  sif.scrollToZdvPage = scrollToZdvPage;
  sif.scrollToAdvPage = scrollToAdvPage;
  sif.scrollToPrPage = scrollToPrPage;
  sif.scrollToIekPage = scrollToIekPage;
  sif.scrollToKpPage = scrollToKpPage;
  sif.scrollToTnPage = scrollToTnPage;
  sif.paginateTn = paginateTn;

  function scrollToZdvPage(inst) {
    if (sif.zdv_current_page > sif.zdv_max_page) {
      sif.zdv_current_page = sif.zdv_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        zin_institucija_id: inst.id,
        limit: sif.zdv_per_page,
        offset: (sif.zdv_current_page - 1) * sif.zdv_per_page
      },
      url: '/data/institucijas_zin_personals_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      sif.zdv_data_page = response.data;
    });
  }

  function scrollToAdvPage(inst) {
    if (sif.adv_current_page > sif.adv_max_page) {
      sif.adv_current_page = sif.adv_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        zin_institucija_id: inst.id,
        limit: sif.adv_per_page,
        offset: (sif.adv_current_page - 1) * sif.adv_per_page
      },
      url: '/data/institucijas_akad_personals_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      sif.adv_data_page = response.data;
    });
  }

  function scrollToPrPage(inst) {
    if (sif.pr_current_page > sif.pr_max_page) {
      sif.pr_current_page = sif.pr_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        zin_institucija_id: inst.id,
        limit: sif.pr_per_page,
        offset: (sif.pr_current_page - 1) * sif.pr_per_page
      },
      url: '/data/institucijas_projekti_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      sif.pr_data_page = response.data;
    });
  }

  function scrollToIekPage(inst) {
    if (sif.iek_current_page > sif.iek_max_page) {
      sif.iek_current_page = sif.iek_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        institucija_id: inst.id,
        limit: sif.iek_per_page,
        offset: (sif.iek_current_page - 1) * sif.iek_per_page
      },
      url: '/data/institucijas_iekartas_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      sif.iek_data_page = response.data;
    });
  }

  function scrollToKpPage(inst) {
    if (sif.kp_current_page > sif.kp_max_page) {
      sif.kp_current_page = sif.kp_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        institucija_id: inst.id,
        limit: sif.kp_per_page,
        offset: (sif.kp_current_page - 1) * sif.kp_per_page
      },
      url: '/data/institucijas_kontaktinfo_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      sif.kp_data_page = response.data;
    });
  }

  function scrollToTnPage(inst) {
    if (sif.tn_current_page > sif.tn_max_page) {
      sif.tn_current_page = sif.tn_max_page;
    }

    sif.tn_data_page = inst.telpu_nodrosinajums.filter(function (d) {
      return d.page == sif.tn_current_page;
    });
  }

  function paginateTn(inst, preserveCurrentPage, lastPage) {
    var i = 0;
    sif.tn_per_page = 5;

    if (!preserveCurrentPage) {
      sif.tn_current_page = 1;
    }

    angular.forEach(inst.telpu_nodrosinajums, function (d) {
      d.npk = i;
      d.page = Math.floor(i / sif.tn_per_page) + 1;
      i = i + 1;
    });
    sif.tn_max_page = Math.floor(Math.max(i - 1, 0) / sif.tn_per_page) + 1;

    if (lastPage) {
      sif.tn_current_page = sif.tn_max_page;
    }

    sif.scrollToTnPage(inst);
  }

  function refreshScopusSciResData() {
    var data = {};
    ngDialog.openConfirm({
      template: 'components/scientific_institution/tabs/dialog-scopus.html',
      scope: $scope,
      data: data
    });
  }

  function getScopusData(data) {
    dataOp.getScopusData(null, null, null, sif.institution.id, data.year).then(function () {
      Notification.success("Scopus dati veiksmīgi pārnesti uz sistēmu");
      $state.reload();
    }, $scope.handleErrorNew);
    ngDialog.closeAll();
  }

  function refreshWosSciResData() {
    var data = {};
    ngDialog.openConfirm({
      template: 'components/scientific_institution/tabs/dialog-wos.html',
      scope: $scope,
      data: data
    });
  }

  function getWosData(data) {
    dataOp.getWosData(null, null, null, sif.institution.id, data.year).then(function () {
      Notification.success("WoS dati veiksmīgi pārnesti uz sistēmu");
      $state.reload();
    }, $scope.handleErrorNew);
    ngDialog.closeAll();
  }

  function showInstitutionManagerData() {
    $state.go('app.personal.edit', {
      id: sif.institution.vaditajs_id
    });
  }

  function showContactPersonData() {
    $state.go('app.personal.edit', {
      id: sif.institution.kontaktpersona_id
    });
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; sif.tabs.length > i; i++) {
        if (sif.tabs[i].active) {
          sif.currentTitle = sif.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function gotoState(s, dId) {
    $state.go(s, {
      id: dId
    });
  }

  function isNotUndefined(data) {
    return typeof data !== "undefined";
  }

  function returnToList() {
    if (sif.institution.ir_zi) {
      $state.go('app.scientific_institution.list');
    } else if (sif.institution.ir_aii) {
      $state.go('app.he_institution.list');
    } else {
      $state.go('app.business.list');
    }
  }

  function loadLegalStatuses() {
    var req = {
      method: 'GET',
      url: '/data/kodifikatora_ieraksts_choice?kods=JURIDISKAIS_STATUSS',
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).success(function (data) {
      sif.legalStatuses = data;
    });
  }

  function loadZITypes() {
    var req = {
      method: 'GET',
      url: '/data/kodifikatora_ieraksts_choice?kods=ZINATNISKAS_INSTITUCIJAS_TIPS',
      headers: {
        "Remote-host": "127.0.0.1",
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).success(function (data) {
      sif.ZITypes = data;
    });
  }

  function checkContactInfo(data, id) {}

  function saveContactInfo(data, id) {} // remove user


  function removeContactInfo(index) {
    sif.contact_data.splice(index, 1);
  } // add user


  function addContactInfo() {
    sif.insertedContactInfo = {
      id: sif.contact_data.length + 1,
      type: '',
      name: '',
      is_new: true
    };
    sif.contact_data.push(sif.insertedContactInfo);
  }

  function init() {
    dataOp.getCodificator('contact_info_types').then(function (data) {
      sif.contactInfoTypes = data.data;
    });
    dataOp.getCodificator('zinatniskais_amata_tips').then(function (data) {
      sif.vaditaja_amats = data.data;
    });
    dataOp.getCodificator('b_using_legal_status').then(function (data) {
      sif.buildingUsingLegalSatuses = data.data;
    });
    var maxYear = new Date().getFullYear() + 1;
    sif.scopusYears = [];

    for (var j = 2010; maxYear >= j; j++) {
      sif.scopusYears.push({
        id: j,
        title: j.toString()
      });
    }

    loadLegalStatuses();
    loadZITypes();
    sif.JobTypes = new Select2Data('choices', 'scientific_institution_works');
    loadData();
  }

  function processData(data) {
    if (data.reg_datums) {
      data.reg_datums = new Date(data.reg_datums);
    }

    if (data.reg_apliecibas_datums) {
      data.reg_apliecibas_datums = new Date(data.reg_apliecibas_datums);
    }

    if (data.reorg_datums) {
      data.reorg_datums = new Date(data.reorg_datums);
    }

    if (data.juridiskais_statuss_id) {
      data.juridiskais_statuss_id = data.juridiskais_statuss_id.toString();
    }

    if (data.zi_tips_id) {
      data.zi_tips_id = data.zi_tips_id.toString();
    } else {
      data.zi_tips_id = null;
    }

    if (data.vaditajs_id) {
      data.vaditajs_id = data.vaditajs_id.toString();
    } else {
      data.vaditajs_id = null;
    }

    if (data.archiving_date) {
      sif.isArchived = true;
    }

    if (data.kontaktinfo) {
      angular.forEach(data.kontaktinfo, function (cont) {
        cont.kontaktinfo.veids_id = cont.kontaktinfo.veids_id.toString();
      });
    } else {
      data.kontaktinfo = [];
    }

    if (data.telpu_nodrosinajums) {
      angular.forEach(data.telpu_nodrosinajums, function (building) {
        if (building.izmantosanas_statuss_id) {
          building.izmantosanas_statuss_id = building.izmantosanas_statuss_id.toString();
        }

        if (building.datums_no) {
          building.datums_no = new Date(building.datums_no);
        }

        if (building.datums_lidz) {
          building.datums_lidz = new Date(building.datums_lidz);
        }
      });
    } else {
      data.telpu_nodrosinajums = [];
    }

    if (!data.komersanta_personals) {
      data.komersanta_personals = [];
    }

    if (!data.pielikumi) {
      data.pielikumi = [];
    } else {
      angular.forEach(data.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    if (data.epasts) {
      sif.hasEmail = true;
    } else {
      sif.hasEmail = false;
    }

    sif.institution = data;
    var countReq = {
      method: 'GET',
      params: {
        zin_institucija_id: sif.institution.id
      },
      url: '/data/institucijas_zin_personals_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      sif.zdv_per_page = 100;
      sif.zdv_current_page = 1;
      sif.zdv_total = parseInt(countResponse.data.total_count, 10);
      sif.zdv_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / sif.zdv_per_page) + 1;
      sif.scrollToZdvPage(sif.institution);
    });
    countReq = {
      method: 'GET',
      params: {
        zin_institucija_id: sif.institution.id
      },
      url: '/data/institucijas_akad_personals_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      sif.adv_per_page = 100;
      sif.adv_current_page = 1;
      sif.adv_total = parseInt(countResponse.data.total_count, 10);
      sif.adv_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / sif.adv_per_page) + 1;
      sif.scrollToAdvPage(sif.institution);
    });
    countReq = {
      method: 'GET',
      params: {
        zin_institucija_id: sif.institution.id
      },
      url: '/data/institucijas_projekti_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      sif.pr_per_page = 100;
      sif.pr_current_page = 1;
      sif.pr_total = parseInt(countResponse.data.total_count, 10);
      sif.pr_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / sif.pr_per_page) + 1;
      sif.scrollToPrPage(sif.institution);
    });
    countReq = {
      method: 'GET',
      params: {
        institucija_id: sif.institution.id
      },
      url: '/data/institucijas_iekartas_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      sif.iek_per_page = 100;
      sif.iek_current_page = 1;
      sif.iek_total = parseInt(countResponse.data.total_count, 10);
      sif.iek_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / sif.iek_per_page) + 1;
      sif.scrollToIekPage(sif.institution);
    });
    countReq = {
      method: 'GET',
      params: {
        institucija_id: sif.institution.id
      },
      url: '/data/institucijas_kontaktinfo_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      sif.kp_per_page = 100;
      sif.kp_current_page = 1;
      sif.kp_total = parseInt(countResponse.data.total_count, 10);
      sif.kp_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / sif.kp_per_page) + 1;
      sif.scrollToKpPage(sif.institution);
    });
    sif.paginateTn(sif.institution);
    $timeout(function () {
      sif.institutionOrigin = angular.copy(sif.institution);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      sif.title = gettextCatalog.getString('Institūcija', null, 'Institūcijas');
      dataOp.getDefaultById($stateParams.id, 'institucija_editable').then(function (data) {
        sif.processData(data);
      });
    } else {
      sif.isNew = true;
      sif.title = gettextCatalog.getString('Pievienot institūciju', null, 'Institūcijas');
      sif.allowEdit = false;

      switch ($state.current.group) {
        case 'he_institution':
          sif.institution.ir_aii = true;
          break;

        case 'scientific_institution':
          sif.institution.ir_zi = true;
          break;

        case 'business':
          sif.institution.ir_komersants = true;
          break;
      }

      $timeout(function () {
        sif.institutionOrigin = angular.copy(sif.institution);
      });
    }
  }

  function saveInstitution(lock) {
    if (!lock) {
      if (!sif.institution.vaditajs_vards && !sif.institution.vaditajs_uzvards) {
        delete sif.institution.vaditajs_id;
      }

      if (!sif.institution.kontaktpersona_vards && !sif.institution.kontaktpersona_uzvards) {
        delete sif.institution.kontaktpersona_id;
      }

      if (!sif.institution.ir_zi) {
        delete sif.institution.zi_tips_id;
        delete sif.institution.zi_tips;
        delete sif.institution.zi_reg_nr;
        delete sif.institution.reg_datums;
        delete sif.institution.reorg_datums;
        delete sif.institution.reg_apliecibas_datums;
        delete sif.institution.deklaretais_dibinatajs;
        delete sif.institution.adress;
      }

      if (!sif.institution.ir_aii) {
        delete sif.institution.aii_reg_nr;
      }

      if (!sif.institution.ir_aii && !sif.institution.ir_zi) {
        delete sif.institution.vaditajs_personas_kods;
        delete sif.institution.vaditajs_vards;
        delete sif.institution.vaditajs_id;
        delete sif.institution.vaditajs_uzvards;
        delete sif.institution.vaditaja_amats;
      }

      if (!sif.institution.ir_komersants && !sif.institution.ir_zi) {
        delete sif.institution.juridiskais_statuss_id;
        delete sif.institution.statuss;
        delete sif.institution.reg_nr;
        delete sif.institution.pvn_nr;
      }

      if (sif.institution.telpu_nodrosinajums) {
        angular.forEach(sif.institution.telpu_nodrosinajums, function (building) {
          if (building.kopeja_platiba) {
            building.kopeja_platiba = parseFloat(building.kopeja_platiba);
          }

          if (building.zin_darb_un_izgl_platiba) {
            building.zin_darb_un_izgl_platiba = parseFloat(building.zin_darb_un_izgl_platiba);
          }

          if (building.adm_darb_platiba) {
            building.adm_darb_platiba = parseFloat(building.adm_darb_platiba);
          }

          if (building.kopliet_telpu_platiba) {
            building.kopliet_telpu_platiba = parseFloat(building.kopliet_telpu_platiba);
          }

          if (building.iznom_telpu_platiba) {
            building.iznom_telpu_platiba = parseFloat(building.iznom_telpu_platiba);
          }

          if (building.neizm_telpu_platiba) {
            building.neizm_telpu_platiba = parseFloat(building.neizm_telpu_platiba);
          }
        });
      }

      angular.forEach(sif.institution.pielikumi, function (att) {
        if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(Date.now());
        } else if (!att.institucijai_pieejams_no_checked) {
          delete att.institucijai_pieejams_no;
        }

        if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(Date.now());
        } else if (!att.registretiem_pieejams_no_checked) {
          delete att.registretiem_pieejams_no;
        }

        if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(Date.now());
        } else if (!att.publiski_pieejams_no_checked) {
          delete att.publiski_pieejams_no;
        }
      });
      dataOp.saveDefault(sif.institution, 'institucija_editable', true).then(function (data) {
        $rootScope.allowPrint = true;
        sif.processData(data.data);

        if (sif.institution.manager_archiving_date) {
          dataOp.ArchiveData('personals', {
            id: sif.institution.vaditajs_id
          });
        }

        if (sif.institution.contact_archiving_date) {
          dataOp.ArchiveData('personals', {
            id: sif.institution.kontaktpersona_id
          });
        }

        angular.forEach(sif.institution.komersanta_personals, function (bp) {
          if (bp.personals_archiving_date) {
            dataOp.ArchiveData('personals', {
              id: bp.personals_id
            });
          }
        });

        if (sif.institution.id) {
          sif.isNew = false;
          Notification.success(gettextCatalog.getString('Veiksmīgi labota institūcija!', null, 'Institūcijas'));
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienota institūcija!', null, 'Institūcijas'));
          $state.go('app.scientific_institution.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleErrorNew);
    }
  }

  function resetScientific() {
    sif.institution = angular.copy(sif.institutionOrigin);
  }

  function editInstitution() {
    sif.allowEdit = false;
  }

  function searchPersonByPersonalCode(code, isStaff) {
    var userIds = [];
    var showDialog = false;
    SearchPerson.search(code, userIds, sif.loadPersonData, sif.resetPersonData, false).then(function (data) {
      if (sif.institution.vaditajs_id !== null && (data === null || typeof data === 'undefined')) {
        sif.institution.vaditajs_id = null;
        sif.institution.vaditajs_vards = null;
        sif.institution.vaditajs_uzvards = null;
        sif.institution.manager_archiving_date = null;
      }

      if (sif.institution.kontaktpersona_personas_kods == sif.institution.vaditajs_personas_kods) {
        sif.institution.vaditajs_vards = sif.institution.kontaktpersona_vards;
        sif.institution.vaditajs_uzvards = sif.institution.kontaktpersona_uzvards;
      }
    });
  }

  function loadPersonData(data) {
    if (data !== null && typeof data !== 'undefined') {
      sif.institution.vaditajs_id = data.id.toString();
      sif.institution.vaditajs_vards = data.vards;
      sif.institution.vaditajs_uzvards = data.uzvards;
      sif.institution.institution_archiving_date = data.archiving_date;
    }
  }

  function resetPersonData(data) {
    sif.institution.vaditajs_id = null;
    sif.institution.vaditajs_vards = null;
    sif.institution.vaditajs_uzvards = null;
  }

  function searchContactByPersonalCode(code) {
    var userIds = [];
    var showDialog = false;
    SearchPerson.search(code, userIds, sif.loadContactData, sif.resetContactData, false).then(function (data) {
      if (sif.institution.kontaktpersona_id !== null && (data === null || typeof data === 'undefined')) {
        sif.institution.kontaktpersona_id = null;
        sif.institution.kontaktpersona_vards = null;
        sif.institution.kontaktpersona_uzvards = null;
        sif.institution.contact_archiving_date = null;
      }

      if (sif.institution.kontaktpersona_personas_kods == sif.institution.vaditajs_personas_kods) {
        sif.institution.kontaktpersona_vards = sif.institution.vaditajs_vards;
        sif.institution.kontaktpersona_uzvards = sif.institution.vaditajs_uzvards;
      }
    });
  }

  function loadContactData(data) {
    if (data !== null && typeof data !== 'undefined') {
      sif.institution.kontaktpersona_id = data.id.toString();
      sif.institution.kontaktpersona_vards = data.vards;
      sif.institution.kontaktpersona_uzvards = data.uzvards;
      sif.institution.contact_archiving_date = data.archiving_date;
    }
  }

  function resetContactData(data) {
    sif.institution.kontaktpersona_id = null;
    sif.institution.kontaktpersona_vards = null;
    sif.institution.kontaktpersona_uzvards = null;
  }

  function searchBusinessPersonalByPersonalCode(code, index) {
    var userIds = [];
    SearchPerson.search(code, userIds, sif.loadBusinessPersonalData, sif.resetBusinessPersonalData, false, index).then(function (data) {
      if (sif.institution.komersanta_personals[index].personals_id !== null && (data === null || typeof data === 'undefined')) {
        sif.institution.komersanta_personals[index].personals_id = null;
        sif.institution.komersanta_personals[index].personals_vards = null;
        sif.institution.komersanta_personals[index].personals_uzvards = null;
        sif.institution.komersanta_personals[index].personals_archiving_date = null;
      }
    });
  }

  function loadBusinessPersonalData(data, index) {
    if (data !== null && typeof data !== 'undefined') {
      sif.institution.komersanta_personals[index].personals_id = data.id.toString();
      sif.institution.komersanta_personals[index].personals_vards = data.vards;
      sif.institution.komersanta_personals[index].personals_uzvards = data.uzvards;
      sif.institution.komersanta_personals[index].personals_archiving_date = data.archiving_date;
    }
  }

  function resetBusinessPersonalData(data, index) {
    sif.institution.komersanta_personals[index].personals_id = null;
    sif.institution.komersanta_personals[index].personals_vards = null;
    sif.institution.komersanta_personals[index].personals_uzvards = null;
  }

  function pgpKeyDialog() {
    ngDialog.openConfirm({
      template: 'components/scientific_institution/tabs/dialog-pgp-key.html',
      scope: $scope,
      data: sif.pgpObj
    }).then(function () {
      dataOp.saveDefault(sif.pgpObj, 'zi_autenth_pgp_key').then(function (data) {
        Notification.success(gettextCatalog.getString('PGP publiskā atslēga saglabāta!', null, 'Institūcijas'));
      }, $scope.handleErrorNew);
    }, function () {});
  }

  function emailDialog() {
    sif.emailObj = {
      epasta_statuss: 'TIEK_SUTITS'
    };

    if (sif.institution.epasts) {
      sif.emailObj.epasts = sif.institution.epasts;
    }

    ngDialog.openConfirm({
      template: 'components/scientific_institution/tabs/dialog-email.html',
      scope: $scope,
      data: sif.emailObj
    }).then(function () {
      dataOp.saveDefault(sif.emailObj, 'zi_email').then(function (data) {
        Notification.success(gettextCatalog.getString('Epasts nosūtīts!', null, 'Institūcijas'));
        delete sif.emailObj;
      }, $scope.handleErrorNew);
    }, function () {});
  }

  function getPgpKey() {
    if ($stateParams.id) {
      dataOp.getDefaultById($stateParams.id, 'zi_autenth_pgp_key').then(function (data) {
        sif.pgpObj = data;
        sif.pgpKeyDialog();
      });
    } else {
      sif.pgpKeyDialog();
    }
  }

  function archiveInstitution() {
    dataOp.ArchiveData('institucija', {
      id: sif.institution.id
    }).then(function (data) {
      $rootScope.allowPrint = true;
      Notification.success(gettextCatalog.getString('Institūcija veiksmīgi arhivēta!', null, 'Institūcijas'));
      $state.reload();
    }, $scope.handleErrorNew);
  }

  function unarchiveInstitution() {
    dataOp.UnarchiveData('institucija', {
      id: sif.institution.id
    }).then(function (data) {
      $rootScope.allowPrint = true;
      Notification.success(gettextCatalog.getString('Institūcija veiksmīgi izņemta no arhīva!', null, 'Institūcijas'));
      $state.reload();
    }, $scope.handleErrorNew);
  }

  init();
}]);
/**
 * @name scientific_institution
 * @description Saraksts "Zinātniskās institūcijas"
 * @param  {string} url /data/institucija_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificInstitutionController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$q', '$window', '$filter', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $q, $window, $filter, dataOp) {
  var si = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('institucija_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  si.openInstitution = openInstitution;
  si.deleteInstitution = deleteInstitution;
  si.openHomepage = openHomepage;
  si.archiveInstitution = archiveInstitution;

  function openInstitution(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.scientific_institution.edit', {
        id: row.id
      });
    } else {
      $state.go('app.scientific_institution.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function archiveInstitution(archiveObj, selected) {
    var noErrors = true;
    ngDialog.openConfirm({
      template: 'shared/grid/archiveDialog.html',
      className: 'ngdialog-theme-default dialog400',
      data: {
        count: selected
      },
      scope: $scope
    }).then(function (value) {
      function async() {
        var promises = [];
        Object.keys(archiveObj).forEach(function (key, val) {
          if (!archiveObj[key].object.ir_arhivets) {
            var req = dataOp.ArchiveData('institucija', {
              id: key,
              ir_arhivets: false
            }).then(function (response) {
              return response;
            }, function (response) {
              noErrors = false;
              return response;
            });
            promises.push(req);
          }
        });
        return $q.all(promises);
      }

      var promise = async();
      promise.then(function (value) {
        if (noErrors) {
          Notification.success(gettextCatalog.getString('Zinātniskās institūcijas veiksmīgi arhivētas!', null, 'Institūcijas'));
        } else {
          Notification.error(gettextCatalog.getString('Sistēmas kļūda!', null, 'Institūcijas'));
        }

        $state.reload();
      });
    });
  }

  function deleteInstitution(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("institucija_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta institūcija!', null, 'Institūcijas'));
      return true;
    }, $scope.handleError);
  }

  si.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Institūcijas'),
      key: "nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Reģistrācijas nr. ZI reģistrā", null, 'Institūcijas'),
      key: "zi_reg_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Vadītājs (vārds, uzvārds)", null, 'Institūcijas'),
      key: "vaditajs",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Juridiskā adrese", null, 'Institūcijas'),
      key: "juridiska_adrese",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Tālruņa numurs", null, 'Institūcijas'),
      key: "telefona_nr",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskās institūcijas e-pasta adrese", null, 'Institūcijas'),
      key: "epasts",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Mājas lapa", null, 'Institūcijas'),
      key: "majas_lapa",
      sortable: "true",
      link: true
    }],
    default_sort_col: 'nosaukums',
    default_sort_dir: 'asc',
    click_function: si.openInstitution,
    archive_function: si.archiveInstitution,
    archivePermission: 'institucija_list',
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    bulkArchive: true,
    delete_function: si.deleteInstitution,
    filters: true,
    catalog_name: gettextCatalog.getString('Zinātniskās institūcijas', null, 'Institūcijas'),
    create_function: si.openInstitution,
    link_function: si.openHomepage,
    "export": true
  };

  if ($rootScope.currentUserRights.hasOwnProperty('institucija_list') && $rootScope.currentUserRights['institucija_list'].indexOf('archive_view') != -1) {
    si.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Institūcijas'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name scientific_personal_form
 * @description Forma "Zinātniskais personāls"
 * @param  {string} url /data/zin_personals/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('ScientificPersonalEditController', ['UploadService', 'ngDialog', 'Select2Data', '$rootScope', 'SearchPerson', 'Restangular', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$http', '$q', function (UploadService, ngDialog, Select2Data, $rootScope, SearchPerson, Restangular, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $http, $q) {
  var ctrl = this;
  $scope.allowEdit = true;
  ctrl.scientific = null;
  ctrl.personsFound = null;
  ctrl.scientificOrigin = null;
  ctrl.isArchived = false;
  ctrl.isNew = false;
  ctrl.initialPersonalCode = null;
  ctrl.formats = ['dd.MM.yyyy'];
  ctrl.format = ctrl.formats[0];
  ctrl.personFormState = null;
  ctrl.reqSciWorkerId = false;
  ctrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Personāls'),
    active: true
  }, {
    id: 'scientific_personal',
    head: gettextCatalog.getString('Zin. darba vieta', null, 'Personāls'),
    active: false
  }, {
    id: 'academic_personal',
    head: gettextCatalog.getString('Akad. darba vieta', null, 'Personāls'),
    active: false
  }, {
    id: 'phoneDataTab',
    head: gettextCatalog.getString('Kontaktinformācija', null, 'Personāls'),
    active: false
  }, {
    id: 'qualificationJobDataTab',
    head: gettextCatalog.getString('Izglītība', null, 'Personāls'),
    active: false
  }, {
    id: 'attachmentDataTab',
    head: gettextCatalog.getString('Pielikums', null, 'Personāls'),
    active: false
  }, {
    id: 'eksperti',
    head: gettextCatalog.getString('Eksperta tiesības', null, 'Personāls'),
    active: false
  }, {
    id: 'projectDataTab',
    head: gettextCatalog.getString('Projekti', null, 'Personāls'),
    active: false
  }, {
    id: 'sciResultsDataTab',
    head: gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Personāls'),
    active: false
  }]; // functions

  ctrl.formatDate = $rootScope.formatDate;
  ctrl.loadData = loadData;
  ctrl.saveScientific = saveScientific;
  ctrl.UploadService = UploadService;
  ctrl.resetScientific = resetScientific;
  ctrl.updatePrintTabTitle = updatePrintTabTitle;
  ctrl.searchPersonByPersonalCode = searchPersonByPersonalCode;
  ctrl.goToUserForm = goToUserForm;
  ctrl.processData = processData;
  ctrl.institutionTypes = null;
  ctrl.dateFormat = 'dd.MM.yyyy';
  ctrl.currentYear = new Date().getFullYear();
  ctrl.addEmptyJob = addEmptyJob;
  ctrl.addEmptyStudies = addEmptyStudies;
  ctrl.setEditMode = setEditMode;
  ctrl.isLockable = isLockable;
  ctrl.hasQualNoBranches = hasQualNoBranches;
  ctrl.hasStudiesNoBranches = hasStudiesNoBranches;
  ctrl.addEmptyQualification = addEmptyQualification;
  ctrl.addEmptyLZP = addEmptyLZP;
  ctrl.archivePerson = archivePerson;
  ctrl.unarchivePerson = unarchivePerson;
  ctrl.gotoState = gotoState;
  ctrl.refreshViisEduData = refreshViisEduData;
  ctrl.refreshScopusSciResData = refreshScopusSciResData;
  ctrl.refreshWosSciResData = refreshWosSciResData;
  ctrl.hasReqSciBranches = hasReqSciBranches;
  ctrl.canUpd = canUpd;
  ctrl.canSave = canSave;
  ctrl.canDelete = canDelete;
  ctrl.onUpdateOfElectionDate = onUpdateOfElectionDate;
  ctrl.isValidAmataPeriods = isValidAmataPeriods;
  ctrl.hasInvalidAmataPeriods = hasInvalidAmataPeriods;

  function onUpdateOfElectionDate(data) {
    if (data.amata_ievelesanas_datums) {
      data.amata_stasanas_datums = new Date(data.amata_ievelesanas_datums);
      data.amata_beigu_termins = new Date(new Date(data.amata_ievelesanas_datums).setYear(data.amata_ievelesanas_datums.getFullYear() + 6));
      data.amata_beigu_termins.setDate(data.amata_beigu_termins.getDate() - 1);
    }
  }

  function isValidAmataPeriods(data) {
    if (data.amata_beigu_termins) {
      var asd = new Date(1995, 1, 1);
      var asd1 = new Date(1995, 1, 1);

      if (data.amata_stasanas_datums) {
        asd = new Date(data.amata_stasanas_datums);
      }

      if (asd < asd1) {
        asd = asd1;
      }

      var abt = new Date(data.amata_beigu_termins);
      var pabt = new Date(new Date(asd).setYear(asd.getFullYear() + 6));

      if (abt <= pabt) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }

  function hasInvalidAmataPeriods() {
    var hasInvalidPeriods = false;

    if (ctrl.scientific) {
      if (ctrl.scientific.zin_darba_vieta) {
        for (var x = 0; ctrl.scientific.zin_darba_vieta.length > x; x++) {
          if (!isValidAmataPeriods(ctrl.scientific.zin_darba_vieta[x])) {
            hasInvalidPeriods = true;
            break;
          }
        }
      }
    }

    return hasInvalidPeriods;
  }

  function canUpd() {
    return ctrl.canSave('personals_vards_uzvards') || ctrl.canSave('personals_perskods') || ctrl.canSave('personals_zin_id') || ctrl.canSave('personals_pmlp_dati') || ctrl.canSave('personals_mirsanas_datums') || ctrl.canSave('personals_lzp_eksperts_1') || ctrl.canSave('personals_lzp_eksperts_2') || ctrl.canSave('personals_horizon_eksperts') || ctrl.canSave('personals_kontaktinfo') || ctrl.canSave('personals_izglitiba') || ctrl.canSave('personals_studijas') || ctrl.canSave('personals_izglitiba_papilddati') || ctrl.canSave('personals_zin_darbs') || ctrl.canDelete('personals_zin_darbs') || ctrl.canSave('personals_zin_darbs_slodze') || ctrl.canSave('personals_akad_darbs') || ctrl.canSave('personals_akad_darbs_slodze') || ctrl.canSave('personals_piel');
  }

  function canSave(perm) {
    if ($rootScope.currentUserRights.hasOwnProperty(perm) && $rootScope.currentUserRights[perm].indexOf('save') != -1 || $rootScope.u.context == 'priv' && ctrl.scientific && ctrl.scientific.auth && ctrl.scientific.auth.is_update_relevant) {
      return true;
    }

    return false;
  }

  function canDelete(perm) {
    if ($rootScope.currentUserRights.hasOwnProperty(perm) && $rootScope.currentUserRights[perm].indexOf('delete') != -1 || $rootScope.u.context == 'priv' && ctrl.scientific && ctrl.scientific.auth && ctrl.scientific.auth.is_delete_relevant) {
      return true;
    }

    return false;
  }

  function hasReqSciBranches() {
    var hasReqBranches = true;

    if (ctrl.scientific) {
      if (ctrl.scientific.zin_darba_vieta) {
        for (var x = 0; ctrl.scientific.zin_darba_vieta.length > x; x++) {
          if (!ctrl.scientific.zin_darba_vieta[x].apaksnozares || ctrl.scientific.zin_darba_vieta[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }

      if (ctrl.scientific.lzp_eksperts) {
        for (var x = 0; ctrl.scientific.lzp_eksperts.length > x; x++) {
          if (!ctrl.scientific.lzp_eksperts[x].apaksnozares || ctrl.scientific.lzp_eksperts[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }

      if (ctrl.scientific.kvalifikacija) {
        for (var x = 0; ctrl.scientific.kvalifikacija.length > x; x++) {
          if (!ctrl.scientific.kvalifikacija[x].apaksnozares || ctrl.scientific.kvalifikacija[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }

      if (ctrl.scientific.esosas_studijas) {
        for (var x = 0; ctrl.scientific.esosas_studijas.length > x; x++) {
          if (!ctrl.scientific.esosas_studijas[x].apaksnozares || ctrl.scientific.esosas_studijas[x].apaksnozares.length <= 0) {
            hasReqBranches = false;
          }
        }
      }
    }

    return hasReqBranches;
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ctrl.tabs.length > i; i++) {
        if (ctrl.tabs[i].active) {
          ctrl.currentTitle = ctrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function gotoState(s, dId, dT) {
    $state.go(s, {
      id: dId,
      type: dT
    });
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function isLockable() {
    var context = dataOp.getContext();
    return context != -1;
  }

  function hasQualNoBranches() {
    if (ctrl.scientific.kvalifikacija) {
      for (var i = 0; ctrl.scientific.kvalifikacija.length > i; i++) {
        if (!ctrl.scientific.kvalifikacija[i].apaksnozares || !ctrl.scientific.kvalifikacija[i].apaksnozares.length) return true;
      }
    }

    return false;
  }

  function hasStudiesNoBranches() {
    if (ctrl.scientific.esosas_studijas) {
      for (var i = 0; ctrl.scientific.esosas_studijas.length > i; i++) {
        if (!ctrl.scientific.esosas_studijas[i].apaksnozares || !ctrl.scientific.esosas_studijas[i].apaksnozares.length) return true;
      }
    }

    return false;
  }

  function init() {
    if ($state.current.group == "scientific_personal") {
      ctrl.reqSciWorkerId = true;
    }

    dataOp.getCodificator('countries').then(function (data) {
      ctrl.countries = data.data;
    });
    dataOp.getCodificator('pers_status').then(function (data) {
      ctrl.pers_status = data.data;
    });
    dataOp.getCodificator('akademiskais_amata_tips').then(function (data) {
      ctrl.akadWork = data.data;
    });
    dataOp.getCodificator('work_types').then(function (data) {
      ctrl.workTypes = data.data;
    });
    dataOp.getCodificator('komisija_id').then(function (data) {
      ctrl.komisijasVeids = data.data;
    });
    dataOp.getCodificator('zin_izglitibas_amata_tips').then(function (data) {
      ctrl.akadAmats = data.data;
    });
    dataOp.getCodificator('zinatniskais_amata_tips').then(function (data) {
      ctrl.akad_amats = data.data;
    });
    dataOp.getCodificator('qualification_types').then(function (data) {
      ctrl.qualificationTypes = data.data;
    });
    dataOp.getCodificator('contact_info_types').then(function (data) {
      ctrl.contactInfoTypes = data.data;
    });
    ctrl.scientificInstitutions = new Select2Data('choices', 'scientific_institutions');
    ctrl.aii_entries = new Select2Data('choices', 'aii_choice');
    ctrl.loadData();
  }

  function addEmptyJob(jobType) {
    var iestade = undefined;
    var choice = undefined;
    var context = dataOp.getContext();

    if (jobType == 'akad_darba_vieta') {
      choice = 'aii_choice';
    } else if (jobType == 'zin_darba_vieta') {
      choice = 'scientific_institutions';
    }

    if (context != -1) {
      dataOp.getChoices(choice, {
        id: context.id
      }).then(function (data) {
        if (data.data[0]) {
          iestade = {
            id: data.data[0].id,
            text: data.data[0].title
          };
        }

        ctrl.scientific[jobType].push({
          is_delete_relevant: true,
          is_update_relevant: true,
          slodze: [],
          apaksnozares: [],
          iestade_select_obj: iestade
        });
      });
    } else {
      ctrl.scientific[jobType].push({
        is_delete_relevant: true,
        is_update_relevant: true,
        slodze: [],
        apaksnozares: [],
        iestade_select_obj: iestade
      });
    }
  }

  function addEmptyQualification() {
    ctrl.scientific.kvalifikacija.push({
      apaksnozares: []
    });
  }

  function addEmptyStudies() {
    ctrl.scientific.esosas_studijas.push({
      apaksnozares: []
    });
  }

  function addEmptyLZP() {
    ctrl.scientific.lzp_eksperts.push({
      apaksnozares: []
    });
  }

  function resolveLZP() {
    if (ctrl.scientific.lzp_eksperts) {
      for (var i = 0; ctrl.scientific.lzp_eksperts.length > i; i++) {
        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no = new Date(ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_no);
        }

        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz = new Date(ctrl.scientific.lzp_eksperts[i].lzp_eksperts_datums_lidz);
        }

        if (ctrl.scientific.lzp_eksperts[i].komisija_id) {
          ctrl.scientific.lzp_eksperts[i].komisija_id = ctrl.scientific.lzp_eksperts[i].komisija_id.toString();
        }

        if (ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi) {
          ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi = ctrl.scientific.lzp_eksperts[i].lzp_eksperts_atslegvardi.toString();
        }
      }
    } else {
      ctrl.scientific.lzp_eksperts = [];
    }
  }

  function resolveQualification() {
    if (ctrl.scientific.kvalifikacija) {
      for (var i = 0; ctrl.scientific.kvalifikacija.length > i; i++) {
        if (ctrl.scientific.kvalifikacija[i].iegusanas_datums) {
          ctrl.scientific.kvalifikacija[i].iegusanas_datums = new Date(ctrl.scientific.kvalifikacija[i].iegusanas_datums);
        }

        if (ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id) {
          ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id = ctrl.scientific.kvalifikacija[i].kvalifikacijas_veids_id.toString();
        }

        if (ctrl.scientific.kvalifikacija[i].valsts_id) {
          ctrl.scientific.kvalifikacija[i].valsts_id = ctrl.scientific.kvalifikacija[i].valsts_id.toString();
        }

        if (ctrl.scientific.kvalifikacija[i].stude_no) {
          ctrl.scientific.kvalifikacija[i].stude_no = new Date(ctrl.scientific.kvalifikacija[i].stude_no);
        }

        if (ctrl.scientific.kvalifikacija[i].stude_lidz) {
          ctrl.scientific.kvalifikacija[i].stude_lidz = new Date(ctrl.scientific.kvalifikacija[i].stude_lidz);
        }
      }
    } else {
      ctrl.scientific.kvalifikacija = [];
    }
  }

  function resolveStudies() {
    if (ctrl.scientific.esosas_studijas) {
      for (var i = 0; ctrl.scientific.esosas_studijas.length > i; i++) {
        if (ctrl.scientific.esosas_studijas[i].valsts_id) {
          ctrl.scientific.esosas_studijas[i].valsts_id = ctrl.scientific.esosas_studijas[i].valsts_id.toString();
        }

        if (ctrl.scientific.esosas_studijas[i].stude_no) {
          ctrl.scientific.esosas_studijas[i].stude_no = new Date(ctrl.scientific.esosas_studijas[i].stude_no);
        }

        if (ctrl.scientific.esosas_studijas[i].stude_lidz) {
          ctrl.scientific.esosas_studijas[i].stude_lidz = new Date(ctrl.scientific.esosas_studijas[i].stude_lidz);
        }
      }
    } else {
      ctrl.scientific.esosas_studijas = [];
    }
  }

  function resolveAcademicWork() {
    if (ctrl.scientific.akad_darba_vieta) {
      for (var a = 0; ctrl.scientific.akad_darba_vieta.length > a; a++) {
        if (ctrl.scientific.akad_darba_vieta[a].zin_institucija_id) {
          ctrl.scientific.akad_darba_vieta[a].iestade_select_obj = {
            id: ctrl.scientific.akad_darba_vieta[a].zin_institucija_id,
            text: ctrl.scientific.akad_darba_vieta[a].zin_institucija_nosaukums
          };
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_veids_id) {
          ctrl.scientific.akad_darba_vieta[a].amata_veids_id = ctrl.scientific.akad_darba_vieta[a].amata_veids_id.toString();
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins) {
          ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins = new Date(ctrl.scientific.akad_darba_vieta[a].amata_beigu_termins);
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums) {
          ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums = new Date(ctrl.scientific.akad_darba_vieta[a].amata_stasanas_datums);
        }

        if (ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums) {
          ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums = new Date(ctrl.scientific.akad_darba_vieta[a].amata_ievelesanas_datums);
        }
      }
    } else {
      ctrl.scientific.akad_darba_vieta = [];
    }
  }

  function resolveSciWork() {
    if (ctrl.scientific.zin_darba_vieta) {
      for (var m = 0; ctrl.scientific.zin_darba_vieta.length > m; m++) {
        if (ctrl.scientific.zin_darba_vieta[m].zin_institucija_id) {
          ctrl.scientific.zin_darba_vieta[m].iestade_select_obj = {
            id: ctrl.scientific.zin_darba_vieta[m].zin_institucija_id,
            text: ctrl.scientific.zin_darba_vieta[m].zin_institucija_nosaukums
          };
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums) {
          ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums = new Date(ctrl.scientific.zin_darba_vieta[m].amata_stasanas_datums);
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins) {
          ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins = new Date(ctrl.scientific.zin_darba_vieta[m].amata_beigu_termins);
        }

        if (ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums) {
          ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums = new Date(ctrl.scientific.zin_darba_vieta[m].amata_ievelesanas_datums);
        }
      }
    } else {
      ctrl.scientific.zin_darba_vieta = [];
    }
  }

  function processData(data) {
    ctrl.scientific = data;
    ctrl.initialPersonalCode = ctrl.scientific.personals_personas_kods;

    if (data.pilsoniba_id) {
      data.pilsoniba_id = data.pilsoniba_id.toString();
    }

    if (data.statuss_valsti_id) {
      data.statuss_valsti_id = data.statuss_valsti_id.toString();
    }

    if (ctrl.scientific.dzimsanas_datums) {
      ctrl.scientific.dzimsanas_datums = new Date(ctrl.scientific.dzimsanas_datums);
    }

    if (ctrl.scientific.mirsanas_datums) {
      ctrl.scientific.mirsanas_datums = new Date(ctrl.scientific.mirsanas_datums);
    }

    if (ctrl.scientific.h2020_eksperts_datums_no) {
      ctrl.scientific.h2020_eksperts_datums_no = new Date(ctrl.scientific.h2020_eksperts_datums_no);
    }

    if (ctrl.scientific.h2020_eksperts_datums_lidz) {
      ctrl.scientific.h2020_eksperts_datums_lidz = new Date(ctrl.scientific.h2020_eksperts_datums_lidz);
    }

    if (ctrl.scientific.beigu_termins) {
      ctrl.scientific.beigu_termins = new Date(ctrl.scientific.beigu_termins);
    }

    ctrl.isArchived = !!ctrl.scientific.archiving_date;
    resolveQualification();
    resolveStudies();
    resolveAcademicWork();
    resolveSciWork();
    resolveLZP();

    if (ctrl.scientific.contacts) {
      angular.forEach(ctrl.scientific.contacts, function (cont) {
        cont.contacts.veids_id = cont.contacts.veids_id.toString();
      });
    } else {
      ctrl.scientific.contacts = [];
    }

    if (!ctrl.scientific.pielikumi) {
      ctrl.scientific.pielikumi = [];
    } else {
      angular.forEach(ctrl.scientific.pielikumi, function (att) {
        att.institucijai_pieejams_no_checked = !!att.institucijai_pieejams_no;
        att.registretiem_pieejams_no_checked = !!att.registretiem_pieejams_no;
        att.publiski_pieejams_no_checked = !!att.publiski_pieejams_no;

        if (att.institucijai_pieejams_no) {
          att.institucijai_pieejams_no = new Date(att.institucijai_pieejams_no);
        }

        if (att.registretiem_pieejams_no) {
          att.registretiem_pieejams_no = new Date(att.registretiem_pieejams_no);
        }

        if (att.publiski_pieejams_no) {
          att.publiski_pieejams_no = new Date(att.publiski_pieejams_no);
        }
      });
    }

    $timeout(function () {
      ctrl.scientificOrigin = angular.copy(ctrl.scientific);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      switch ($state.current.group) {
        case 'academic_personal':
          ctrl.title = gettextCatalog.getString('Akadēmiskā persona', null, 'Personāls');
          break;

        case 'scientific_personal':
          ctrl.title = gettextCatalog.getString('Zinātniskā persona', null, 'Personāls');
          break;

        case 'personal':
          ctrl.title = gettextCatalog.getString('Persona', null, 'Personāls');
          break;
      }

      dataOp.getDefaultById($stateParams.id, 'zin_personals_editable').then(function (data) {
        dataOp.listDefault('personals_projekti', {
          personals_id: $stateParams.id
        }).then(function (pData) {
          data.projekti = pData;
          dataOp.listDefault('personals_zin_rezultati', {
            personals_id: $stateParams.id
          }).then(function (srData) {
            data.sci_results = srData;
            ctrl.processData(data);
          });
        });
      });
    } else {
      ctrl.isNew = true;

      switch ($state.current.group) {
        case 'academic_personal':
          ctrl.title = gettextCatalog.getString('Pievienot akadēmisko personu', null, 'Personāls');
          break;

        case 'scientific_personal':
          ctrl.title = gettextCatalog.getString('Pievienot zinātnisko personu', null, 'Personāls');
          break;

        case 'personal':
          ctrl.title = gettextCatalog.getString('Pievienot personu', null, 'Personāls');
          break;
      }

      $scope.allowEdit = false;
      ctrl.scientific = {
        contacts: [],
        kvalifikacija: [],
        esosas_studijas: [],
        lzp_eksperts: [],
        akad_darba_vieta: [],
        zin_darba_vieta: [],
        pielikumi: [],
        apaksnozares: [],
        projekti: [],
        sci_results: [],
        scopus: [],
        wos: [],
        can_update: true
      };

      for (var i = ctrl.tabs.length - 1; i >= 0; i--) {
        if ($state.current.group == ctrl.tabs[i].id) {
          ctrl.tabs[i].required = "true";

          switch ($state.current.group) {
            case 'scientific_personal':
              ctrl.addEmptyJob('zin_darba_vieta');
              break;

            case 'academic_personal':
              ctrl.addEmptyJob('akad_darba_vieta');
              break;
          }
        }
      }

      $timeout(function () {
        ctrl.scientificOrigin = angular.copy(ctrl.scientific);
      });
    }
  }

  function lockResolveSciWork() {
    if (ctrl.scientific.zin_darba_vieta) {
      for (var x = 0; ctrl.scientific.zin_darba_vieta.length > x; x++) {
        if (ctrl.scientific.zin_darba_vieta[x].iestade_select_obj && ctrl.scientific.zin_darba_vieta[x].iestade_select_obj.id) {
          ctrl.scientific.zin_darba_vieta[x].zin_institucija_id = ctrl.scientific.zin_darba_vieta[x].iestade_select_obj.id;
        }

        if (ctrl.scientific.zin_darba_vieta[x].slodze) {
          for (var k = 0; ctrl.scientific.zin_darba_vieta[x].slodze.length > k; k++) {
            if (ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h) {
              ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h = parseFloat(ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_h);
            }

            if (ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple) {
              ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple = parseFloat(ctrl.scientific.zin_darba_vieta[x].slodze[k].slodze_ple);
            }
          }
        }
      }
    }
  }

  function lockResolveAcadWork() {
    if (ctrl.scientific.akad_darba_vieta) {
      for (var y = 0; ctrl.scientific.akad_darba_vieta.length > y; y++) {
        if (ctrl.scientific.akad_darba_vieta[y].iestade_select_obj && ctrl.scientific.akad_darba_vieta[y].iestade_select_obj.id) {
          ctrl.scientific.akad_darba_vieta[y].zin_institucija_id = ctrl.scientific.akad_darba_vieta[y].iestade_select_obj.id;
        }

        if (ctrl.scientific.akad_darba_vieta[y].slodze) {
          for (var z = 0; ctrl.scientific.akad_darba_vieta[y].slodze.length > z; z++) {
            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_kopa_ple);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_macibspeks_ple);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_h);
            }

            if (ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple) {
              ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple = parseFloat(ctrl.scientific.akad_darba_vieta[y].slodze[z].slodze_zindarbs_ple);
            }
          }
        }
      }
    }
  }

  function saveScientific(lock) {
    if (!lock) {
      if (ctrl.initialPersonalCode != ctrl.scientific.personals_personas_kods) {
        dataOp.checkPmlpPersonByPersonCode(ctrl.scientific.personals_personas_kods).then(function (response) {
          ctrl.scientific.ir_neeksistejoss_personas_kods = false;
          var data = response.data;

          if (data && data.error_code) {
            if (data.error_code == "NO_CONN") {
              $scope.showErrorMsg(gettextCatalog.getString('Neizdevās izveidot savienojumu ar PMLP', null, 'Personāls'));
              $rootScope.showLoader = false;
            } else if (data.error_code == "NO_PERSON") {
              $scope.showErrorMsg(gettextCatalog.getString('Personas kods neatbilst reālai personai', null, 'Personāls'));
              ctrl.scientific.ir_neeksistejoss_personas_kods = true;
              doSavePersonal();
            } else if (data.error_code == "NOT_ENABLED") {
              doSavePersonal();
            }
          } else {
            ctrl.scientific.personals_personas_kods = data.personas_kods;
            ctrl.scientific.personals_vards = data.vards;
            ctrl.scientific.personals_uzvards = data.uzvards;
            ctrl.scientific.mirsanas_datums = new Date(data.mirsanas_datums);
            doSavePersonal();
          }
        }, function (response) {
          $rootScope.showLoader = false;
          $scope.showErrorMsg(gettextCatalog.getString('Neizdevās izveidot savienojumu ar PMLP', null, 'Personāls'));
        });
      } else {
        doSavePersonal();
      }
    }
  }

  function doSavePersonal() {
    lockResolveSciWork();
    lockResolveAcadWork();
    angular.forEach(ctrl.scientific.pielikumi, function (att) {
      if (att.institucijai_pieejams_no_checked && !att.institucijai_pieejams_no) {
        att.institucijai_pieejams_no = new Date(Date.now());
      } else if (!att.institucijai_pieejams_no_checked) {
        delete att.institucijai_pieejams_no;
      }

      if (att.registretiem_pieejams_no_checked && !att.registretiem_pieejams_no) {
        att.registretiem_pieejams_no = new Date(Date.now());
      } else if (!att.registretiem_pieejams_no_checked) {
        delete att.registretiem_pieejams_no;
      }

      if (att.publiski_pieejams_no_checked && !att.publiski_pieejams_no) {
        att.publiski_pieejams_no = new Date(Date.now());
      } else if (!att.publiski_pieejams_no_checked) {
        delete att.publiski_pieejams_no;
      }
    });
    dataOp.saveDefault(ctrl.scientific, 'zin_personals_editable', true).then(function (data) {
      $rootScope.allowPrint = true;

      if (ctrl.scientific.id) {
        if (ctrl.scientific.id == $rootScope.currentUser.personalsId) {
          $rootScope.currentUser.vards = ctrl.scientific.personals_vards;
          $rootScope.currentUser.uzvards = ctrl.scientific.personals_uzvards;
        }

        ctrl.isNew = false;
        Notification.success(gettextCatalog.getString('Veiksmīgi labots zinātniskais darbinieks!', null, 'Personāls'));
        $state.reload();
      } else {
        Notification.success(gettextCatalog.getString('Veiksmīgi pievienots zinātniskais personāls!', null, 'Personāls'));
        $state.go($rootScope.editUrl, {
          id: data.data.id
        });
      }

      $scope.allowEdit = true;
    }, $scope.handleErrorNew);
  }

  function resetScientific() {
    $scope.allowEdit = true;
    ctrl.scientific = angular.copy(ctrl.scientificOrigin);
  }

  function goToUserForm(personsFound) {
    var goToParams = {};
    goToParams.id = personsFound.id;

    if ($stateParams.tab) {
      goToParams.tab = $stateParams.tab;
    }

    if ($state.current.name.indexOf(".new") > -1) {
      ctrl.personFormState = $state.current.name.replace(".new", ".edit");
    } else {
      ctrl.personFormState = $state.current.name;
    }

    if (personsFound) {
      $state.go(ctrl.personFormState, goToParams);
    }
  }

  function searchPersonByPersonalCode(code) {
    var idArr = [];

    if (ctrl.scientificOrigin && ctrl.scientificOrigin.id) {
      idArr.push(ctrl.scientificOrigin.id.toString());
    }

    SearchPerson.search(code, idArr, ctrl.goToUserForm).then(function (data) {
      ctrl.personsFound = data;
    });
  }

  function archivePerson() {
    dataOp.ArchiveData('personals', ctrl.scientific).then(function (data) {
      $rootScope.allowPrint = true;
      Notification.success(gettextCatalog.getString('Persona veiksmīgi arhivēta!', null, 'Personāls'));
      $state.reload();
    }, $scope.handleErrorNew);
  }

  function unarchivePerson() {
    dataOp.UnarchiveData('personals', ctrl.scientific).then(function (data) {
      $rootScope.allowPrint = true;
      Notification.success(gettextCatalog.getString('Persona veiksmīgi izņemta no arhīva!', null, 'Personāls'));
      $state.reload();
    }, $scope.handleErrorNew);
  }

  function refreshViisEduData() {
    if (ctrl.scientific.personals_personas_kods && ctrl.scientific.personals_personas_kods.length > 0) {
      dataOp.getViisEduData(ctrl.scientific.personals_personas_kods).then(function () {
        Notification.success("VIIS dati veiksmīgi pārnesti uz sistēmu");
        $state.reload();
      }, $scope.handleErrorNew);
    }
  }

  function refreshScopusSciResData() {
    if (ctrl.scientific.orcid && ctrl.scientific.orcid.length > 0 || ctrl.scientific.scopus.length > 0) {
      dataOp.getScopusData(null, null, ctrl.scientific.id).then(function () {
        Notification.success("Scopus dati veiksmīgi pārnesti uz sistēmu");
        $state.reload();
      }, $scope.handleErrorNew);
    }
  }

  function refreshWosSciResData() {
    if (ctrl.scientific.orcid && ctrl.scientific.orcid.length > 0 || ctrl.scientific.wos_researcher_nr && ctrl.scientific.wos_researcher_nr.length > 0 || ctrl.scientific.wos.length > 0) {
      dataOp.getWosData(null, null, ctrl.scientific.id).then(function () {
        Notification.success("WoS dati veiksmīgi pārnesti uz sistēmu");
        $state.reload();
      }, $scope.handleErrorNew);
    }
  }

  init();
}]);
/**
 * @name scientific_personal
 * @description Saraksts "Zinātniskais personāls"
 * @param  {string} url /data/zin_personals_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('ScientificPersonalController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', 'Restangular', 'Notification', '$rootScope', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, Restangular, Notification, $rootScope) {
  var sp = this;
  sp.title = 'Zinātniskie darbinieki'; // panel collapse initialization

  sp.collapseMainData = true; // function initialization

  sp.openPerson = openPerson;
  sp.deleteScientificPersonal = deleteScientificPersonal;

  function deleteScientificPersonal(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("zin_darba_vieta_delete", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts zinātinskais personāls!', null, 'Personāls'));
      return true;
    }, $scope.handleError);
  }

  function openPerson(row) {
    if (typeof row !== 'undefined' && typeof row.open_id !== 'undefined') {
      $state.go('app.scientific_personal.edit', {
        id: row.open_id,
        tab: 'scientificJobDataTab'
      });
    } else {
      $state.go('app.scientific_personal.new');
    }
  }

  sp.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Vārds", null, 'Personāls'),
      key: "personals_vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Personāls'),
      key: "personals_uzvards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Zinātniskā institūcija", null, 'Personāls'),
      key: "zin_institucija_nosaukums",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Amats", null, 'Personāls'),
      key: "amats",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Amata veids", null, 'Personāls'),
      key: "amata_veids",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("ORCID", null, 'Personāls'),
      key: "orcid",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("LZP eksperts", null, 'Personāls'),
      key: "ir_lzp_eksperts",
      sortable: "true",
      trueFalseVal: "true"
    }, {
      text: gettextCatalog.getString("Horizon 2020 eksperts", null, 'Personāls'),
      key: "ir_h2020_eksperts",
      sortable: "true",
      trueFalseVal: "true"
    }, {
      text: gettextCatalog.getString("Akadēmiskais personāls", null, 'Personāls'),
      key: "ir_ari_akademiskais_personals",
      sortable: "true",
      trueFalseVal: "true"
    }],
    default_sort_col: 'personals_uzvards',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    filters: false,
    click_function: sp.openPerson,
    "delete": false,
    bulkDelete: true,
    delete_function: sp.deleteScientificPersonal,
    catalog_name: gettextCatalog.getString('Zinātniskie darbinieki', null, 'Personāls'),
    create_function: sp.openPerson,
    "export": true
  };
  var state = $stateParams.context; //if (state == 'pub' || state == 'priv') {
  //   sp.gridParams.create_function = null
  //} else sp.gridParams.create_function = sp.openPerson

  if ($rootScope.currentUserRights.hasOwnProperty('zin_personals_list') && $rootScope.currentUserRights['zin_personals_list'].indexOf('archive_view') != -1) {
    sp.gridParams.columns.push({
      text: gettextCatalog.getString("Ir arhivēts", null, 'Personāls'),
      key: "ir_arhivets",
      trueFalseVal: true,
      sortable: "true"
    });
  }
}]);
/**
 * @name sso_form
 * @description "Ārējās sistēmas" forma
 * @param  {string} url /data/sso/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('SSOEditController', ['UploadService', 'Select2Data', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', function (UploadService, Select2Data, ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope) {
  var ssof = this;
  ssof.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Ārējās sistēmas'),
    active: true
  }];
  ssof.allowEdit = true;
  ssof.ssoOrigin = null; // functions

  ssof.loadData = loadData;
  ssof.saveSSO = saveSSO;
  ssof.resetSSO = resetSSO;
  ssof.processData = processData;
  ssof.updatePrintTabTitle = updatePrintTabTitle;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ssof.tabs.length > i; i++) {
        if (ssof.tabs[i].active) {
          ssof.currentTitle = ssof.tabs[i].head;
          break;
        }
      }
    });
  }

  function init() {
    loadData();
  }

  function processData(data) {
    ssof.sso = data;
    $timeout(function () {
      ssof.ssoOrigin = angular.copy(ssof.sso);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      ssof.title = gettextCatalog.getString('Ārējā sistēma', null, 'Ārējās sistēmas');
      dataOp.getDefaultById($stateParams.id, 'sso').then(function (data) {
        ssof.processData(data);
      });
    } else {
      ssof.title = gettextCatalog.getString('Pievienot ārējo sistēmu', null, 'Ārējās sistēmas');
      ssof.allowEdit = false;
      $timeout(function () {
        ssof.ssoOrigin = angular.copy(ssof.sso);
      });
    }
  }

  function saveSSO(lock) {
    if (!lock) {
      ssof.sso.usage = 'SSO';
      dataOp.saveDefault(ssof.sso, 'sso').then(function (data) {
        $rootScope.allowPrint = true;

        if (ssof.sso.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota ārējā sistēma!', null, 'Ārējās sistēmas'));
          ssof.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienota ārējā sistēma!', null, 'Ārējās sistēmas'));
          $state.go('app.sso.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function resetSSO() {
    ssof.allowEdit = true;
    ssof.sso = angular.copy(ssof.ssoOrigin);
  }

  init();
}]);
/**
 * @name scientific_institution
 * @description Saraksts "Ārējās sistēmas"
 * @param  {string} url /data/sso
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('SSOController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var sso = this; // function initialization

  sso.openSSO = openSSO;
  sso.deleteSSO = deleteSSO;

  function openSSO(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.sso.edit', {
        id: row.id
      });
    } else {
      $state.go('app.sso.new');
    }
  }

  function deleteSSO(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("sso", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta ārējā sistēma!', null, 'Ārējās sistēmas'));
      return true;
    }, $scope.handleError);
  }

  sso.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Ārējās sistēmas nosaukums", null, 'Ārējās sistēmas'),
      key: "owner",
      sortable: "true"
    }],
    click_function: sso.openSSO,
    create_function: sso.openSSO,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: sso.deleteSSO,
    filters: false,
    catalog_name: gettextCatalog.getString('Ārējās sistēmas', null, 'Ārējās sistēmas'),
    "export": false
  };
}]);
/**
 * @name supervisory_board_form
 * @description "Projektu uzraudzības komisija" forma
 * @param  {string} url /data/uzraudzibas_komisija_editable/{id}
 *
 * @returns {html} datu forma
 */
'use strict';

angular.module('myApp').controller('SupervisoryBoardFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$http', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $http, $window) {
  var sbe = this;
  sbe.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatinformācija', null, 'Projektu uzraudzības komisijas'),
    active: true
  }];
  sbe.supervisoryBoard = {};
  $scope.allowEdit = true;
  sbe.supervisoryBoardOrigin = null; // functions

  sbe.loadData = loadData;
  sbe.saveSupervisoryBoard = saveSupervisoryBoard;
  sbe.setEditMode = setEditMode;
  sbe.resetSupervisoryBoard = resetSupervisoryBoard;
  sbe.processData = processData;
  sbe.updatePrintTabTitle = updatePrintTabTitle;
  sbe.openHomepage = openHomepage;
  sbe.getInclude = getInclude;
  sbe.onUpdateEmail = onUpdateEmail;

  function getInclude(status) {
    return "components/supervisory_board/tabs/tab-maindata.html";
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; sbe.tabs.length > i; i++) {
        if (sbe.tabs[i].active) {
          sbe.currentTitle = sbe.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    loadData();
  }

  function processData(data) {
    sbe.supervisoryBoard = data;
    $timeout(function () {
      sbe.supervisoryBoardOrigin = angular.copy(sbe.supervisoryBoard);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      sbe.title = gettextCatalog.getString('Projektu uzraudzības komisija', null, 'Projektu uzraudzības komisijas');
      dataOp.getDefaultById($stateParams.id, 'uzraudzibas_komisija_editable').then(function (data) {
        sbe.processData(data);
      });
    } else {
      sbe.title = gettextCatalog.getString('Pievienot projektu uzraudzības komisiju', null, 'Projektu uzraudzības komisijas');
      sbe.supervisoryBoard = {
        adreses: []
      };
      $scope.allowEdit = false;
    }
  }

  function saveSupervisoryBoard(lock) {
    if (!lock) {
      dataOp.saveDefault(sbe.supervisoryBoard, 'uzraudzibas_komisija_editable').then(function (data) {
        $rootScope.allowPrint = true;

        if (sbe.supervisoryBoard.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi labota projektu uzraudzības komisija!', null, 'Projektu uzraudzības komisijas'));
          sbe.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienota projektu uzraudzības komisija!', null, 'Projektu uzraudzības komisijas'));
          $state.go('app.supervisory_board.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetSupervisoryBoard() {
    $scope.allowEdit = true;
    sbe.supervisoryBoard = angular.copy(sbe.supervisoryBoardOrigin);
  }

  function onUpdateEmail(data) {
    data.lietotaja_info = null;
    data.ir_pieejas_tiesibas = null;

    if (data.epasta_adrese && data.epasta_adrese != null) {
      var reqUrl = 'data/uzraudzibas_komisija_ki_dati?epasts=' + data.epasta_adrese;
      var req = {
        method: 'GET',
        url: reqUrl,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      $http(req).then(function (response) {
        if (response.data) {
          for (var i = 0; response.data.length > i; i++) {
            data.lietotaja_info = response.data[i].lietotaja_info;
            data.ir_pieejas_tiesibas = response.data[i].ir_pieejas_tiesibas;
          }
        }
      });
    }
  }

  init();
}]);
/**
 * @name supervisory_board
 * @description Saraksts "Projektu uzraudzības komisijas"
 * @param  {string} url /data/uzraudzibas_komisija_list
 *
 * @returns {html} datu tabula
 */
'use strict';

angular.module('myApp').controller('SupervisoryBoardController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var sb = this; // function initialization

  sb.openSupervisoryBoard = openSupervisoryBoard;
  sb.openHomepage = openHomepage;
  sb.deleteSupervisoryBoard = deleteSupervisoryBoard;

  function openSupervisoryBoard(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.supervisory_board.edit', {
        id: row.id
      });
    } else {
      $state.go('app.supervisory_board.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteSupervisoryBoard(deleteObj) {
    var idArr = [];

    if (deleteObj === parseInt(deleteObj, 10)) {
      idArr.push(deleteObj.toString());
    } else {
      for (var key in deleteObj) {
        idArr.push(key);
      }
    }

    idArr.join(',');
    return Restangular.one("data").one("uzraudzibas_komisija_editable", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsta projektu uzraudzības komisija!', null, 'Projektu uzraudzības komisijas'));
      return true;
    }, $scope.handleError);
  }

  sb.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Komisijas nosaukums", null, 'Projektu uzraudzības komisijas'),
      key: "nosaukums",
      sortable: "true"
    }],
    click_function: sb.openSupervisoryBoard,
    create_function: sb.openSupervisoryBoard,
    gridCheckbox: true,
    "delete": true,
    bulkDelete: true,
    delete_function: sb.deleteSupervisoryBoard,
    filters: false,
    catalog_name: gettextCatalog.getString('Projektu uzraudzības komisijas', null, 'Projektu uzraudzības komisijas'),
    link_function: sb.openHomepage,
    "export": false
  };
}]);
/**
 * @name system_config_form
 * @description "Sistēmas konfigurācija" forma
 * @param  {string} url /data/sistemas_konfiguracija_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('SystemConfigFormController', ['ngDialog', 'Select2Data', 'Upload', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', '$interval', '$http', function (ngDialog, Select2Data, Upload, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window, $interval, $http) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Sistēmas konfigurācija'),
    active: true
  }];
  cnrl.report = {};
  cnrl.reportStatuses = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportOrigin = null; // functions

  cnrl.loadData = loadData;
  cnrl.saveSystemConfigData = saveSystemConfigData;
  cnrl.setEditMode = setEditMode;
  cnrl.resetData = resetData;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';
  cnrl.uploadFile = uploadFile;
  cnrl.progress = 100;
  cnrl.isGetVissDataRunning = false;
  cnrl.vissDataStats = 'Gaida izpildi';
  cnrl.isGetVissEduDataRunning = false;
  cnrl.vissEduDataStats = 'Gaida izpildi';
  cnrl.isCleanPersonDataRunning = false;
  cnrl.cleanPersonDataStats = 'Gaida izpildi';
  cnrl.isGetScopusDataRunning = false;
  cnrl.scopusDataStats = 'Gaida izpildi';
  cnrl.isGetWosDataRunning = false;
  cnrl.wosDataStats = 'Gaida izpildi';
  cnrl.vissDialog = vissDialog;
  cnrl.vissEduDialog = vissEduDialog;
  cnrl.cleanPersonDataDialog = cleanPersonDataDialog;
  cnrl.scopusDialog = scopusDialog;
  cnrl.wosDialog = wosDialog;
  cnrl.getVissData = getVissData;
  cnrl.getVissDataStats = getVissDataStats;
  cnrl.getVissEduData = getVissEduData;
  cnrl.getVissEduDataStats = getVissEduDataStats;
  cnrl.cleanPersonData = cleanPersonData;
  cnrl.getCleanPersonDataStats = getCleanPersonDataStats;
  cnrl.getScopusData = getScopusData;
  cnrl.getScopusDataStats = getScopusDataStats;
  cnrl.getWosData = getWosData;
  cnrl.getWosDataStats = getWosDataStats;
  cnrl.getExecStats = getExecStats;
  cnrl.isProcRunning = isProcRunning;
  cnrl.manualExec = manualExec;
  cnrl.editExecConfig = editExecConfig;
  cnrl.updateExecConfig = updateExecConfig;

  function editExecConfig(d) {
    d.ir_automatiska_izpilde_tmp = d.ir_automatiska_izpilde;
    d.konfiguracija_tmp = d.konfiguracija;
    d.tips_tmp = d.tips;
    d.ned_diena_tmp = d.ned_diena;
    d.men_diena_tmp = d.men_diena;
    d.stunda_tmp = d.stunda;
    d.minute_tmp = d.minute;
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/execConfigDialog.html',
      scope: $scope,
      data: d
    });
  }

  function updateExecConfig(d) {
    d.ir_automatiska_izpilde = d.ir_automatiska_izpilde_tmp;
    d.konfiguracija = d.konfiguracija_tmp;
    d.tips = d.tips_tmp;
    d.ned_diena = d.ned_diena_tmp;
    d.men_diena = d.men_diena_tmp;
    d.stunda = d.stunda_tmp;
    d.minute = d.minute_tmp;

    if (d.tips == 'PH') {
      d.konfiguracija = '0 ' + d.minute + ' * ? * *';
    } else if (d.tips == 'PD') {
      d.konfiguracija = '0 ' + d.minute + ' ' + d.stunda + ' ? * *';
    } else if (d.tips == 'PW') {
      d.konfiguracija = '0 ' + d.minute + ' ' + d.stunda + ' ? * ' + d.ned_diena;
    } else if (d.tips == 'PM') {
      d.konfiguracija = '0 ' + d.minute + ' ' + d.stunda + ' ' + d.men_diena + ' * ?';
    }
  }

  function getExecStats(code) {
    if (code == "VIIS_DATA_IMPORT") {
      return cnrl.vissDataStats;
    } else if (code == "VIIS_EDU_DATA_IMPORT") {
      return cnrl.vissEduDataStats;
    } else if (code == "PERSON_DATA_CLEANUP") {
      return cnrl.cleanPersonDataStats;
    } else if (code == "SCOPUS_DATA_IMPORT") {
      return cnrl.scopusDataStats;
    } else if (code == "WOS_DATA_IMPORT") {
      return cnrl.wosDataStats;
    }
  }

  function isProcRunning(code) {
    if (code == "VIIS_DATA_IMPORT") {
      return cnrl.isGetVissDataRunning;
    } else if (code == "VIIS_EDU_DATA_IMPORT") {
      return cnrl.isGetVissEduDataRunning;
    } else if (code == "PERSON_DATA_CLEANUP") {
      return cnrl.isCleanPersonDataRunning;
    } else if (code == "SCOPUS_DATA_IMPORT") {
      return cnrl.isGetScopusDataRunning;
    } else if (code == "WOS_DATA_IMPORT") {
      return cnrl.isGetWosDataRunning;
    }
  }

  function manualExec(code) {
    if (code == "VIIS_DATA_IMPORT") {
      cnrl.vissDialog();
    } else if (code == "VIIS_EDU_DATA_IMPORT") {
      cnrl.vissEduDialog();
    } else if (code == "PERSON_DATA_CLEANUP") {
      cnrl.cleanPersonDataDialog();
    } else if (code == "SCOPUS_DATA_IMPORT") {
      cnrl.scopusDialog();
    } else if (code == "WOS_DATA_IMPORT") {
      cnrl.wosDialog();
    }
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    loadData();
    cnrl.scientificInstitutions = new Select2Data('choices', 'scientific_institutions_ctx_scopus');
    cnrl.scientificInstitutions2 = new Select2Data('choices', 'scientific_institutions_ctx_wos');
    var maxYear = new Date().getFullYear() + 1;
    cnrl.scopusYears = [];

    for (var j = 2010; maxYear >= j; j++) {
      cnrl.scopusYears.push({
        id: j,
        title: j.toString()
      });
    }

    cnrl.minutesList = [];

    for (var j = 0; 59 >= j; j++) {
      cnrl.minutesList.push({
        id: j.toString(),
        title: j.toString()
      });
    }

    cnrl.hoursList = [];

    for (var j = 0; 23 >= j; j++) {
      cnrl.hoursList.push({
        id: j.toString(),
        title: j.toString()
      });
    }

    cnrl.dayOfWeekList = [];
    cnrl.dayOfWeekList.push({
      id: 'MON',
      title: 'Pirmdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'TUE',
      title: 'Otrdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'WED',
      title: 'Trešdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'THU',
      title: 'Ceturtdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'FRI',
      title: 'Piektdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'SAT',
      title: 'Sestdiena'
    });
    cnrl.dayOfWeekList.push({
      id: 'SUN',
      title: 'Svētdiena'
    });
    cnrl.dayOfMonthList = [];

    for (var j = 1; 31 >= j; j++) {
      cnrl.dayOfMonthList.push({
        id: j.toString(),
        title: j.toString()
      });
    }

    getVissDataStats();
    cnrl.vissDataStatsUpdater = $interval(cnrl.getVissDataStats, 5000);
    getVissEduDataStats();
    cnrl.vissEduDataStatsUpdater = $interval(cnrl.getVissEduDataStats, 5000);
    getCleanPersonDataStats();
    cnrl.cleanPersonDataStatsUpdater = $interval(cnrl.getCleanPersonDataStats, 5000);
    getScopusDataStats();
    cnrl.scopusDataStatsUpdater = $interval(cnrl.getScopusDataStats, 5000);
    getWosDataStats();
    cnrl.wosDataStatsUpdater = $interval(cnrl.getWosDataStats, 5000);
    $scope.$on('$destroy', function () {
      if (angular.isDefined(cnrl.vissDataStatsUpdater)) {
        $interval.cancel(cnrl.vissDataStatsUpdater);
      }

      if (angular.isDefined(cnrl.vissEduDataStatsUpdater)) {
        $interval.cancel(cnrl.vissEduDataStatsUpdater);
      }

      if (angular.isDefined(cnrl.cleanPersonDataStatsUpdater)) {
        $interval.cancel(cnrl.cleanPersonDataStatsUpdater);
      }

      if (angular.isDefined(cnrl.scopusDataStatsUpdater)) {
        $interval.cancel(cnrl.scopusDataStatsUpdater);
      }

      if (angular.isDefined(cnrl.wosDataStatsUpdater)) {
        $interval.cancel(cnrl.wosDataStatsUpdater);
      }
    });
  }

  function processData(data) {
    cnrl.systemConfigData = null;

    if (data.length && data.length > 0) {
      cnrl.systemConfigData = data[0];
    }

    $timeout(function () {
      cnrl.systemConfigDataOrigin = angular.copy(cnrl.systemConfigData);
    });
  }

  function loadData() {
    cnrl.title = gettextCatalog.getString('Sistēmas konfigurācija', null, 'Sistēmas konfigurācija');
    dataOp.listDefault('sistemas_konfiguracija_editable').then(function (data) {
      cnrl.processData(data);
    });
  }

  function saveSystemConfigData(lock) {
    if (!lock) {
      dataOp.saveDefault(cnrl.systemConfigData, 'sistemas_konfiguracija_editable').then(function (data) {
        $rootScope.allowPrint = true;
        Notification.success(gettextCatalog.getString('Veiksmīgi labota sistēmas konfigurācija!', null, 'Sistēmas konfigurācija'));
        loadData();
      }, $scope.handleErrorNew);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetData() {
    $scope.allowEdit = true;
    cnrl.systemConfigData = angular.copy(cnrl.systemConfigDataOrigin);
  }

  function uploadFile(file, tData) {
    cnrl.progress = 0;
    Upload.upload({
      url: '/upload',
      data: {
        file: file
      }
    }).then(function (response) {
      tData.fails_id = response.data.id;
      tData.content_type = response.data.content_type;
      tData.filename = response.data.filename;
      tData.sha256 = response.data.sha_256;
      cnrl.progress = 100;
    });
  }

  function vissDialog() {
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/vissDialog.html',
      className: 'ngdialog-theme-default dialog400',
      scope: $scope
    });
  }

  function vissEduDialog() {
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/vissEduDialog.html',
      className: 'ngdialog-theme-default dialog400',
      scope: $scope
    });
  }

  function cleanPersonDataDialog() {
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/cleanPersonDataDialog.html',
      className: 'ngdialog-theme-default dialog400',
      scope: $scope
    });
  }

  function scopusDialog() {
    var data = {};
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/scopusDialog.html',
      scope: $scope,
      data: data
    });
  }

  function wosDialog() {
    var data = {};
    ngDialog.openConfirm({
      template: 'components/system_config/tabs/wosDialog.html',
      scope: $scope,
      data: data
    });
  }

  function getVissData() {
    cnrl.isGetVissDataRunning = true;
    cnrl.vissDataStats = 'Uzsākta izpilde';
    Notification.success("Sākta VIIS datu pārnešana uz sistēmu");
    var req = {
      method: 'GET',
      url: '/data/viis_dv',
      timeout: 10000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function () {
      Notification.success("VIIS dati veiksmīgi pārnesti uz sistēmu");
    }, function (err) {
      //console.log("Err response:");
      //console.log(err);
      if (err.status != -1) {
        if (typeof err.data === 'string') {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
        } else {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda!'));
        }
      }
    });
    ngDialog.closeAll();
  }

  function getVissDataStats() {
    var req = {
      method: 'GET',
      url: '/data/stats_viis_dv',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (resp) {
      cnrl.isGetVissDataRunning = resp.data.isRunning;

      if (!resp.data.isRunning) {
        cnrl.vissDataStats = 'Gaida izpildi.';

        if (resp.data.execTime) {
          cnrl.vissDataStats = cnrl.vissDataStats + ' Iepriekšējais izpildes cikls: uzsākts ' + resp.data.execTime;

          if (resp.data.isErr) {
            cnrl.vissDataStats = cnrl.vissDataStats + ', beidzās ar kļūdu - ' + resp.data.errMsg;
          } else {
            cnrl.vissDataStats = cnrl.vissDataStats + ', apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount;
          }
        }
      } else {
        cnrl.vissDataStats = 'Notiek izpilde. Apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount;
      }
    });
  }

  function getVissEduData() {
    cnrl.isGetVissEduDataRunning = true;
    cnrl.vissEduDataStats = 'Uzsākta izpilde';
    Notification.success("Sākta VIIS datu pārnešana uz sistēmu");
    var req = {
      method: 'GET',
      url: '/data/viis_izgl',
      timeout: 10000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function () {
      Notification.success("VIIS dati veiksmīgi pārnesti uz sistēmu");
    }, function (err) {
      //console.log("Err response:");
      //console.log(err);
      if (err.status != -1) {
        if (typeof err.data === 'string') {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
        } else {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda!'));
        }
      }
    });
    ngDialog.closeAll();
  }

  function getVissEduDataStats() {
    var req = {
      method: 'GET',
      url: '/data/stats_viis_izgl',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (resp) {
      cnrl.isGetVissEduDataRunning = resp.data.isRunning;

      if (!resp.data.isRunning) {
        cnrl.vissEduDataStats = 'Gaida izpildi.';

        if (resp.data.execTime) {
          cnrl.vissEduDataStats = cnrl.vissEduDataStats + ' Iepriekšējais izpildes cikls: uzsākts ' + resp.data.execTime;

          if (resp.data.isErr) {
            cnrl.vissEduDataStats = cnrl.vissEduDataStats + ', beidzās ar kļūdu - ' + resp.data.errMsg;
          } else {
            cnrl.vissEduDataStats = cnrl.vissEduDataStats + ', apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount;
          }
        }
      } else {
        cnrl.vissEduDataStats = 'Notiek izpilde. Apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount;
      }
    });
  }

  function cleanPersonData() {
    cnrl.isCleanPersonDataRunning = true;
    cnrl.cleanPersonDataStats = 'Uzsākta izpilde';
    Notification.success("Sākta personu datubāzes tīrīšana");
    var req = {
      method: 'GET',
      url: '/data/tirit_pers_db',
      timeout: 10000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function () {
      Notification.success("Personu datubāze veiksmīgi attīrīta no liekajiem ierakstiem");
    }, function (err) {
      //console.log("Err response:");
      //console.log(err);
      if (err.status != -1) {
        if (typeof err.data === 'string') {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
        } else {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda!'));
        }
      }
    });
    ngDialog.closeAll();
  }

  function getCleanPersonDataStats() {
    var req = {
      method: 'GET',
      url: '/data/stats_tirit_pers_db',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (resp) {
      cnrl.isCleanPersonDataRunning = resp.data.isRunning;

      if (!resp.data.isRunning) {
        cnrl.cleanPersonDataStats = 'Gaida izpildi.';

        if (resp.data.execTime) {
          cnrl.cleanPersonDataStats = cnrl.cleanPersonDataStats + ' Iepriekšējais izpildes cikls: uzsākts ' + resp.data.execTime;

          if (resp.data.isErr) {
            cnrl.cleanPersonDataStats = cnrl.cleanPersonDataStats + ', beidzās ar kļūdu - ' + resp.data.errMsg;
          } else {
            cnrl.cleanPersonDataStats = cnrl.cleanPersonDataStats + ', apstrādāti ' + resp.data.recCount + ' ieraksti, dzēsti - ' + resp.data.delCount;
          }
        }
      } else {
        cnrl.cleanPersonDataStats = 'Notiek izpilde. Apstrādāti ' + resp.data.recCount + ' ieraksti: dzēšanai atzīmēti - ' + resp.data.delCount + ', notiek dzēšana';
      }
    });
  }

  function getScopusData(data) {
    cnrl.isGetScopusDataRunning = true;
    cnrl.scopusDataStats = 'Uzsākta izpilde';
    Notification.success("Sākta Scopus datu pārnešana uz sistēmu");

    if (data.institucija_select_obj) {
      data.institucija_id = data.institucija_select_obj.id;
    }

    dataOp.getScopusData(null, null, null, data.institucija_id, data.year).then(function () {
      Notification.success(gettextCatalog.getString('Scopus dati veiksmīgi pārnesti uz sistēmu'));
    }, function (err) {
      //console.log("Err response:");
      //console.log(err);
      if (err.status != -1) {
        if (typeof err.data === 'string') {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
        } else {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda!'));
        }
      }
    });
    ngDialog.closeAll();
  }

  function getScopusDataStats() {
    var req = {
      method: 'GET',
      url: '/data/stats_scopus_sci_res',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (resp) {
      cnrl.isGetScopusDataRunning = resp.data.isRunning;

      if (!resp.data.isRunning) {
        cnrl.scopusDataStats = 'Gaida izpildi.';

        if (resp.data.execTime) {
          cnrl.scopusDataStats = cnrl.scopusDataStats + ' Iepriekšējais izpildes cikls: uzsākts ' + resp.data.execTime;

          if (resp.data.isErr) {
            cnrl.scopusDataStats = cnrl.scopusDataStats + ', beidzās ar kļūdu - ' + resp.data.errMsg;
          } else {
            cnrl.scopusDataStats = cnrl.scopusDataStats + ', apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount + ', atstāti bez apstrādes - ' + resp.data.ignCount;
          }
        }
      } else {
        cnrl.scopusDataStats = 'Notiek izpilde. Apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount + ', atstāti bez apstrādes - ' + resp.data.ignCount;
      }
    });
  }

  function getWosData(data) {
    cnrl.isGetWosDataRunning = true;
    cnrl.wosDataStats = 'Uzsākta izpilde';
    Notification.success("Sākta WoS datu pārnešana uz sistēmu");

    if (data.institucija_select_obj) {
      data.institucija_id = data.institucija_select_obj.id;
    }

    dataOp.getWosData(null, null, null, data.institucija_id, data.year).then(function () {
      Notification.success(gettextCatalog.getString('WoS dati veiksmīgi pārnesti uz sistēmu'));
    }, function (err) {
      //console.log("Err response:");
      //console.log(err);
      if (err.status != -1) {
        if (typeof err.data === 'string') {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda:') + ' ' + err.data);
        } else {
          $scope.showErrorMsg(gettextCatalog.getString('Sistēmas kļūda!'));
        }
      }
    });
    ngDialog.closeAll();
  }

  function getWosDataStats() {
    var req = {
      method: 'GET',
      url: '/data/stats_wos_sci_res',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (resp) {
      cnrl.isGetWosDataRunning = resp.data.isRunning;

      if (!resp.data.isRunning) {
        cnrl.wosDataStats = 'Gaida izpildi.';

        if (resp.data.execTime) {
          cnrl.wosDataStats = cnrl.wosDataStats + ' Iepriekšējais izpildes cikls: uzsākts ' + resp.data.execTime;

          if (resp.data.isErr) {
            cnrl.wosDataStats = cnrl.wosDataStats + ', beidzās ar kļūdu - ' + resp.data.errMsg;
          } else {
            cnrl.wosDataStats = cnrl.wosDataStats + ', apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount + ', atstāti bez apstrādes - ' + resp.data.ignCount;
          }
        }
      } else {
        cnrl.wosDataStats = 'Notiek izpilde. Apstrādāti ' + resp.data.recCount + ' ieraksti: atjaunināti - ' + resp.data.updCount + ', izveidoti - ' + resp.data.insCount + ', atstāti bez apstrādes - ' + resp.data.ignCount;
      }
    });
  }

  init();
}]);
/**
 * @name translations_form
 * @description "Tulkojumi" forma
 * @param  {string} url /data/institucijas_gada_parskats_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('TranslationsFormController', ['ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var cnrl = this;
  cnrl.tabs = [{
    id: 'lvDataTab',
    head: gettextCatalog.getString('Latviešu valoda', null, 'Tulkojumi'),
    active: true
  }, {
    id: 'enDataTab',
    head: gettextCatalog.getString('Angļu valoda', null, 'Tulkojumi'),
    active: false
  }];
  cnrl.report = {};
  cnrl.reportStatuses = null;
  $scope.allowEdit = true;
  cnrl.selectedCount = null;
  cnrl.reportOrigin = null; // functions

  cnrl.loadData = loadData;
  cnrl.saveLangData = saveLangData;
  cnrl.setEditMode = setEditMode;
  cnrl.resetData = resetData;
  cnrl.processData = processData;
  cnrl.updatePrintTabTitle = updatePrintTabTitle;
  cnrl.openHomepage = openHomepage;
  cnrl.dateFormat = 'dd.MM.yyyy';

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; cnrl.tabs.length > i; i++) {
        if (cnrl.tabs[i].active) {
          cnrl.currentTitle = cnrl.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    dataOp.getTranslationsOrigByLanguage('lv').then(function (data) {
      cnrl.lvDataJson = data.lv;
      dataOp.getTranslationsOrigByLanguage('en').then(function (data) {
        cnrl.enDataJson = data.en;
        loadData();
      });
    });
  }

  function processData(data) {
    cnrl.lvData = [];
    var lvLangData = null;
    angular.forEach(data, function (ld) {
      if (ld.kods === 'lv') {
        lvLangData = ld;
      }
    });
    processLangData(cnrl.lvDataJson, cnrl.lvData, lvLangData);
    cnrl.enData = [];
    var enLangData = null;
    angular.forEach(data, function (ld) {
      if (ld.kods === 'en') {
        enLangData = ld;
      }
    });
    processLangData(cnrl.enDataJson, cnrl.enData, enLangData);
    cnrl.langData = data; //console.log(cnrl.lvData);
    //console.log(cnrl.enData);
    //console.log(cnrl.langData);

    $timeout(function () {
      cnrl.lvDataOrigin = angular.copy(cnrl.lvData);
      cnrl.enDataOrigin = angular.copy(cnrl.enData);
    });
  }

  function processLangData(origData, mergedData, langData) {
    for (var key in origData) {
      if (Object.prototype.toString.call(origData[key]) == '[object Object]') {
        for (var ctxKey in origData[key]) {
          var val = origData[key][ctxKey];
          angular.forEach(langData.tulkojumi, function (tr) {
            if (tr.tips === 'obj' && tr.konteksts === ctxKey && tr.teksts === key) {
              val = tr.tulkojums;
            }
          });
          mergedData.push({
            'tips': 'obj',
            'teksts': key,
            'indekss': null,
            'konteksts': ctxKey,
            'tulkojums_orig': origData[key][ctxKey],
            'tulkojums': val
          });
        }
      } else if (Object.prototype.toString.call(origData[key]) == '[object Array]' || typeof origData[key] == 'Array') {
        for (var i = 0; origData[key].length > i; i++) {
          var val = origData[key][i];
          angular.forEach(langData.tulkojumi, function (tr) {
            if (tr.tips === 'arr' && tr.indekss == i && tr.teksts === key) {
              val = tr.tulkojums;
            }
          });
          mergedData.push({
            'tips': 'arr',
            'teksts': key,
            'indekss': i,
            'konteksts': null,
            'tulkojums_orig': origData[key][i],
            'tulkojums': val
          });
        }
      } else {
        var val = origData[key];
        angular.forEach(langData.tulkojumi, function (tr) {
          if (tr.tips === 'str' && tr.teksts === key) {
            val = tr.tulkojums;
          }
        });
        mergedData.push({
          'tips': 'str',
          'teksts': key,
          'indekss': null,
          'konteksts': null,
          'tulkojums_orig': origData[key],
          'tulkojums': val
        });
      }
    }
  }

  function loadData() {
    cnrl.title = gettextCatalog.getString('Tulkojumi', null, 'Tulkojumi');
    dataOp.listDefault('valoda_editable').then(function (data) {
      cnrl.processData(data);
    });
  }

  function saveLangData(lock) {
    if (!lock) {
      angular.forEach(cnrl.langData, function (ld) {
        if (ld.kods === 'lv') {
          ld.tulkojumi = [];

          for (var i = 0; cnrl.lvData.length > i; i++) {
            if (cnrl.lvData[i].tulkojums != cnrl.lvData[i].tulkojums_orig) {
              ld.tulkojumi.push(angular.copy(cnrl.lvData[i]));
            }
          }
        } else if (ld.kods === 'en') {
          ld.tulkojumi = [];

          for (var i = 0; cnrl.enData.length > i; i++) {
            if (cnrl.enData[i].tulkojums != cnrl.enData[i].tulkojums_orig) {
              ld.tulkojumi.push(angular.copy(cnrl.enData[i]));
            }
          }
        }
      });
      dataOp.saveListDefault(cnrl.langData, 'valoda_editable').then(function (data) {
        $rootScope.allowPrint = true;
        Notification.success(gettextCatalog.getString('Tulkojumu dati veiksmīgi saglabāti!', null, 'Tulkojumi'));
        $window.location.reload();
      }, $scope.handleError);
    }
  }

  function setEditMode() {
    $scope.allowEdit = false;
  }

  function resetData() {
    $scope.allowEdit = true;
    cnrl.lvData = angular.copy(cnrl.lvDataOrigin);
    cnrl.enData = angular.copy(cnrl.enDataOrigin);
  }

  init();
}]);
/**
 * @name user_material_form
 * @description "Lietotāja materiāli" forma
 * @param  {string} url /data/lietotaja_materiali/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UserMaterialFormController', ['UploadService', 'ngDialog', '$timeout', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$rootScope', '$q', '$window', function (UploadService, ngDialog, $timeout, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $rootScope, $q, $window) {
  var umf = this;
  umf.tabs = [{
    id: 'mainDataTab',
    head: gettextCatalog.getString('Pamatdati', null, 'Lietotāja materiāli'),
    active: true
  }];
  umf.userMaterial = {
    pielikuma_faili: []
  };
  umf.allowEdit = true;
  umf.userMaterialOrigin = null; // functions

  umf.loadData = loadData;
  umf.saveUserMaterials = saveUserMaterials;
  umf.UploadService = UploadService;
  umf.resetUserMaterials = resetUserMaterials;
  umf.processData = processData;
  umf.updatePrintTabTitle = updatePrintTabTitle;
  umf.openHomepage = openHomepage;

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; umf.tabs.length > i; i++) {
        if (umf.tabs[i].active) {
          umf.currentTitle = umf.tabs[i].head;
          break;
        }
      }
    });
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function init() {
    loadData();
  }

  function processData(data) {
    umf.userMaterial = data;
    $timeout(function () {
      umf.userMaterialOrigin = angular.copy(umf.userMaterial);
    });
  }

  function loadData() {
    if ($stateParams.id) {
      umf.title = gettextCatalog.getString('Lietotāja materiāli', null, 'Lietotāja materiāli');
      dataOp.getDefaultById($stateParams.id, 'lietotaja_materiali').then(function (data) {
        umf.processData(data);
      });
    } else {
      umf.title = gettextCatalog.getString('Pievienot lietotāja materiālus', null, 'Lietotāja materiāli');
      umf.allowEdit = false;
      $timeout(function () {
        umf.userMaterialOrigin = angular.copy(umf.userMaterial);
      });
    }
  }

  function saveUserMaterials(lock) {
    if (!lock) {
      umf.userMaterial.is_lietotaja_materiali = true;
      dataOp.saveDefault(umf.userMaterial, 'lietotaja_materiali').then(function (data) {
        $rootScope.allowPrint = true;

        if (umf.userMaterial.id) {
          Notification.success(gettextCatalog.getString('Veiksmīgi laboti lietotāja materiāli!', null, 'Lietotāja materiāli'));
          umf.processData(data.data);
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienoti lietotāja materiāli!', null, 'Lietotāja materiāli'));
          $state.go('app.user_material.edit', {
            id: data.data.id
          });
        }
      }, $scope.handleError);
    }
  }

  function resetUserMaterials() {
    umf.allowEdit = true;
    umf.userMaterial = angular.copy(umf.userMaterialOrigin);
  }

  init();
}]);
/**
 * @name user_material
 * @description Saraksts "Lietotāja materiāli"
 * @param  {string} url /data/lietotaja_materiali
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('UserMaterialController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', 'Restangular', 'Notification', '$rootScope', '$window', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, Restangular, Notification, $rootScope, $window) {
  var um = this; // function initialization

  um.openUserMaterial = openUserMaterial;
  um.deleteUserMaterial = deleteUserMaterial;
  um.openHomepage = openHomepage;

  function openUserMaterial(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.user_material.edit', {
        id: row.id
      });
    } else {
      $state.go('app.user_material.new');
    }
  }

  function openHomepage(item) {
    $window.open(/^(http|https):/.test(item) ? item : 'http://' + item, '_blank');
  }

  function deleteUserMaterial(deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("lietotaja_materiali", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsti lietotāja materiāli!', null, 'Lietotāja materiāli'));
      return true;
    }, $scope.handleError);
  }

  um.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Lietotāja materiālu nosaukums", null, 'Lietotāja materiāli'),
      key: "title",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Saite", null, 'Lietotāja materiāli'),
      key: "saite",
      sortable: "true",
      link: true
    }],
    click_function: um.openUserMaterial,
    create_function: um.openUserMaterial,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: um.deleteUserMaterial,
    filters: false,
    catalog_name: gettextCatalog.getString('Sistēmas lietotāja materiāli', null, 'Lietotāja materiāli'),
    link_function: um.openHomepage,
    "export": false
  };
}]);
angular.module('myApp').controller('PasswordController', ['$scope', 'Notification', '$stateParams', 'dataService', 'gettextCatalog', '$controller', '$filter', '$element', 'ngDialog', '$state', '$timeout', '$rootScope', 'authService', 'Password', function ($scope, Notification, $stateParams, dataOp, gettextCatalog, $controller, $filter, $element, ngDialog, $state, $timeout, $rootScope, authOp, Password) {
  var pc = this;
  pc.generatePassword = generatePassword;
  pc.savePassword = savePassword;
  pc.passwordInputType = 'text';

  function generatePassword() {
    pc.repeated_password = null;
    pc.new_password = Password.generatePassword();
  }

  function savePassword(tplType) {
    var saveObj = {};

    switch (tplType) {
      case "admin":
        saveObj = {
          new_password: pc.new_password,
          paroles_maina: pc.paroles_maina,
          epasts: $scope.ngDialogData.epasts,
          usr: $scope.ngDialogData.usr
        };
        break;

      default:
        saveObj = {
          password: pc.password,
          new_password: pc.new_password
        };
        break;
    }

    if (pc.userId) {
      saveObj.id = pc.userId;
    }

    if (tplType == "admin" && pc.userId || pc.userId) {
      dataOp.saveUserPassword(saveObj).then(function (response) {
        if (response.status == 200) {
          Notification.success(gettextCatalog.getString('Parole veiksmīgi mainīta!'));
          $scope.closeThisDialog();
        } else {
          Notification.error(gettextCatalog.getString(response.data));
          authOp.clearCredentials();
          $scope.closeThisDialog();
        }
      });
    } else {
      $scope.$emit('newUserPassword', saveObj);
      $scope.closeThisDialog();
    }
  }
}]);
/**
 * @name user_profile_form
 * @description Forma "Lietotāja profils"
 * @param  {string} url /data/lietotajs/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UsersProfileController', ['$scope', 'Notification', '$stateParams', 'dataService', 'gettextCatalog', '$controller', '$filter', '$element', 'ngDialog', '$state', '$timeout', '$rootScope', 'authService', function ($scope, Notification, $stateParams, dataOp, gettextCatalog, $controller, $filter, $element, ngDialog, $state, $timeout, $rootScope, authOp) {
  var umc = this;
  umc.ufc = $controller('UsersFormController', {
    ngDialog: ngDialog,
    $scope: $scope,
    $state: $state,
    $stateParams: $stateParams,
    dataOp: dataOp,
    gettextCatalog: gettextCatalog,
    Notification: Notification,
    $filter: $filter,
    $timeout: $timeout,
    $rootScope: $rootScope
  });
  umc.ufc.readOnly = true;
  umc.hideBackBtn = true;
  umc.mainTpl = 'components/users/tabs/tab-profile-maindata.html';
  umc.ufc.formatDate = $rootScope.formatDate;

  function init() {
    dataOp.getUserById($rootScope.currentUser.id).then(function (data) {
      umc.user = data;
      umc.user.tpl = 'components/users/tpls/user_pass_save.html';
      umc.ufc.loadData(umc.user);
    });
  }

  init();
}]);
/**
 * @name users_form
 * @description Forma "Lietotāji"
 * @param  {string} url /data/lietotajs_editable/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UsersFormController', ['ngDialog', 'Select2Data', 'SearchNewUser', '$scope', '$state', '$stateParams', 'dataService', 'gettextCatalog', 'Notification', '$filter', '$timeout', '$rootScope', 'SearchPerson', '$http', '$cookies', function (ngDialog, Select2Data, SearchNewUser, $scope, $state, $stateParams, dataOp, gettextCatalog, Notification, $filter, $timeout, $rootScope, SearchPerson, $http, $cookies) {
  var ufc = this;
  ufc.user = {};
  ufc.is_admin = false;
  ufc.userOrigin = null;
  ufc.allowEdit = true;
  ufc.readOnly = false;
  ufc.show_ir_aktivs = false;
  ufc.show_paroles_maina = false;
  ufc.loadOnBlur = false;
  ufc.lockAfterFindingUser = false;
  ufc.lockRoles = false;
  ufc.roleList = [];
  ufc.state = $state;
  ufc.resetUserForm = resetUserForm;
  ufc.updatePrintTabTitle = updatePrintTabTitle;
  ufc.currentTitle = null;
  ufc.dateFormat = 'dd.MM.yyyy';
  ufc.showPassword = false;
  ufc.changePassword = changePassword;
  ufc.loadUserData = loadUserData;
  ufc.discardUserData = discardUserData;
  ufc.searchPersonByPersonalCode = searchPersonByPersonalCode;
  ufc.showEmail = showEmail;
  ufc.isLockable = isLockable;
  ufc.addRole = addRole;
  ufc.canDeleteRole = canDeleteRole;
  ufc.searchByParam = searchByParam;
  ufc.showPersonData = showPersonData;
  ufc.scrollToPage = scrollToPage; // tabs

  ufc.tabs = [{
    id: 'mainDataTab',
    head: 'Pamatdati',
    active: true
  }, {
    id: 'emailTab',
    head: 'Nosūtītie epasti',
    active: false
  }]; // functions

  ufc.loadData = loadData;
  ufc.saveUser = saveUser;
  ufc.editUser = editUser;
  ufc.dateFormat = 'dd.MM.yyyy';

  function scrollToPage(user) {
    if (user.epasti_current_page > user.epasti_max_page) {
      user.epasti_current_page = user.epasti_max_page;
    }

    var req = {
      method: 'GET',
      params: {
        adm_lietotajs_id: user.id,
        limit: user.epasti_per_page,
        offset: (user.epasti_current_page - 1) * user.epasti_per_page
      },
      url: '/data/lietotaja_nosutitie_epasti_list',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(req).then(function (response) {
      user.epasti_data_page = response.data;
    });
  }

  function showPersonData(pId) {
    $state.go('app.personal.edit', {
      id: pId
    });
  }

  function updatePrintTabTitle() {
    $timeout(function () {
      for (var i = 0; ufc.tabs.length > i; i++) {
        if (ufc.tabs[i].active) {
          ufc.currentTitle = ufc.tabs[i].head;
          break;
        }
      }
    });
  }

  function isLockable(instId, isInstitution) {
    var context = dataOp.getContext();
    return context != -1 && (isInstitution || context.id != instId);
  }

  function canDeleteRole() {
    return ufc.user.can_delete != false || ufc.user.lomas && ufc.user.lomas.length > 1;
  }

  function addRole() {
    var context = dataOp.getContext();

    if (context != -1) {
      var role = {
        sci_institution_select_obj: context
      };
      ufc.user.lomas.push(role);
    } else {
      ufc.user.lomas.push({});
    }
  }

  function showEmail(id) {
    dataOp.getDefaultById(id, 'zi_email').then(function (data) {
      ngDialog.open({
        template: 'components/users/tabs/dialog-email.html',
        className: 'ngdialog-theme-default dialog400',
        data: data,
        scope: $scope
      });
    });
  }

  function setLockAfterFindingUser() {
    var context = dataOp.getContext();

    var everyRoleInContext = _.every(ufc.user.lomas, function (r) {
      return r.zin_institucija_id;
    });

    ufc.lockRoles = context && context != -1 && !everyRoleInContext;
    ufc.lockAfterFindingUser = context && context != -1 && (!everyRoleInContext || !_.find(ufc.user.lomas, function (r) {
      return r.zin_institucija_id == context.id;
    }));
  }

  $scope.filterAnonymous = function (element) {
    return !element.ir_anonims;
  };

  function resetUserForm() {
    ufc.user = angular.copy(ufc.userOrigin);
  }

  function loadData(userData) {
    ufc.tpl = userData.tpl;
    ufc.user = userData;
    delete ufc.user.tpl;
    var countReq = {
      method: 'GET',
      params: {
        adm_lietotajs_id: userData.id
      },
      url: '/data/lietotaja_nosutitie_epasti_list?_count',
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    $http(countReq).then(function (countResponse) {
      userData.epasti_per_page = 100;
      userData.epasti_current_page = 1;
      userData.epasti_total = parseInt(countResponse.data.total_count, 10);
      userData.epasti_max_page = Math.floor(Math.max(parseInt(countResponse.data.total_count, 10) - 1, 0) / userData.epasti_per_page) + 1;
      ufc.scrollToPage(userData);
    });

    if (userData.id) {
      setLockAfterFindingUser();
    }

    if (!userData || Object.keys(userData).length <= 1) {
      ufc.allowEdit = false;
    }

    if (userData.is_admin) {
      ufc.is_admin = angular.copy(userData.is_admin);
      delete ufc.user.is_admin;
      ufc.scientificInstitutions = new Select2Data('choices', 'institutions');
      ufc.roleList = new Select2Data('choices', 'roles_choice');
    }

    if (ufc.user.lomas) {
      for (var i = 0; ufc.user.lomas.length > i; i++) {
        if (ufc.user.lomas[i].adm_loma_id) {
          ufc.user.lomas[i].role_select_obj = {
            id: ufc.user.lomas[i].adm_loma_id,
            text: ufc.user.lomas[i].adm_loma_nosaukums
          };
        }

        if (ufc.user.lomas[i].zin_institucija_id) {
          ufc.user.lomas[i].sci_institution_select_obj = {
            id: ufc.user.lomas[i].zin_institucija_id,
            text: ufc.user.lomas[i].zin_institucija_nosaukums
          };
        }

        if (ufc.user.lomas[i].datums_no) {
          ufc.user.lomas[i].datums_no = new Date(ufc.user.lomas[i].datums_no);
        }

        if (ufc.user.lomas[i].datums_lidz) {
          ufc.user.lomas[i].datums_lidz = new Date(ufc.user.lomas[i].datums_lidz);
        }
      }
    } else {
      ufc.user.lomas = [];
    }

    if (!ufc.user.ir_aktivs) {
      ufc.user.ir_aktivs = false;
    } else {
      ufc.user.ir_aktivs = true;
    }

    if (ufc.user.id) {
      ufc.title = gettextCatalog.getString('Lietotājs', null, 'Lietotāji');
    } else {
      ufc.title = gettextCatalog.getString('Pievienot lietotāju', null, 'Lietotāji');
    }

    $timeout(function () {
      ufc.userOrigin = angular.copy(ufc.user);
    });
  }

  function saveUser(lock) {
    if (lock) {
      ufc.user.is_new = !ufc.user.id;

      for (var i = 0; ufc.user.lomas.length > i; i++) {
        if (ufc.user.lomas[i].role_select_obj) {
          ufc.user.lomas[i].adm_loma_id = ufc.user.lomas[i].role_select_obj.id;
        }

        if (ufc.user.lomas[i].sci_institution_select_obj) {
          ufc.user.lomas[i].zin_institucija_id = ufc.user.lomas[i].sci_institution_select_obj.id;
        }
      }

      if (ufc.user.id && ufc.user.password === null) {
        delete ufc.user.password;
        delete ufc.user.new_password;
        delete ufc.user.repeated_password;
        delete ufc.user.repeated_password2;
      }

      if (ufc.user.epasti_data_page) {
        delete ufc.user.epasti_data_page;
      }

      dataOp.saveDefault(ufc.user, 'lietotajs_editable_admin', true).then(function (data) {
        $rootScope.allowPrint = true;
        setLockAfterFindingUser();

        for (var i = 0; ufc.user.lomas.length > i; i++) {
          if (!ufc.user.lomas[i].datums_no) {
            ufc.user.lomas[i].datums_no = Date.now();
          }
        }

        if (ufc.user.id) {
          if (ufc.user.id == $rootScope.currentUser.id) {
            $rootScope.currentUser.vards = ufc.user.vards;
            $rootScope.currentUser.uzvards = ufc.user.uzvards;

            if (ufc.user.personals_id) {
              $rootScope.currentUser.personalsId = ufc.user.personals_id;
            }
          }

          delete ufc.user.password;
          delete ufc.user.new_password;
          delete ufc.user.repeated_password;
          delete ufc.user.repeated_password2;
          ufc.allowEdit = !ufc.allowEdit;
          Notification.success(gettextCatalog.getString('Veiksmīgi labots lietotājs!', null, 'Lietotāji'));
          ufc.userOrigin = angular.copy(ufc.user);
          $state.reload();
        } else {
          Notification.success(gettextCatalog.getString('Veiksmīgi pievienots lietotājs!', null, 'Lietotāji'));
          $state.go('app.users.edit', {
            id: data.data.id
          });
        }
      }, function (data) {
        Notification.error(data.data);
        ufc.user = ufc.userOrigin;
        ufc.userOrigin = angular.copy(ufc.user);
      });
    }
  }

  $scope.$on('newUserPassword', function (event, args) {
    if (!args.new_password) {
      args.new_password = 'false';
    }

    ufc.user.new_password = args.new_password;
    ufc.user.paroles_maina = args.paroles_maina;
  });

  function changePassword(userId) {
    if (!ufc.allowEdit || ufc.readOnly) {
      ngDialog.openConfirm({
        template: ufc.tpl,
        className: 'ngdialog-theme-default dialog400',
        scope: $scope,
        controller: 'PasswordController',
        data: {
          userId: userId,
          epasts: ufc.user.epasts,
          usr: ufc.user.username
        }
      }).then(function () {});
    }
  }

  function editUser() {
    ufc.allowEdit = false;
  }

  function loadUserData(personsFound) {
    console.log({
      personsFound: personsFound
    });

    if (personsFound.id == $rootScope.currentUser.id) {
      personsFound.tpl = 'components/users/tpls/user_pass_save.html';
    } else {
      personsFound.tpl = 'components/users/tpls/admin_pass_save.html';
    }

    personsFound.vards = !personsFound.vards ? ufc.user.vards : personsFound.vards;
    personsFound.uzvards = !personsFound.uzvards ? ufc.user.uzvards : personsFound.uzvards;
    personsFound.personas_kods = !personsFound.personas_kods ? ufc.user.personas_kods : personsFound.personas_kods;
    personsFound.username = !personsFound.username ? ufc.user.username : personsFound.username;
    personsFound.epasts = !personsFound.epasts ? ufc.user.epasts : personsFound.epasts;

    if (personsFound.ir_arhivets) {
      // izņemam no arhīva
      //
      personsFound.ir_arhivets = false;
      dataOp.UnarchiveData('personals', {
        id: personsFound.personals_id
      }).then(function () {
        loadData(personsFound);
      });
    } else {
      loadData(personsFound);
    }
  }

  function discardUserData() {//delete ufc.user.personas_kods;
  }

  function searchPersonByPersonalCode(code) {
    var userIds = [];
    var showDialog = true;

    if (ufc.userOrigin.personas_kods != code) {
      SearchNewUser.search(code, userIds, ufc.loadUserData, ufc.discardUserData, showDialog);
    }
  }

  function searchByParam(key, value) {
    if (value && ufc.loadOnBlur) {
      ufc.loadOnBlur = false;
      SearchPerson.searchByParams(key, value, ufc.user.id, loadUserData, discardUserData);
    }
  }
}]);
/**
 * @name users_manage_form
 * @description Forma "Lietotāji pārvaldība"
 * @param  {string} url /data/lietotajs_editable_admin/{id}
 *
 * @returns {html} datu forma
 */
angular.module('myApp').controller('UsersManageController', ['$scope', 'Notification', '$stateParams', 'dataService', 'gettextCatalog', '$controller', '$filter', '$element', 'ngDialog', '$state', '$timeout', '$rootScope', function ($scope, Notification, $stateParams, dataOp, gettextCatalog, $controller, $filter, $element, ngDialog, $state, $timeout, $rootScope) {
  var upc = this;
  upc.ufc = $controller('UsersFormController', {
    ngDialog: ngDialog,
    $scope: $scope,
    $state: $state,
    $stateParams: $stateParams,
    dataOp: dataOp,
    gettextCatalog: gettextCatalog,
    Notification: Notification,
    $filter: $filter,
    $timeout: $timeout,
    $rootScope: $rootScope
  });
  upc.hideBackBtn = false;
  upc.mainTpl = 'components/users/tabs/tab-maindata.html';
  var tpl;

  if ($stateParams.id == $rootScope.currentUser.id) {
    tpl = 'components/users/tpls/user_pass_save.html';
  } else {
    tpl = 'components/users/tpls/admin_pass_save.html';
  }

  function init() {
    if ($stateParams.id) {
      dataOp.getUserById($stateParams.id).then(function (data) {
        upc.user = data;
        upc.user.tpl = tpl;
        upc.ufc.loadData(upc.user);
      });
    } else {
      upc.ufc.loadData({
        is_admin: true,
        ir_anonims: false,
        tpl: tpl
      });
    }
  }

  init();
}]);
/**
 * @name users
 * @description Saraksts "Lietotāji"
 * @param  {string} url /data/lietotajs_list
 *
 * @returns {html} datu tabula
 */
angular.module('myApp').controller('UsersController', ['ngDialog', '$scope', '$state', '$stateParams', 'gettextCatalog', '$http', '$cookies', 'Restangular', 'Notification', '$rootScope', '$q', 'dataService', function (ngDialog, $scope, $state, $stateParams, gettextCatalog, $http, $cookies, Restangular, Notification, $rootScope, $q, dataOp) {
  var uc = this; // if ($rootScope.currentUserRights === null || $rootScope.currentUserRights.hasOwnProperty('lietotajs_list') === false) {
  //     $state.go('app.home');
  // }
  // function initialization

  uc.openUser = openUser;
  uc.sendEmail = sendEmail;
  uc.deleteUser = deleteUser;
  uc.deleteDisable = deleteDisable;

  function openUser(row) {
    if (typeof row !== 'undefined' && typeof row.id !== 'undefined') {
      $state.go('app.users.edit', {
        id: row.id
      });
    } else {
      $state.go('app.users.new');
    }
  }

  function sendEmail(confOrCancObj, selected, total, searchParams, method) {
    var params = dataOp.prepareQueryParams(searchParams, method);
    delete params.sort;
    delete params.limit;
    delete params.offset;
    console.log(method);
    console.log(total);
    console.log(params);
    console.log(selected);
    var cnt = selected;

    if (!cnt || cnt <= 0) {
      cnt = total;
    }

    console.log(cnt);

    if (cnt > 0) {
      ngDialog.openConfirm({
        template: 'components/users/tabs/confirmOrCancelBulkEmailSendDialog.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          count: cnt
        },
        scope: $scope
      }).then(function (value) {
        var noErrors = true;
        uc.emailObj = {};
        ngDialog.openConfirm({
          template: 'components/users/tabs/dialog-bulk-email.html',
          scope: $scope,
          data: uc.emailObj
        }).then(function () {
          if (selected > 0) {
            var idArr = [];
            Object.keys(confOrCancObj).forEach(function (key, val) {
              idArr.push(key);
            });
            var ids = idArr.join(',');
            var emaiObjTmp = {
              epasta_statuss: 'TIEK_SUTITS',
              adresats: ids,
              temats: uc.emailObj.temats,
              teksts: uc.emailObj.teksts
            };
            var req = {
              method: 'POST',
              params: {},
              data: emaiObjTmp,
              url: '/data/batch_send_email/lietotajs_email',
              headers: {
                "Content-Type": 'application/json; charset=utf-8',
                'AuthToken': $cookies.get("session-id")
              }
            };
            $http(req).then(function (response) {
              Notification.success(gettextCatalog.getString('Veiksmīgi nosūtīts epasts lietotājiem!', null, 'Lietotāji'));
            }, $scope.handleError);
          } else {
            var emaiObjTmp = {
              epasta_statuss: 'TIEK_SUTITS',
              temats: uc.emailObj.temats,
              teksts: uc.emailObj.teksts
            };
            var req = {
              method: 'POST',
              params: params,
              data: emaiObjTmp,
              url: '/data/batch_send_email/lietotajs_email',
              headers: {
                "Content-Type": 'application/json; charset=utf-8',
                'AuthToken': $cookies.get("session-id")
              }
            };
            $http(req).then(function (response) {
              Notification.success(gettextCatalog.getString('Veiksmīgi nosūtīts epasts lietotājiem!', null, 'Lietotāji'));
            }, $scope.handleError);
          }
        });
      });
    }
  }

  function deleteUser(deleteObj) {
    var idArr = [];
    var context = dataOp.getContext();
    var deleteView = context && context != -1 ? "lietotajs_role_delete_institution" : "lietotajs_editable_admin";

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one(deleteView, idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function () {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts lietotājs!', null, 'Lietotāji'));
      return true;
    }, $scope.handleError);
  }

  function deleteDisable(rows) {
    var ret = false;

    if (!angular.equals(rows, {})) {
      Object.keys(rows).forEach(function (i) {
        if (rows[i] && rows[i].object && !rows[i].object.can_delete) {
          ret = true;
        }
      });
    }

    return ret;
  }

  uc.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Lietotājvārds", null, 'Lietotāji'),
      key: "username",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Vārds", null, 'Lietotāji'),
      key: "vards",
      sortable: "true"
    }, {
      text: gettextCatalog.getString("Uzvārds", null, 'Lietotāji'),
      key: "uzvards",
      sortable: "true"
    }],
    default_sort_col: 'username',
    default_sort_dir: 'asc',
    gridCheckbox: true,
    click_function: uc.openUser,
    send_email_function: uc.sendEmail,
    hasBulkSendEmailPermission: $rootScope.perms.get.lietotajs_sutit_epastu,
    "delete": false,
    bulkDelete: true,
    delete_function: uc.deleteUser,
    delete_disable_function: uc.deleteDisable,
    filters: false,
    catalog_name: gettextCatalog.getString('Lietotāji', null, 'Lietotāji'),
    create_function: uc.openUser,
    "export": false
  };
}]);
angular.module('myApp').controller('XlsImportController', function ($scope, $state, Upload, dataService, Notification, WebImportPersonals, WebImportRezultati, WebImportProjekti, WebImportIekartas, WebImportSlodzesDati, WebImportZinIds, gettextCatalog, Restangular) {
  var ctl = this;
  $scope.dto = {
    error: undefined,
    file: {}
  };

  function init() {
    ctl.impPersTeplateData = null;
    ctl.impZinRezTeplateData = null;
    ctl.impProjTeplateData = null;
    ctl.impIekTeplateData = null;
    ctl.impSlDatiTeplateData = null;
    ctl.impZinIdsTeplateData = null;
    dataService.listDefault('xlsx_imports_sablons_list').then(function (data) {
      if (data) {
        angular.forEach(data, function (d) {
          if (d.kods === 'IMP_PERS') {
            ctl.impPersTeplateData = d;
          } else if (d.kods === 'IMP_ZIN_REZ') {
            ctl.impZinRezTeplateData = d;
          } else if (d.kods === 'IMP_PROJ') {
            ctl.impProjTeplateData = d;
          } else if (d.kods === 'IMP_IEK') {
            ctl.impIekTeplateData = d;
          } else if (d.kods === 'IMP_SL_DATI') {
            ctl.impSlDatiTeplateData = d;
          } else if (d.kods === 'IMP_ZIN_IDS') {
            ctl.impZinIdsTeplateData = d;
          }
        });
      }
    });
  }

  $scope.uploadPersonals = function () {
    return $scope.upload(new WebImportPersonals(), 'pers');
  };

  $scope.uploadRezultati = function () {
    return $scope.upload(new WebImportRezultati(), 'rez');
  };

  $scope.uploadProjekti = function () {
    return $scope.upload(new WebImportProjekti(), 'proj');
  };

  $scope.uploadIekartas = function () {
    return $scope.upload(new WebImportIekartas(), 'iek');
  };

  $scope.uploadSlodzesDati = function () {
    return $scope.upload(new WebImportSlodzesDati(), 'sl_dati');
  };

  $scope.uploadZinIds = function () {
    return $scope.upload(new WebImportZinIds(), 'zin_ids');
  };

  $scope.upload = function (importer, type) {
    var dto = $scope.dto;
    dto.error = '';

    if (!dto.file.name) {
      return;
    }

    return Upload.upload({
      url: './upload',
      data: {
        file: dto.file
      }
    }).success(function (data, status, headers, config) {
      dto.file_info = data;
      ctl.finish(dto, importer, type);
    }).error(function (data, status) {
      if (data.indexOf('EntityStreamSizeException' > -1)) {
        dto.error = 'Ielādējamais fails ir par lielu.';
      } else {
        dto.error = data;
      }
    });
  };

  ctl.finish = function (dto, elem, type) {
    Notification.success("Uzsākta datu ielāde");
    dto.error = '';
    elem.file = dto.file_info;
    dataService.importXlsx(elem.file, type).then(function (data) {
      Notification.success("Datu ielāde pabeigta");
      $state.reload();
    }, function (data) {
      $scope.showErrorMsg(data.data);
    });
  };

  ctl.deleteXlsxImport = function (deleteObj) {
    var idArr = [];

    for (var key in deleteObj) {
      idArr.push(key);
    }

    idArr.join(',');
    return Restangular.one("data").one("xlsx_imports", idArr).remove(idArr, {
      'Content-Type': 'application/json'
    }).then(function (response) {
      Notification.success(gettextCatalog.getString('Veiksmīgi dzēsts XLSX ielādes ieraksts!', null, 'XLSX imports'));
      return true;
    }, $scope.handleErrorNew);
  };

  ctl.gridParams = {
    columns: [{
      text: gettextCatalog.getString("Datu tips", null, 'XLSX imports'),
      key: "tips",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Iesniedzējs", null, 'XLSX imports'),
      key: "iesniedzejs",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Institūcija", null, 'XLSX imports'),
      key: "institucija_nosaukums",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Statuss", null, 'XLSX imports'),
      key: "statuss",
      sortable: "false"
    }, {
      text: gettextCatalog.getString("Augšupielādes laiks", null, 'XLSX imports'),
      key: "augsupielades_laiks",
      sortable: "false",
      dateTimeVal: "true"
    }, {
      text: gettextCatalog.getString("Izpildes laiks", null, 'XLSX imports'),
      key: "izpildes_laiks",
      sortable: "false",
      dateTimeVal: "true"
    }, {
      text: gettextCatalog.getString("XLSX datne", null, 'XLSX imports'),
      key: "xls_link",
      filename: "xls_filename",
      sortable: "false",
      localFile: true
    }, {
      text: gettextCatalog.getString("Komentāri", null, 'XLSX imports'),
      key: "komentars",
      sortable: "false"
    }],
    //click_function: im.openDataDialog,
    //confirm_function: im.confirmOrCancel,
    gridCheckbox: true,
    "delete": false,
    bulkDelete: true,
    delete_function: ctl.deleteXlsxImport,
    bulkConfirm: false,
    filters: true,
    catalog_name: gettextCatalog.getString('Ielādes vēsture', null, 'XLSX imports'),
    "export": false
  };
  init();
});
angular.module('gridModule').controller('advancedSearchController', ['$scope', 'PermissionService', 'dataService', 'gettextCatalog', '$controller', '$filter', '$attrs', '$element', 'ngDialog', '$localStorage', '$state', '$rootScope', function ($scope, PermissionService, dataOp, gettextCatalog, $controller, $filter, $attrs, $element, ngDialog, $localStorage, $state, $rootScope) {
  var ctl = this;
  ctl.params = [{}];
  ctl.gc = $controller('GridController', {
    $scope: $scope,
    $filter: $filter,
    $attrs: $attrs,
    $element: $element,
    dataOp: dataOp,
    ngDialog: ngDialog,
    $localStorage: $localStorage,
    $state: $state
  });
  ctl.gc.filters_path = 'shared/advanced_search/filter_panel.html';
  ctl.updateValues = updateValues;
  ctl.convertToDate = convertToDate;
  ctl.advancedSearch = advancedSearch;
  ctl.removeSearchParam = removeSearchParam;
  ctl.resetFilter = resetFilter;
  ctl.searchFields = null;
  ctl.simpleSearchFields = [];
  ctl.hasPermission = PermissionService.hasPermission;
  ctl.gridCreatePermissionSet = $state.current.gridCreatePermissionSet;
  ctl.gridDeletePermissionSet = $state.current.gridDeletePermissionSet;
  dataOp.advancedSearch(ctl.gc.attrModule).then(function (data) {
    ctl.searchFields = data; // Array for sortable object

    var sortable = [];

    for (var key in ctl.searchFields) {
      if (ctl.searchFields.hasOwnProperty(key)) {
        // Fill sortable array
        sortable.push({
          'key': key,
          // Must translate before orderby
          'name': gettextCatalog.getString(ctl.searchFields[key].name)
        });
      }

      if (ctl.searchFields[key].fastSearch) {
        ctl.simpleSearchFields.push({
          field: key,
          type: ctl.searchFields[key].type,
          name: ctl.searchFields[key].name,
          permissionSet: ctl.searchFields[key].permissionSet,
          permission: ctl.searchFields[key].permission
        });

        if (ctl.searchFields[key].type == 'select') {
          var iKey = key;
          var iLength = ctl.simpleSearchFields.length - 1;
          dataOp[ctl.searchFields[iKey].sourceDataType](ctl.searchFields[iKey].sourceDataName).then(function (data) {
            ctl.simpleSearchFields[iLength].options = data.data;

            if (typeof ctl.gc.params.search != "undefined" && ctl.gc.params.search[iKey]) {
              ctl.simpleSearchFields[iLength].value = ctl.gc.params.search[iKey].value.toString();
            }
          });
        }
      }
    } // Do orderby with non-ASCII characters to support latvian


    var orderByName = sortable.slice(0);
    /*
    // nevajag sortēt, nenene, haoss iestājas
    orderByName.sort(function(a, b) {
        var x = a.name.toLowerCase();
        var y = b.name.toLowerCase();
        return x.localeCompare(y);
    });
    */
    // Set epmty to create orderByName object

    ctl.searchFields = {};

    for (var id in orderByName) {
      // Set translated name
      data[orderByName[id].key].name = orderByName[id].name; // Write updated object

      ctl.searchFields[orderByName[id].key] = data[orderByName[id].key];
    } // Set null when empty object for ng-if


    if (Object.keys(ctl.searchFields).length === 0) {
      ctl.searchFields = null;
    }
  });
  ctl.search = search;
  ctl.submitParams = {};

  function resetFilter() {
    for (var i = 0; ctl.simpleSearchFields.length > i; i++) {
      if (typeof ctl.simpleSearchFields[i].value != 'undefined') {
        delete ctl.simpleSearchFields[i].value;
      }
    }
  }

  function advancedSearch() {
    ctl.params = [];

    for (var key in ctl.gc.params.search) {
      ctl.params.push({
        field: key,
        type: ctl.searchFields[key].type
      });
    }

    if (ctl.params.length === 0) {
      ctl.params.push({});
    }

    ngDialog.openConfirm({
      template: 'shared/advanced_search/dialog.html',
      className: 'ngdialog-theme-default',
      scope: $scope
    }).then(function (value) {
      ngDialog.close();
    });
  }

  function removeSearchParam(key) {
    delete ctl.gc.params.search[key];

    for (var sKey in ctl.simpleSearchFields) {
      if (ctl.simpleSearchFields[sKey].field == key) {
        delete ctl.simpleSearchFields[sKey].value;
      }
    }

    if (!Object.keys(ctl.gc.params.search).length) {
      ctl.gc.params.search = null;
    }
  }

  function convertToDate(value) {
    if (typeof value !== 'undefined' && value !== null) {
      return new Date(value);
    }
  }

  function updateValues($index) {
    if (!ctl.searchFields[ctl.params[$index].field]) {
      return;
    }

    ctl.params[$index].type = ctl.searchFields[ctl.params[$index].field].type;
    delete ctl.params[$index].value;
    delete ctl.params[$index].options;
    delete ctl.params[$index].dateFormat;
    delete ctl.params[$index].date_from_edit;
    delete ctl.params[$index].date_till_edit;

    switch (ctl.params[$index].type) {
      case 'select':
        if (ctl.gc.params.search && ctl.gc.params.search[ctl.params[$index].field]) {
          ctl.params[$index].value = ctl.gc.params.search[ctl.params[$index].field].value.toString();
        }

        dataOp[ctl.searchFields[ctl.params[$index].field].sourceDataType](ctl.searchFields[ctl.params[$index].field].sourceDataName).then(function (data) {
          ctl.params[$index].options = data.data;
        });
        break;

      case 'date':
        ctl.params[$index].dateFormat = ctl.searchFields[ctl.params[$index].field].dateFormat;
        break;

      case 'numberRange':
        ctl.params[$index].cPattern = ctl.searchFields[ctl.params[$index].field].cPattern;
        break;
    }
  }

  function search(searchParams, isSimpleSearch) {
    var isEmpty = true;

    if (!searchParams.length) {
      ctl.gc.params.search = null;
    } else {
      ctl.gc.params.search = {};
    }

    for (var i = 0; searchParams.length > i; i++) {
      if (!searchParams[i].type || !searchParams[i].value && searchParams[i].type !== 'date' && searchParams[i].type !== 'checkbox' && searchParams[i].type !== 'numberRange' || !searchParams[i].date_from && !searchParams[i].date_till && searchParams[i].type === 'date' || !searchParams[i].range_from && !searchParams[i].range_till && searchParams[i].type === 'numberRange') {
        continue;
      }

      ctl.gc.params.search[searchParams[i].field] = {};

      switch (searchParams[i].type) {
        case 'date':
          ctl.gc.params.search[searchParams[i].field].date_from = $filter('date')(searchParams[i].date_from, "yyyy-MM-dd");
          ctl.gc.params.search[searchParams[i].field].date_till = $filter('date')(searchParams[i].date_till, "yyyy-MM-dd");

          if (ctl.gc.params.search[searchParams[i].field].date_from || ctl.gc.params.search[searchParams[i].field].date_till) {
            isEmpty = false;
          }

          break;

        case 'select':
          for (var x = 0; searchParams[i].options.length > x; x++) {
            if (searchParams[i].options[x].id == searchParams[i].value) {
              if (searchParams[i].options[x].title) {
                ctl.gc.params.search[searchParams[i].field].textValue = searchParams[i].options[x].title;
              } else {
                ctl.gc.params.search[searchParams[i].field].textValue = searchParams[i].options[x].pilns_vards;
              }

              ctl.gc.params.search[searchParams[i].field].value = searchParams[i].value;

              if (ctl.gc.params.search[searchParams[i].field].value) {
                isEmpty = false;
              }

              break;
            }
          }

          break;

        case 'checkbox':
          if (searchParams[i].value === false || typeof searchParams[i].value == "undefined") {
            ctl.gc.params.search[searchParams[i].field].value = "false";
            ctl.gc.params.search[searchParams[i].field].textValue = gettextCatalog.getString('Nav');
          } else {
            ctl.gc.params.search[searchParams[i].field].value = searchParams[i].value;
            ctl.gc.params.search[searchParams[i].field].textValue = gettextCatalog.getString('Ir');
          }

          if (ctl.gc.params.search[searchParams[i].field].value) {
            isEmpty = false;
          }

          break;

        case 'numberRange':
          ctl.gc.params.search[searchParams[i].field].range_from = searchParams[i].range_from;
          ctl.gc.params.search[searchParams[i].field].range_till = searchParams[i].range_till;

          if (ctl.gc.params.search[searchParams[i].field].range_from || ctl.gc.params.search[searchParams[i].field].range_till) {
            isEmpty = false;
          }

          break;

        default:
          ctl.gc.params.search[searchParams[i].field].value = searchParams[i].value;

          if (ctl.gc.params.search[searchParams[i].field].value) {
            isEmpty = false;
          }

          break;
      }
    } // Unset search object if nothing is searched


    if (isEmpty) {
      ctl.gc.params.search = null;
    }

    ctl.gc.filter();

    if (ctl.gc.params.search && ctl.gc.params.search.show_archived && ctl.gc.params.search.show_archived.value == "false") {
      if (Object.keys(ctl.gc.params.search).length == 1) {
        ctl.gc.params.search = null;
      } else {
        delete ctl.gc.params.search.show_archived;
      }
    }

    ngDialog.close();
  }
}]);
angular.module('myApp').directive('colHeader', colHeader);

function colHeader() {
  return {
    restrict: 'E',
    replace: true,
    scope: {
      key: '=',
      text: '=',
      sortable: '=',
      click: '&click',
      sort: '='
    },
    templateUrl: "shared/colheader/colHeader.html"
  };
}
angular.module('myApp').directive('ctxSref', function ctxSref(authService, $state) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      element.css('cursor', 'pointer');
      element.click(function () {
        $state.go(attrs.ctxSref, {
          context: authService.u.context
        });
      });
    }
  };
});
angular.module("myApp").service("MD", function () {
  return function (data) {
    var $this;
    $this = this;
    $this.columnOrder = [];
    angular.forEach(data, function (el) {
      $this[el.name] = el;

      if (el.visible && el.name !== "id") {
        return $this.columnOrder.push(el.name);
      }
    });
    return $this;
  };
});
angular.module('gridModule').factory('dataService', ['$http', '$filter', '$cookies', '$q', 'gettextCatalog', 'ngDialog', '$rootScope', 'authService', function ($http, $filter, $cookies, $q, gettextCatalog, ngDialog, $rootScope, authOp) {
  var dataOp = {}; // translate DB -> FRONT

  function checkBoxField(alias, name, fastSearch) {
    if (fastSearch == undefined || !fastSearch) return {
      alias: alias,
      name: name,
      type: 'checkbox'
    };else return {
      alias: alias,
      name: name,
      type: 'checkbox',
      fastSearch: true
    };
  }

  function textField(alias, name, fastSearch) {
    if (fastSearch == undefined || !fastSearch) return {
      alias: alias,
      name: name,
      type: 'text'
    };else return {
      alias: alias,
      name: name,
      type: 'text',
      fastSearch: true
    };
  }

  function choiceField(alias, name, sourceDataName) {
    return {
      alias: alias,
      name: name,
      type: 'select',
      sourceDataType: 'getChoices',
      sourceDataName: sourceDataName
    };
  }

  ;

  function codifierField(alias, name, sourceDataName, fastSearch) {
    if (fastSearch == undefined || !fastSearch) return {
      alias: alias,
      name: name,
      type: 'select',
      sourceDataType: 'getCodificator',
      sourceDataName: sourceDataName
    };else return {
      alias: alias,
      name: name,
      type: 'select',
      sourceDataType: 'getCodificator',
      sourceDataName: sourceDataName,
      fastSearch: true
    };
  }

  ;

  function dateField(alias, name, dateFrom, dateTill) {
    if (dateFrom == undefined && dateTill == undefined) return {
      alias: alias,
      name: name,
      type: 'date',
      dateFormat: 'dd.MM.yyyy',
      dateFrom: alias + '_no',
      dateTill: alias + '_lidz'
    };else return {
      alias: alias,
      name: name,
      type: 'date',
      dateFormat: 'dd.MM.yyyy',
      dateFrom: dateFrom,
      dateTill: dateTill
    };
  }

  ;
  var searchFields = {
    show_archived: function show_archived(permissionSet, name) {
      return {
        alias: 'show_archived',
        permissionSet: permissionSet,
        permission: 'archive_view',
        name: name,
        type: 'checkbox',
        fastSearch: true
      };
    },
    zin_rezultati_no_citam_institucijam: function zin_rezultati_no_citam_institucijam(permissionSet, name) {
      return {
        alias: 'zin_rezultati_no_citam_institucijam',
        permissionSet: permissionSet,
        permission: 'zin_rezultats_all_list',
        name: name,
        type: 'checkbox',
        fastSearch: true
      };
    }
  };
  var langObj = {};
  langObj.empty = {};
  langObj.choice = {
    'kods': 'code',
    'grupas_kods': 'grupas_kods',
    'amats': 'amats',
    'nosaukums': 'title',
    'projekta_veids': 'title',
    'uzvards': 'uzvards',
    'vards': 'vards',
    'pilns_vards': 'pilns_vards',
    'personas_kods': 'personas_kods',
    'username': 'username',
    'epasts': 'epasts',
    'pamatnozares_nosaukums': 'pamatnozares_nosaukums',
    'apaksloma': 'apaksloma',
    'apaksloma_nosaukums': 'apaksloma_nosaukums',
    'pilns_nosaukums': 'pilns_nosaukums',
    'projekta_nr': 'projekta_nr',
    'zi_reg_nr': 'zi_reg_nr',
    'zi_nosaukums': 'zi_nosaukums',
    'realizacijas_termins_no': 'realizacijas_termins_no',
    'realizacijas_termins_lidz': 'realizacijas_termins_lidz',
    'projekta_vaditaja_id': 'projekta_vaditaja_id',
    'projekta_vaditaja_vards': 'projekta_vaditaja_vards',
    'projekta_vaditaja_uzvards': 'projekta_vaditaja_uzvards',
    'projekta_vaditaja_personas_kods': 'projekta_vaditaja_personas_kods',
    'pieteiksanas_datums_no': 'pieteiksanas_datums_no',
    'pieteiksanas_datums_lidz': 'pieteiksanas_datums_lidz',
    'ir_pieteiksanas_periods': 'ir_pieteiksanas_periods',
    'var_atsaukt': 'var_atsaukt'
  };
  langObj.gridUrlConstants = {
    'FP_ZIK': {
      exportTitle: gettextCatalog.getString('export_ZINATNISKAS_INSTITUCIJAS'),
      listUrl: 'institucija_list',
      exportUrl: 'institucija',
      languageObj: langObj.empty
    },
    'FP_BUS': {
      exportTitle: gettextCatalog.getString('export_KOMERSANTI'),
      listUrl: 'komersants_list',
      exportUrl: 'komersants',
      languageObj: langObj.empty
    },
    'FP_CRE': {
      exportTitle: gettextCatalog.getString('export_KOMERSANTI'),
      listUrl: 'ligumpetijums_list',
      exportUrl: 'ligumpetijums',
      languageObj: langObj.empty
    },
    'FP_EQ': {
      exportTitle: gettextCatalog.getString('export_IEKARTAS'),
      listUrl: 'iekarta_list',
      exportUrl: 'iekarta',
      languageObj: langObj.empty
    },
    'FP_HEI': {
      exportTitle: gettextCatalog.getString('export_AUGSTAKAS_IZGLITIBAS_IESTADES'),
      listUrl: 'aii_list',
      exportUrl: 'augstakas_izglitibas_iestade',
      languageObj: langObj.empty
    },
    'FP_APK': {
      exportTitle: gettextCatalog.getString('export_AKADEMISKAIS_PERSONALS'),
      listUrl: 'akad_personals_list',
      exportUrl: 'akad_personals',
      languageObj: langObj.empty
    },
    'FP_ZKK': {
      exportTitle: gettextCatalog.getString('export_ZINATNISKAIS_PERSONALS'),
      listUrl: 'zin_personals_list',
      exportUrl: 'zin_personals',
      languageObj: langObj.empty
    },
    'FP_P': {
      exportTitle: gettextCatalog.getString('export_PERSONALS'),
      listUrl: 'personals_list',
      exportUrl: 'personals',
      languageObj: langObj.empty
    },
    'FP_AUTH': {
      exportTitle: gettextCatalog.getString('export_AUTORI'),
      listUrl: 'autori_list',
      exportUrl: 'autori',
      languageObj: langObj.empty
    },
    'FP_EKS': {
      exportTitle: gettextCatalog.getString('export_EKSPERTI'),
      listUrl: 'lzp_eksperti_list',
      exportUrl: 'eksperti',
      languageObj: langObj.empty
    },
    'FP_FPK': {
      exportTitle: gettextCatalog.getString('export_PROJEKTI'),
      listUrl: 'projekts_list',
      exportUrl: 'projekts',
      languageObj: langObj.empty
    },
    'FP_IMP': {
      exportTitle: gettextCatalog.getString('export_IMPORTS'),
      listUrl: 'imports_list',
      exportUrl: 'imports',
      languageObj: langObj.empty
    },
    'FP_XIMP': {
      exportTitle: gettextCatalog.getString('export_XLSX_IMPORTS'),
      listUrl: 'xlsx_imports_list',
      exportUrl: 'xlsx_imports',
      languageObj: langObj.empty
    },
    'FP_ZDR': {
      exportTitle: gettextCatalog.getString('export_ZINATNISKAS_DARBIBAS_REZULTATI'),
      listUrl: 'zin_rezultats_list',
      exportUrl: 'zin_rezultats_base',
      languageObj: langObj.empty
    },
    'FP_ZDP': {
      exportTitle: gettextCatalog.getString('export_PROJEKTU_PARSKATI'),
      listUrl: 'projekta_parskats_list',
      exportUrl: 'projekta_parskats',
      languageObj: langObj.empty
    },
    'FP_ZNK': {
      exportTitle: gettextCatalog.getString('export_ZINATNISKO_NOZARU_KLASIFIKATORS'),
      listUrl: 'zinatnes_nozares_list',
      // exportUrl: 'zinatnes_nozares',
      languageObj: langObj.empty
    },
    'FP_LP': {
      exportTitle: gettextCatalog.getString('export_LIETOTAJI'),
      listUrl: 'lietotajs_list',
      // exportUrl: 'lietotajs',
      languageObj: langObj.empty
    },
    'FP_RC': {
      exportTitle: gettextCatalog.getString('export_LOMAS'),
      listUrl: 'loma_list',
      // exportUrl: 'loma',
      languageObj: langObj.empty
    },
    'FP_C': {
      exportTitle: gettextCatalog.getString('export_KODIFIKATORI'),
      listUrl: 'kodifikators_list',
      exportUrl: 'kodifikators',
      languageObj: langObj.empty
    },
    'FP_LZP': {
      listUrl: 'kodifikators_list',
      languageObj: langObj.empty,
      gridTitle: gettextCatalog.getString('LZP Zinātnisko nozaru klasifikators')
    },
    'FP_AUD': {
      exportTitle: gettextCatalog.getString('Darbību vēsture'),
      listUrl: 'history',
      languageObj: langObj.empty
    },
    'FP_SSO': {
      exportTitle: gettextCatalog.getString('Ārējās sistēmas'),
      listUrl: 'sso',
      languageObj: langObj.empty
    },
    'FP_UMT': {
      exportTitle: gettextCatalog.getString('Sistēmas lietotāja materiāli'),
      listUrl: 'user_materials',
      languageObj: langObj.empty
    },
    'FP_NTF': {
      exportTitle: gettextCatalog.getString('Paziņojumi'),
      listUrl: 'notifications',
      languageObj: langObj.empty
    },
    'FP_EKSP': {
      exportTitle: gettextCatalog.getString('LZP eksperta tiesību pieteikumi'),
      listUrl: 'pieteikums_list',
      exportUrl: 'pieteikums',
      languageObj: langObj.empty
    },
    'FP_ZISN': {
      exportTitle: gettextCatalog.getString('Zinātnisko institūciju starptautiskie novērtējumi'),
      listUrl: 'institucijas_novertejums_list',
      exportUrl: 'institucijas_novertejums',
      languageObj: langObj.empty
    }
  };

  dataOp.getAdvancedSearchObject = function (method) {
    if (advancedSearchObject[method]) {
      return advancedSearchObject[method];
    } else {
      return [];
    }
  };

  var advancedSearchObject = {};

  dataOp.initAdvancedSearchObject = function () {
    advancedSearchObject = {
      'FP_APK': {
        personals_id: choiceField('personals_id', gettextCatalog.getString("Personāls (id)", null, 'Ak. personāls'), 'scientific_personal'),
        personals_vards: textField('personals_vards', gettextCatalog.getString("Personāls (Vārds)", null, 'Ak. personāls'), true),
        personals_uzvards: textField('personals_uzvards', gettextCatalog.getString("Personāls (Uzvārds)", null, 'Ak. personāls'), true),
        personals_personas_kods: textField('personals_personas_kods', gettextCatalog.getString("Personāls (Personas kods)", null, 'Ak. personāls')),
        kvalifikacijas_veids_id: codifierField('kvalifikacijas_veids_id', gettextCatalog.getString("Izglītības veids vai līmenis", null, 'Ak. personāls'), 'qualification_types'),
        kvalifikacijas_zinatnes_nozare_id: choiceField('kvalifikacijas_zinatnes_nozare_id', gettextCatalog.getString("Izglītības zinātnes nozare", null, 'Personāls'), 'science_branch_full'),
        personals_dzimums: codifierField('personals_dzimums', gettextCatalog.getString("Dzimums", null, 'Ak. personāls'), 'gender'),
        ir_ari_zinatniskais_personals: checkBoxField('ir_ari_zinatniskais_personals', gettextCatalog.getString("Ir arī zinātniskais darbinieks", null, 'Ak. personāls')),
        zin_institucija_nosaukums: textField('zin_institucija_nosaukums', gettextCatalog.getString("Augstākās izglītības iestādes nosaukums", null, 'Ak. personāls'), true),
        show_archived: searchFields.show_archived('akad_personals_list', gettextCatalog.getString("Rādīt arhivētās personas", null, 'Ak. personāls')),
        akad_darba_vieta_amats_id: codifierField('akad_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats augstākās izglītības iestādē", null, 'Ak. personāls'), 'akademiskais_amata_tips'),
        personal_nationality_id: codifierField('personal_nationality_id', gettextCatalog.getString("Valstiskā piederība", null, 'Ak. personāls'), 'countries'),
        personals_statuss_valsti_id: codifierField('personals_statuss_valsti_id', gettextCatalog.getString("Statuss valstī", null, 'Ak. personāls'), 'pers_status'),
        ir_ievelets_amata: checkBoxField('ir_ievelets_amata', gettextCatalog.getString("Ievēlēts", null, 'Ak. personāls')),
        amata_stasanas_datums: dateField('amata_stasanas_datums', gettextCatalog.getString("Sākuma termiņš", null, 'Ak. personāls')),
        personals_dzimsanas_datums: dateField('personals_dzimsanas_datums', gettextCatalog.getString("Dzimšanas datums", null, 'Ak. personāls')),
        amata_beigu_termins: dateField('amata_beigu_termins', gettextCatalog.getString("Beigu termiņš", null, 'Ak. personāls'), 'akad_darba_vieta_amata_beigu_termins_no', 'akad_darba_vieta_amata_beigu_termins_lidz'),
        amata_ievelesanas_datums: dateField('amata_ievelesanas_datums', gettextCatalog.getString("Ievēlēšanas datums", null, 'Ak. personāls'), 'akad_darba_vieta_amata_ievelesanas_datums_no', 'akad_darba_vieta_amata_ievelesanas_datums_lidz'),
        radit_vesturiskos_datus: checkBoxField('radit_vesturiskos_datus', gettextCatalog.getString("Rādīt vēsturiskos datus", null, 'Ak. personāls'), true)
      },
      'FP_FPK': {
        projekta_nr: textField('projekta_nr', gettextCatalog.getString("Projekta numurs", null, 'Projekti'), true),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Projekta nosaukums", null, 'Projekti'), true),
        projekta_kategorija_id: codifierField('projekta_kategorija_id', gettextCatalog.getString("Projekta kategorija", null, 'Projekti'), 'project_category'),
        projekta_veids_id: codifierField('projekta_veids_id', gettextCatalog.getString("Projekta veids (id)", null, 'Projekti'), 'project_types'),
        petniecibas_darbibas_raksturs_id: codifierField('petniecibas_darbibas_raksturs_id', gettextCatalog.getString("Pētnieciskās darbības raksturs", null, 'Projekti'), 'research_work_types'),
        pasutitajs: textField('pasutitajs', gettextCatalog.getString("Pasūtītājs", null, 'Projekti')),
        anotacija: textField('anotacija', gettextCatalog.getString("Anotācija", null, 'Projekti')),
        anotacija_en: textField('anotacija_en', gettextCatalog.getString("Anotācija EN", null, 'Projekti')),
        viedas_specializacijas_joma_id: codifierField('viedas_specializacijas_joma_id', gettextCatalog.getString("Atbilstošā viedās specializācijas joma", null, 'Projekti'), 'vieda_specializacija'),
        apaksprogramma: textField('apaksprogramma', gettextCatalog.getString("Apakšprogramma", null, 'Projekti')),
        statuss_id: codifierField('statuss_id', gettextCatalog.getString("Statuss", null, 'Projekti'), 'project_statuses', true),
        show_archived: searchFields.show_archived('projekts_list', gettextCatalog.getString("Rādīt arhivētos projektus", null, 'Projekti')),
        zin_institucija_id: choiceField('zin_institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'Projekti'), 'scientific_institutions'),
        institucija_nos: textField('institucija_nos', gettextCatalog.getString("Zinātniskās institūcijas/organizācijas nosaukums", null, 'Projekti'), true),
        realizacijas_termins_no: dateField('realizacijas_termins_no', gettextCatalog.getString("Realizācijas termiņš (no)", null, 'Projekti')),
        realizacijas_termins_lidz: dateField('realizacijas_termins_lidz', gettextCatalog.getString("Realizācijas termiņš (līdz)", null, 'Projekti')),
        projekta_vaditajs: textField('projekta_vaditajs', gettextCatalog.getString("Projekta Vadītājs", null, 'Projekti')),
        projekta_vaditaja_id: choiceField('projekta_vaditaja_id', gettextCatalog.getString("Projekta Vadītājs (id)", null, 'Projekti'), 'scientific_personal'),
        vaditajs_vards: textField('vaditajs_vards', gettextCatalog.getString("Projekta vadītāja vārds", null, 'Projekti')),
        vaditajs_uzvards: textField('vaditajs_uzvards', gettextCatalog.getString("Projekta vadītāja uzvārds", null, 'Projekti')),
        vaditajs_personas_kods: textField('vaditajs_personas_kods', gettextCatalog.getString("Projekta vadītāja personas kods", null, 'Projekti')),
        petniecibas_kategorija_id: codifierField('petniecibas_kategorija_id', gettextCatalog.getString("Pētniecības kategorija", null, 'Projekti'), 'petniecibas_kategorija'),
        uzraudzibas_komisija_id: choiceField('uzraudzibas_komisija_id', gettextCatalog.getString("Uzraudzības komisija", null, 'Projekti'), 'supervisory_boards'),
        posmu_skaits: {
          alias: 'posmu_skaits',
          name: gettextCatalog.getString("Posmu skaits", null, 'Projekti'),
          type: 'numberRange',
          rangeFrom: 'posmu_skaits_no',
          rangeTill: 'posmu_skaits_lidz',
          cPattern: 'int_9_shorter'
        },
        kopejais_finansejums_ar_pvn: {
          alias: 'kopejais_finansejums_ar_pvn',
          name: gettextCatalog.getString("Kopējais finansējums ar PVN", null, 'Projekti'),
          type: 'numberRange',
          rangeFrom: 'kopejais_finansejums_ar_pvn_no',
          rangeTill: 'kopejais_finansejums_ar_pvn_lidz',
          cPattern: "decimal_11_2"
        },
        nacionalais_finansejums_kopejais: {
          alias: 'nacionalais_finansejums_kopejais',
          name: gettextCatalog.getString("Projekta nacionālais finansējums (valsts budžeta līdzekļi)", null, 'Projekti'),
          type: 'numberRange',
          rangeFrom: 'nacionalais_finansejums_kopejais_no',
          rangeTill: 'nacionalais_finansejums_kopejais_lidz',
          cPattern: "decimal_11_2"
        },
        piesaist_finansejums_no_arvalstu_fin_instr: {
          alias: 'piesaist_finansejums_no_arvalstu_fin_instr',
          name: gettextCatalog.getString("Piesaistītie līdzekļi projektā no uzņēmumiem", null, 'Projekti'),
          type: 'numberRange',
          rangeFrom: 'piesaist_finansejums_no_arvalstu_fin_instr_no',
          rangeTill: 'piesaist_finansejums_no_arvalstu_fin_instr_lidz',
          cPattern: "decimal_11_2"
        },
        piesaist_finansejums_no_pasvaldibam: {
          alias: 'piesaist_finansejums_no_pasvaldibam',
          name: gettextCatalog.getString("Piesaistītie līdzekļi projektā no pašvaldībām", null, 'Projekti'),
          type: 'numberRange',
          rangeFrom: 'piesaist_finansejums_no_pasvaldibam_no',
          rangeTill: 'piesaist_finansejums_no_pasvaldibam_lidz',
          cPattern: "decimal_11_2"
        },
        projekti_ar_vienadiem_nosaukumiem: checkBoxField('projekti_ar_vienadiem_nosaukumiem', gettextCatalog.getString("Atlasīt projektus ar vienādiem nosaukumiem", null, 'Projekti'))
      },
      'FP_C': {
        nosaukums: textField('nosaukums', gettextCatalog.getString("Kodifikatora nosaukums", null, 'Kodifikatori'), true),
        kods: textField('kods', gettextCatalog.getString("Kods", null, 'Kodifikatori'))
      },
      'FP_LP': {
        username: textField('username', gettextCatalog.getString("Lietotājvārds", null, 'Lietotāji'), true),
        vards: textField('vards', gettextCatalog.getString("Vārds", null, 'Lietotāji'), true),
        uzvards: textField('uzvards', gettextCatalog.getString("Uzvārds", null, 'Lietotāji'), true),
        epasts: textField('epasts', gettextCatalog.getString("E-pasts", null, 'Lietotāji')),
        personas_kods: textField('personas_kods', gettextCatalog.getString("Personas kods", null, 'Lietotāji')),
        institucija_id: choiceField('institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'Lietotāji'), 'institutions'),
        loma_id: choiceField('loma_id', gettextCatalog.getString("Loma", null, 'Lietotāji'), 'roles_choice')
      },
      'FP_P': {
        vards: textField('vards', gettextCatalog.getString("Vārds", null, 'Personāls'), true),
        uzvards: textField('uzvards', gettextCatalog.getString("Uzvārds", null, 'Personāls'), true),
        show_archived: searchFields.show_archived('personals_list', gettextCatalog.getString("Rādīt arhivētās personas", null, 'Personāls')),
        dzimums: codifierField('dzimums', gettextCatalog.getString("Dzimums", null, 'Personāls'), 'gender'),
        kvalifikacijas_veids_id: codifierField('kvalifikacijas_veids_id', gettextCatalog.getString("Izglītības veids vai līmenis", null, 'Personāls'), 'qualification_types'),
        kvalifikacijas_zinatnes_nozare_id: choiceField('kvalifikacijas_zinatnes_nozare_id', gettextCatalog.getString("Izglītības zinātnes nozare", null, 'Personāls'), 'science_branch_full'),
        personas_kods: textField('personas_kods', gettextCatalog.getString("Personas kods", null, 'Personāls')),
        dzimsanas_datums: dateField('dzimsanas_datums', gettextCatalog.getString("Dzimšanas datums", null, 'Personāls')),
        lzp_eksperts_datums_no: dateField('lzp_eksperts_datums_no', gettextCatalog.getString("LZP Eksperta statuss (no)", null, 'Personāls')),
        lzp_eksperts_datums_lidz: dateField('lzp_eksperts_datums_lidz', gettextCatalog.getString("LZP Eksperta statuss (līdz)", null, 'Personāls')),
        zin_darba_vieta_lzp_ekspertu_komisija: textField('zin_darba_vieta_lzp_ekspertu_komisija', gettextCatalog.getString("LZP ekspertu komisija", null, 'Personāls')),
        zin_darba_vieta_lzp_eksperts_atslegvardi: textField('zin_darba_vieta_lzp_eksperts_atslegvardi', gettextCatalog.getString("LZP ekspertu atslēgvārdi", null, 'Personāls')),
        ir_lzp_eksperts: checkBoxField('ir_lzp_eksperts', gettextCatalog.getString("LZP eksperts", null, 'Personāls')),
        h2020_eksperts: checkBoxField('h2020_eksperts', gettextCatalog.getString("Horizon 2020 eksperts", null, 'Personāls')),
        ir_ari_akademiskais_personals: checkBoxField('ir_ari_akademiskais_personals', gettextCatalog.getString("Ir arī akadēmiskais personāls", null, 'Personāls')),
        ir_ari_zinatniskais_personals: checkBoxField('ir_ari_zinatniskais_personals', gettextCatalog.getString("Ir arī zinātniskais personāls", null, 'Personāls')),
        pilsoniba_id: codifierField('pilsoniba_id', gettextCatalog.getString("Valstiskā piederība", null, 'Personāls'), 'countries'),
        statuss_valsti_id: codifierField('statuss_valsti_id', gettextCatalog.getString("Statuss valstī", null, 'Personāls'), 'pers_status'),
        zin_darba_vieta_institucija: textField('zin_darba_vieta_institucija', gettextCatalog.getString("Zinātniskā institūcija", null, 'Personāls')),
        zin_darba_vieta_amats_id: codifierField('zin_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats zinātniskajā institūcijā", null, 'Personāls'), 'zin_izglitibas_amata_tips'),
        zin_darba_vieta_zinatnes_nozare_id: choiceField('zin_darba_vieta_zinatnes_nozare_id', gettextCatalog.getString("Zin. amata zinātnes nozare", null, 'Personāls'), 'science_branch_full'),
        zin_darba_vieta_amata_veids_id: codifierField('zin_darba_vieta_amata_veids_id', gettextCatalog.getString("Amata veids (zinātniskajā institūcijā)", null, 'Personāls'), 'work_types'),
        zin_darba_vieta_amata_stasanas_datums: dateField('zin_darba_vieta_amata_stasanas_datums', gettextCatalog.getString("Amatā stāšanās datums", null, 'Personāls'), 'zin_darba_vieta_amata_stasanas_datums_no', 'zin_darba_vieta_amata_stasanas_datums_lidz'),
        zin_darba_vieta_amata_beigu_termins: dateField('zin_darba_vieta_amata_beigu_termins', gettextCatalog.getString("Amata beigu termiņš", null, 'Personāls'), 'zin_darba_vieta_amata_beigu_termins_no', 'zin_darba_vieta_amata_beigu_termins_lidz'),
        zin_darba_vieta_amata_ievelesanas_datums: dateField('zin_darba_vieta_amata_ievelesanas_datums', gettextCatalog.getString("Ievēlēšanas datums", null, 'Personāls'), 'zin_darba_vieta_amata_ievelesanas_datums_no', 'zin_darba_vieta_amata_ievelesanas_datums_lidz'),
        zin_darba_vieta_ir_amatu_parklasanas: checkBoxField('zin_darba_vieta_ir_amatu_parklasanas', gettextCatalog.getString("Vairāki amati vienlaicīgi (zinātniskajā institūcijā)", null, 'Personāls')),
        akad_darba_vieta_amats_id: codifierField('akad_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats augstākās izglītības iestādē", null, 'Personāls'), 'akademiskais_amata_tips'),
        akad_darba_vieta_amata_stasanas_datums: dateField('akad_darba_vieta_amata_stasanas_datums', gettextCatalog.getString("Akad. sākuma termiņš", null, 'Personāls'), 'akad_darba_vieta_amata_stasanas_datums_no', 'akad_darba_vieta_amata_stasanas_datums_lidz'),
        akad_darba_vieta_amata_beigu_termins: dateField('akad_darba_vieta_amata_beigu_termins', gettextCatalog.getString("Akad. beigu termiņš", null, 'Personāls'), 'akad_darba_vieta_amata_beigu_termins_no', 'akad_darba_vieta_amata_beigu_termins_lidz'),
        akad_darba_vieta_ir_ievelets_amata: checkBoxField('akad_darba_vieta_ir_ievelets_amata', gettextCatalog.getString("Akad. ievēlēts", null, 'Personāls')),
        akad_darba_vieta_amata_ievelesanas_datums: dateField('akad_darba_vieta_amata_ievelesanas_datums', gettextCatalog.getString("Akad. ievēlēšanas datums", null, 'Personāls'), 'akad_darba_vieta_amata_ievelesanas_datums_no', 'akad_darba_vieta_amata_ievelesanas_datums_lidz'),
        personas_bez_saist_informacijas: checkBoxField('personas_bez_saist_informacijas', gettextCatalog.getString("Atlasīt personas bez saistītās informācijas", null, 'Personāls')),
        personas_ar_vienadiem_vardiem_uzvardiem: checkBoxField('personas_ar_vienadiem_vardiem_uzvardiem', gettextCatalog.getString("Atlasīt personas ar vienādiem vārdiem, uzvārdiem", null, 'Personāls'))
      },
      'FP_AUTH': {
        vards: textField('vards', gettextCatalog.getString("Vārds", null, 'Personāls'), true),
        uzvards: textField('uzvards', gettextCatalog.getString("Uzvārds", null, 'Personāls'), true),
        personas_kods: textField('personas_kods', gettextCatalog.getString("Personas kods", null, 'Personāls'))
      },
      'FP_EKS': {
        vards: textField('vards', gettextCatalog.getString("Vārds", null, 'Eksperti'), true),
        uzvards: textField('uzvards', gettextCatalog.getString("Uzvārds", null, 'Eksperti'), true),
        orcid: textField('orcid', gettextCatalog.getString("ORCID", null, 'Eksperti')),
        wos_researcher_nr: textField('wos_researcher_nr', gettextCatalog.getString("WoS ResearcherID", null, 'Eksperti')),
        h2020_eksperts: checkBoxField('h2020_eksperts', gettextCatalog.getString("Horizon 2020 eksperts", null, 'Eksperti')),
        show_archived: searchFields.show_archived('personals_list', gettextCatalog.getString("Rādīt arhivētās personas", null, 'Eksperti')),
        kvalifikacijas_veids_id: codifierField('kvalifikacijas_veids_id', gettextCatalog.getString("Izglītības veids vai līmenis", null, 'Eksperti'), 'qualification_types'),
        personas_kods: textField('personas_kods', gettextCatalog.getString("Personas kods", null, 'Eksperti')),
        zimsanas_datums: dateField('dzimsanas_datums', gettextCatalog.getString("Dzimšanas datums", null, 'Eksperti')),
        lzp_eksperts_datums_no: dateField('lzp_eksperts_datums_no', gettextCatalog.getString("LZP Eksperta statuss (no)", null, 'Eksperti')),
        lzp_eksperts_datums_lidz: dateField('lzp_eksperts_datums_lidz', gettextCatalog.getString("LZP Eksperta statuss (līdz)", null, 'Eksperti')),
        zinatnes_nozare_id: choiceField('zinatnes_nozare_id', gettextCatalog.getString("LZP eksperta zinātnes nozares", null, 'Eksperti'), 'science_branch_full'),
        komisija_id: codifierField('komisija_id', gettextCatalog.getString("LZP ekspertu komisija", null, 'Eksperti'), 'komisija_id'),
        zin_darba_vieta_lzp_eksperts_atslegvardi: textField('zin_darba_vieta_lzp_eksperts_atslegvardi', gettextCatalog.getString("LZP ekspertu atslēgvārdi", null, 'Eksperti')),
        ir_lzp_eksperts: checkBoxField('ir_lzp_eksperts', gettextCatalog.getString("LZP eksperts", null, 'Eksperti')),
        ir_ari_akademiskais_personals: checkBoxField('ir_ari_akademiskais_personals', gettextCatalog.getString("Ir arī akadēmiskais personāls", null, 'Eksperti')),
        r_ari_zinatniskais_personals: checkBoxField('ir_ari_zinatniskais_personals', gettextCatalog.getString("Ir arī zinātniskais personāls", null, 'Eksperti')),
        pilsoniba_id: codifierField('pilsoniba_id', gettextCatalog.getString("Valstiskā piederība", null, 'Eksperti'), 'countries'),
        statuss_valsti_id: codifierField('statuss_valsti_id', gettextCatalog.getString("Statuss valstī", null, 'Eksperti'), 'pers_status'),
        zin_darba_vieta_institucija: textField('zin_darba_vieta_institucija', gettextCatalog.getString("Zinātniskā institūcija", null, 'Eksperti')),
        zin_darba_vieta_amats_id: codifierField('zin_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats zinātniskajā institūcijā", null, 'Eksperti'), 'zin_izglitibas_amata_tips'),
        zin_darba_vieta_amata_veids_id: codifierField('zin_darba_vieta_amata_veids_id', gettextCatalog.getString("Amata veids (zinātniskajā institūcijā)", null, 'Eksperti'), 'work_types'),
        zin_darba_vieta_amata_stasanas_datums: dateField('zin_darba_vieta_amata_stasanas_datums', gettextCatalog.getString("Amatā stāšanās datums", null, 'Eksperti'), 'zin_darba_vieta_amata_stasanas_datums_no', 'zin_darba_vieta_amata_stasanas_datums_lidz'),
        zin_darba_vieta_amata_beigu_termins: dateField('zin_darba_vieta_amata_beigu_termins', gettextCatalog.getString("Amata beigu termiņš", null, 'Eksperti'), 'zin_darba_vieta_amata_beigu_termins_no', 'zin_darba_vieta_amata_beigu_termins_lidz'),
        zin_darba_vieta_amata_ievelesanas_datums: dateField('zin_darba_vieta_amata_ievelesanas_datums', gettextCatalog.getString("Ievēlēšanas datums", null, 'Eksperti'), 'zin_darba_vieta_amata_ievelesanas_datums_no', 'zin_darba_vieta_amata_ievelesanas_datums_lidz'),
        zin_darba_vieta_ir_ievelets_amata: checkBoxField('zin_darba_vieta_ir_ievelets_amata', gettextCatalog.getString("Ievēlēts", null, 'Eksperti')),
        akad_darba_vieta_amats_id: codifierField('akad_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats augstākās izglītības iestādē", null, 'Eksperti'), 'akademiskais_amata_tips'),
        akad_darba_vieta_amata_stasanas_datums: dateField('akad_darba_vieta_amata_stasanas_datums', gettextCatalog.getString("Akad. sākuma termiņš", null, 'Eksperti'), 'akad_darba_vieta_amata_stasanas_datums_no', 'akad_darba_vieta_amata_stasanas_datums_lidz'),
        akad_darba_vieta_amata_beigu_termins: dateField('akad_darba_vieta_amata_beigu_termins', gettextCatalog.getString("Akad. beigu termiņš", null, 'Eksperti'), 'akad_darba_vieta_amata_beigu_termins_no', 'akad_darba_vieta_amata_beigu_termins_lidz'),
        akad_darba_vieta_ir_ievelets_amata: checkBoxField('akad_darba_vieta_ir_ievelets_amata', gettextCatalog.getString("Akad. ievēlēts", null, 'Eksperti')),
        akad_darba_vieta_amata_ievelesanas_datums: dateField('aakad_darba_vieta_amata_ievelesanas_datums', gettextCatalog.getString("Akad. ievēlēšanas datums", null, 'Eksperti'), 'akad_darba_vieta_amata_ievelesanas_datums_no', 'akad_darba_vieta_amata_ievelesanas_datums_lidz'),
        radit_vesturiskos_datus: checkBoxField('radit_vesturiskos_datus', gettextCatalog.getString("Rādīt vēsturiskos datus", null, 'Eksperti'), true)
      },
      'FP_EKSP': {
        vards: textField('vards', gettextCatalog.getString("Vārds", null, 'Eksperta tiesību pieteikumi'), true),
        uzvards: textField('uzvards', gettextCatalog.getString("Uzvārds", null, 'Eksperta tiesību pieteikumi'), true),
        personas_kods: textField('personas_kods', gettextCatalog.getString("Personas kods", null, 'Eksperta tiesību pieteikumi')),
        dzimsanas_datums: dateField('dzimsanas_datums', gettextCatalog.getString("Dzimšanas datums", null, 'Eksperta tiesību pieteikumi')),
        iesniegsanas_datums: dateField('iesniegsanas_datums', gettextCatalog.getString("Iesniegšanas datums", null, 'Eksperta tiesību pieteikumi'), 'iesniegsanas_datums_no', 'iesniegsanas_datums_lidz'),
        sci_branch_lzp_id: choiceField('sci_branch_lzp_id', gettextCatalog.getString("Zinātnes nozare", null, 'Eksperta tiesību pieteikumi'), 'science_branch_full'),
        kla_ekspertu_komisija_id: codifierField('kla_ekspertu_komisija_id', gettextCatalog.getString("Ekspertu komisija", null, 'Eksperta tiesību pieteikumi'), 'expert_commission'),
        statuss: codifierField('statuss', gettextCatalog.getString("Pieteikuma statuss", null, 'Eksperta tiesību pieteikumi'), 'expert_application_status_short', true),
        lemuma_numurs: textField('lemuma_numurs', gettextCatalog.getString("Lēmuma numurs", null, 'Eksperta tiesību pieteikumi')),
        lemuma_datums: dateField('lemuma_datums', gettextCatalog.getString("Lēmuma pieņemšanas datums", null, 'Eksperta tiesību pieteikumi'), 'lemuma_datums_no', 'lemuma_datums_lidz'),
        show_archived: searchFields.show_archived('pieteikums_list', gettextCatalog.getString("Rādīt arhivētos pieteikumus", null, 'Eksperta tiesību pieteikumi'))
      },
      'FP_LEKSP': {
        statuss: codifierField('statuss', gettextCatalog.getString("Pieteikuma statuss", null, 'Eksperta tiesību pieteikumi'), 'expert_application_status', true)
      },
      'FP_KV': {
        nosaukums: textField('nosaukums', gettextCatalog.getString("Nosaukums", null, 'Komisiju vēlēšanas'), true)
      },
      'FP_LKVP': {
        statuss: codifierField('statuss', gettextCatalog.getString("Pieteikuma statuss", null, 'Komisiju vēlēšanas'), 'election_application_status', true)
      },
      'FP_EPAZ': {
        kods: textField('kods', gettextCatalog.getString("Paziņojuma kods", null, 'E-pasta paziņojumi')),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Paziņojuma nosaukums", null, 'E-pasta paziņojumi'), true)
      },
      'FP_PUK': {
        nosaukums: textField('nosaukums', gettextCatalog.getString("Komisijas nosaukums", null, 'Projektu uzraudzības komisija'), true)
      },
      'FP_BIK': {
        kods: textField('kods', gettextCatalog.getString("Izdevumu pozīcijas kods", null, 'Budžeta izdevumu klasifikators'), true),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Izdevumu pozīcija", null, 'Budžeta izdevumu klasifikators'), true)
      },
      'FP_ZIGP': {
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Gada pārskati'), true),
        zi_nosaukums: textField('zi_nosaukums', gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Gada pārskati'), true),
        gads: textField('gads', gettextCatalog.getString("Gads", null, 'Gada pārskati'), true),
        iesniegsanas_datums: dateField('iesniegsanas_datums', gettextCatalog.getString("Iesniegšanas datums", null, 'Gada pārskati'), 'iesniegsanas_datums_no', 'iesniegsanas_datums_lidz'),
        statuss: codifierField('statuss', gettextCatalog.getString("Pārskata statuss", null, 'Gada pārskati'), 'scientific_institution_report_status', true)
      },
      'FP_ZIPP': {
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Gada pārskati'), true),
        zi_nosaukums: textField('zi_nosaukums', gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Gada pārskati'), true),
        gads: textField('gads', gettextCatalog.getString("Gads", null, 'Gada pārskati'), true)
      },
      'FP_ZISN': {
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas numurs zinātnisko institūciju reģistrā", null, 'Institūciju novērtējumi'), true),
        zi_nosaukums: textField('zi_nosaukums', gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Institūciju novērtējumi'), true),
        novertejuma_datums_no: dateField('novertejuma_datums_no', gettextCatalog.getString("Novērtējuma periods (no)", null, 'Institūciju novērtējumi')),
        novertejuma_datums_lidz: dateField('novertejuma_datums_lidz', gettextCatalog.getString("Novērtējuma periods (līdz)", null, 'Institūciju novērtējumi')),
        iesniegsanas_datums: dateField('iesniegsanas_datums', gettextCatalog.getString("Iesniegšanas datums", null, 'Institūciju novērtējumi'), 'iesniegsanas_datums_no', 'iesniegsanas_datums_lidz'),
        saskanosanas_datums: dateField('saskanosanas_datums', gettextCatalog.getString("Saskaņošanas datums", null, 'Institūciju novērtējumi'), 'saskanosanas_datums_no', 'saskanosanas_datums_lidz'),
        statuss: codifierField('statuss', gettextCatalog.getString("Novērtējuma statuss", null, 'Institūciju novērtējumi'), 'institution_evaluation_status', true)
      },
      'FP_ZDP': {
        projekta_nosaukums: textField('projekta_nosaukums', gettextCatalog.getString("Projekta nosaukums", null, 'Projektu īstenošanas dokumentācija'), true),
        projekta_nr: textField('projekta_nr', gettextCatalog.getString("Projekta numurs", null, 'Projektu īstenošanas dokumentācija')),
        zi_nosaukums: textField('zi_nosaukums', gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Projektu īstenošanas dokumentācija'), true),
        veids: codifierField('veids', gettextCatalog.getString("Dokumenta veids", null, 'Projektu īstenošanas dokumentācija'), 'project_overview_type', true),
        statuss: codifierField('statuss', gettextCatalog.getString("Dokumenta statuss", null, 'Projektu īstenošanas dokumentācija'), 'project_overview_status'),
        uzraudzibas_komisija_id: choiceField('uzraudzibas_komisija_id', gettextCatalog.getString("Uzraudzības komisija", null, 'Projektu īstenošanas dokumentācija'), 'supervisory_boards'),
        parskata_datums_no: dateField('parskata_datums_no', gettextCatalog.getString("Pārskata datums (no)", null, 'Projektu īstenošanas dokumentācija')),
        parskata_datums_lidz: dateField('parskata_datums_lidz', gettextCatalog.getString("Pārskata datums (līdz)", null, 'Projektu īstenošanas dokumentācija')),
        //gads: textField('gads', gettextCatalog.getString("Pārskata gads", null, 'Projektu īstenošanas dokumentācija')),
        iesniegsanas_datums: dateField('iesniegsanas_datums', gettextCatalog.getString("Iesniegšanas datums", null, 'Projektu īstenošanas dokumentācija')),
        saskanosanas_datums: dateField('saskanosanas_datums', gettextCatalog.getString("Saskaņošanas datums", null, 'Projektu īstenošanas dokumentācija')),
        show_archived: searchFields.show_archived('projekta_parskats_list', gettextCatalog.getString("Rādīt arhivētos dokumentus", null, 'Projektu īstenošanas dokumentācija'))
      },
      'FP_ZIK': {
        reg_nr: textField('reg_nr', gettextCatalog.getString("Reģistrācijas nr. uzņēmuma reģistrā", null, 'Institūcijas')),
        pvn_nr: textField('pvn_nr', gettextCatalog.getString("PVN", null, 'Institūcijas')),
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas nr. ZI reģistrā", null, 'Institūcijas'), true),
        aii_reg_nr: textField('aii_reg_nr', gettextCatalog.getString("Reģistrācijas nr. augstākās izglītības iestāžu reģistrā", null, 'Institūcijas')),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Zinātniskās institūcijas nosaukums", null, 'Institūcijas'), true),
        nosaukums_en: textField('nosaukums_en', gettextCatalog.getString("Zinātniskās institūcijas nosaukums angļu valodā", null, 'Institūcijas')),
        isais_nosaukums: textField('isais_nosaukums', gettextCatalog.getString("Īsais nosaukums", null, 'Institūcijas'), true),
        show_archived: searchFields.show_archived('institucija_list', gettextCatalog.getString("Rādīt arhivētās zinātniskās institūcijas", null, 'Institūcijas')),
        deklaretais_dibinatajs: textField('deklaretais_dibinatajs', gettextCatalog.getString("Dibinātājs", null, 'Institūcijas')),
        juridiskais_statuss_id: codifierField('juridiskais_statuss_id', gettextCatalog.getString("Zinātniskās institūcijas juridiskais statuss", null, 'Institūcijas'), 'legal_status'),
        zi_tips_id: codifierField('zi_tips_id', gettextCatalog.getString("ZI tips", null, 'Institūcijas'), 'institution_types'),
        reg_datums: dateField('reg_datums', gettextCatalog.getString("Reģistrācijas datums (ZI reģistrā)", null, 'Institūcijas')),
        reg_apliecibas_datums: dateField('reg_apliecibas_datums', gettextCatalog.getString("Spēkā esošās reģistrācijas apliecības izdošanas datums", null, 'Institūcijas')),
        reorg_datums: dateField('reorg_datums', gettextCatalog.getString("Reorganizācijas datums", null, 'Institūcijas')),
        vaditajs_id: choiceField('vaditajs_id', gettextCatalog.getString("Vadītājs (vārds, uzvārds)", null, 'Institūcijas'), 'personal_choice'),
        vaditaja_amats: codifierField('vaditaja_amats', gettextCatalog.getString("Zinātniskās institūcijas vadītāja amats", null, 'Institūcijas'), 'zinatniskais_amata_tips'),
        vaditajs_vards: textField('vaditajs_vards', gettextCatalog.getString("Institūcijas vadītāja vārds", null, 'Institūcijas')),
        vaditajs_uzvards: textField('vaditajs_uzvards', gettextCatalog.getString("Institūcijas vadītāja uzvārds", null, 'Institūcijas')),
        vaditajs_personas_kods: textField('vaditajs_personas_kods', gettextCatalog.getString("Institūcijas vadītāja personas kods", null, 'Institūcijas')),
        majas_lapa: textField('majas_lapa', gettextCatalog.getString("Mājas lapas adrese", null, 'Institūcijas')),
        juridiska_adrese: textField('juridiska_adrese', gettextCatalog.getString("Juridiskā adrese", null, 'Institūcijas')),
        pakalpojumi: textField('pakalpojumi', gettextCatalog.getString("Pakalpojumi", null, 'Institūcijas')),
        epasts: textField('epasts', gettextCatalog.getString("Zinātniskās institūcijas e-pasta adrese", null, 'Institūcijas')),
        faksa_nr: textField('faksa_nr', gettextCatalog.getString("Zinātniskās institūcijas faksa numurs", null, 'Institūcijas')),
        telefona_nr: textField('telefona_nr', gettextCatalog.getString("Zinātniskās institūcijas tālruņa numurs", null, 'Institūcijas'))
      },
      'FP_BUS': {
        reg_nr: textField('reg_nr', gettextCatalog.getString("Reģistrācijas nr. uzņēmumu reģistrā", null, 'Komersanti'), true),
        pvn_nr: textField('pvn_nr', gettextCatalog.getString("PVN", null, 'Komersanti')),
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas nr. ZI reģistrā", null, 'Komersanti')),
        aii_reg_nr: textField('aii_reg_nr', gettextCatalog.getString("Reģistrācijas nr. augstākās izglītības iestāžu reģistrā", null, 'Komersanti')),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Komersanta nosaukums", null, 'Komersanti'), true),
        isais_nosaukums: textField('isais_nosaukums', gettextCatalog.getString("Komersanta īsais nosaukums", null, 'Komersanti'), true),
        show_archived: searchFields.show_archived('komersants_list', gettextCatalog.getString("Rādīt arhivētos komersantus", null, 'Komersanti')),
        juridiskais_statuss_id: codifierField('juridiskais_statuss_id', gettextCatalog.getString("Komersanta juridiskais statuss", null, 'Komersanti'), 'legal_status'),
        reg_datums: dateField('reg_datums', gettextCatalog.getString("Reģistrācijas datums (komersantu reģistrā)", null, 'Komersanti')),
        kontaktpersona_id: choiceField('kontaktpersona_id', gettextCatalog.getString("Kontaktpersona", null, 'Komersanti'), 'personal_choice'),
        kontaktpersona_vards: textField('kontaktpersona_vards', gettextCatalog.getString("Kontaktpersonas vārds", null, 'Komersanti')),
        kontaktpersona_uzvards: textField('kontaktpersona_uzvards', gettextCatalog.getString("Kontaktpersonas uzvārds", null, 'Komersanti')),
        kontaktpersona_personas_kods: textField('kontaktpersona_personas_kods', gettextCatalog.getString("Kontaktpersonas personas kods", null, 'Komersanti')),
        majas_lapa: textField('majas_lapa', gettextCatalog.getString("Komersanta mājas lapas adrese", null, 'Komersanti')),
        pakalpojumi: textField('pakalpojumi', gettextCatalog.getString("Pakalpojumi", null, 'Komersanti')),
        epasts: textField('epasts', gettextCatalog.getString("Komersanta e-pasta adrese", null, 'Komersanti')),
        faksa_nr: textField('faksa_nr', gettextCatalog.getString("Komersanta faksa numurs", null, 'Komersanti')),
        telefona_nr: textField('telefona_nr', gettextCatalog.getString("Komersanta tālruņa numurs", null, 'Komersanti'))
      },
      'FP_CRE': {
        institucija_nosaukums: textField('institucija_nosaukums', gettextCatalog.getString("Komersanta nosaukums", null, 'Projektu konkursi'), true),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Pētniecības projektu konkursa nosaukums", null, 'Projektu konkursi'), true),
        apraksts: textField('apraksts', gettextCatalog.getString("Pētniecības projektu konkursa apraksts", null, 'Projektu konkursi')),
        epasts: textField('epasts', gettextCatalog.getString("Pētniecības projektu konkursa epasts", null, 'Projektu konkursi')),
        talrunis: textField('talrunis', gettextCatalog.getString("Pētniecības projektu konkursa tālrunis", null, 'Projektu konkursi')),
        publicesanas_datums: dateField('publicesanas_datums', gettextCatalog.getString("Publicēšanas datums", null, 'Projektu konkursi')),
        pieteiksanas_datums_lidz: dateField('pieteiksanas_datums_lidz', gettextCatalog.getString("Datums, līdz kuram var pieteikties", null, 'Projektu konkursi'))
      },
      'FP_EQ': {
        nosaukums: textField('nosaukums', gettextCatalog.getString("Iekārtas nosaukums", null, 'Iekārtas'), true),
        razotajs: textField('razotajs', gettextCatalog.getString("Ražotājs", null, 'Iekārtas')),
        modelis: textField('modelis', gettextCatalog.getString("Modelis", null, 'Iekārtas')),
        zinatnes_nozare_id: choiceField('zinatnes_nozare_id', gettextCatalog.getString("Zinātnes nozare", null, 'Iekārtas'), 'science_branch_full'),
        iekartu_grupa_id: codifierField('iekartu_grupa_id', gettextCatalog.getString("Zinātnisko iekārtu grupa", null, 'Iekārtas'), 'equip_group', true),
        institucija_nos: textField('institucija_nos', gettextCatalog.getString("Institūcijas nosaukums", null, 'Iekārtas'), true),
        strukturvieniba: textField('strukturvieniba', gettextCatalog.getString("Institūcijas struktūrvienība", null, 'Iekārtas')),
        atslegvardi: textField('atslegvardi', gettextCatalog.getString("Atslēgvārdi", null, 'Iekārtas'), true),
        apraksts: textField('apraksts', gettextCatalog.getString("Apraksts", null, 'Iekārtas')),
        kontaktpersona: textField('kontaktpersona', gettextCatalog.getString("Kontaktpersona (vārds, uzvārds, amats)", null, 'Iekārtas')),
        kontaktpersonas_epasts: textField('kontaktpersonas_epasts', gettextCatalog.getString("Kontaktpersonas epasta adrese", null, 'Iekārtas')),
        kontaktpersonas_talrunis: textField('kontaktpersonas_talrunis', gettextCatalog.getString("Kontaktpersonas tālrunis", null, 'Iekārtas')),
        iegades_gads: textField('iegades_gads', gettextCatalog.getString("Iegādes gads", null, 'Iekārtas'))
      },
      'FP_HEI': {
        reg_nr: textField('reg_nr', gettextCatalog.getString("Reģistrācijas nr. uzņēmumu reģistrā", null, 'AII')),
        pvn_nr: textField('pvn_nr', gettextCatalog.getString("PVN", null, 'AII')),
        zi_reg_nr: textField('zi_reg_nr', gettextCatalog.getString("Reģistrācijas nr. ZI reģistrā", null, 'AII')),
        aii_reg_nr: textField('aii_reg_nr', gettextCatalog.getString("Reģistrācijas nr. augstākās izglītības iestāžu reģistrā", null, 'AII'), true),
        nosaukums: textField('nosaukums', gettextCatalog.getString("Augstākās izglītības iestādes nosaukums", null, 'AII'), true),
        isais_nosaukums: textField('isais_nosaukums', gettextCatalog.getString("Īsais nosaukums", null, 'AII'), true),
        show_archived: searchFields.show_archived('aii_list', gettextCatalog.getString("Rādīt arhivētās augstākās izglītības iestādes", null, 'AII')),
        reg_datums: dateField('reg_datums', gettextCatalog.getString("Reģistrācijas datums (augstākās izglītības iestāžu reģistrā)", null, 'AII')),
        vaditajs_id: choiceField('vaditajs_id', gettextCatalog.getString("Vadītājs (vārds, uzvārds)", null, 'AII'), 'personal_choice'),
        vaditaja_amats: codifierField('vaditaja_amats', gettextCatalog.getString("Augstākās izglītības iestādes vadītāja amats", null, 'AII'), 'zinatniskais_amata_tips'),
        vaditajs_vards: textField('vaditajs_vards', gettextCatalog.getString("Augstākās izglītības iestādes vadītāja vārds", null, 'AII')),
        vaditajs_uzvards: textField('vaditajs_uzvards', gettextCatalog.getString("Augstākās izglītības iestādes vadītāja uzvārds", null, 'AII')),
        vaditajs_personas_kods: textField('vaditajs_personas_kods', gettextCatalog.getString("Augstākās izglītības iestādes vadītāja personas kods", null, 'AII')),
        majas_lapa: textField('majas_lapa', gettextCatalog.getString("Mājas lapas adrese", null, 'AII')),
        pakalpojumi: textField('pakalpojumi', gettextCatalog.getString("Pakalpojumi", null, 'AII')),
        epasts: textField('epasts', gettextCatalog.getString("Augstākās izglītības iestādes e-pasta adrese", null, 'AII')),
        telefona_nr: textField('telefona_nr', gettextCatalog.getString("Augstākās izglītības iestādes tālruņa numurs", null, 'AII'))
      },
      'FP_ZKK': {
        personals_vards: textField('personals_vards', gettextCatalog.getString("Personāls (Vārds)", null, 'Personāls'), true),
        personals_uzvards: textField('personals_uzvards', gettextCatalog.getString("Personāls (Uzvārds)", null, 'Personāls'), true),
        personals_dzimums: codifierField('personals_dzimums', gettextCatalog.getString("Dzimums", null, 'Personāls'), 'gender'),
        personals_personas_kods: textField('personals_personas_kods', gettextCatalog.getString("Personāls (Personas kods)", null, 'Personāls')),
        dzimsanas_datums: dateField('dzimsanas_datums', gettextCatalog.getString("Dzimšanas datums", null, 'Personāls')),
        kvalifikacijas_veids_id: codifierField('kvalifikacijas_veids_id', gettextCatalog.getString("Izglītības veids vai līmenis", null, 'Personāls'), 'qualification_types'),
        kvalifikacijas_zinatnes_nozare_id: choiceField('kvalifikacijas_zinatnes_nozare_id', gettextCatalog.getString("Izglītības zinātnes nozare", null, 'Personāls'), 'science_branch_full'),
        personals_pilsoniba_id: codifierField('personals_pilsoniba_id', gettextCatalog.getString("Valstiskā piederība", null, 'Personāls'), 'countries'),
        personals_statuss_valsti_id: codifierField('personals_statuss_valsti_id', gettextCatalog.getString("Statuss valstī", null, 'Personāls'), 'pers_status'),
        scopus_nr: textField('scopus_nr', gettextCatalog.getString("Zinātniskā darbinieka ID", null, 'Personāls')),
        lzp_eksperts_datums_no: dateField('lzp_eksperts_datums_no', gettextCatalog.getString("LZP Eksperta statuss (no)", null, 'Personāls')),
        lzp_eksperts_datums_lidz: dateField('lzp_eksperts_datums_lidz', gettextCatalog.getString("LZP Eksperta statuss (līdz)", null, 'Personāls')),
        orcid: textField('orcid', gettextCatalog.getString("ORCID", null, 'Personāls')),
        wos_researcher_nr: textField('wos_researcher_nr', gettextCatalog.getString("WoS ResearcherID", null, 'Personāls')),
        zin_darba_vieta_amats_id: codifierField('zin_darba_vieta_amats_id', gettextCatalog.getString("Akadēmiskais amats zinātniskajā institūcijā", null, 'Personāls'), 'zin_izglitibas_amata_tips'),
        zin_darba_vieta_amata_veids_id: codifierField('zin_darba_vieta_amata_veids_id', gettextCatalog.getString("Amata veids (zinātniskajā institūcijā)", null, 'Personāls'), 'work_types'),
        zin_institucija_id: choiceField('zin_institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'Personāls'), 'institutions'),
        zin_darba_vieta_institucija: textField('zin_darba_vieta_institucija', gettextCatalog.getString("Zinātniskā institūcija (Teksts)", null, 'Personāls'), true),
        show_archived: searchFields.show_archived('zin_personals_list', gettextCatalog.getString("Rādīt arhivētās personas", null, 'Personāls')),
        ir_ari_akademiskais_personals: checkBoxField('ir_ari_akademiskais_personals', gettextCatalog.getString("Ir arī akadēmiskais personāls", null, 'Personāls')),
        ir_h2020_eksperts: checkBoxField('h2020_eksperts', gettextCatalog.getString("Horizon 2020 eksperts", null, 'Personāls')),
        ir_lzp_eksperts: checkBoxField('ir_lzp_eksperts', gettextCatalog.getString("LZP eksperts", null, 'Personāls')),
        amata_ievelesanas_datums: dateField('amata_ievelesanas_datums', gettextCatalog.getString("Ievēlēšanas datums", null, 'Personāls'), 'zin_darba_vieta_amata_ievelesanas_datums_no', 'zin_darba_vieta_amata_ievelesanas_datums_lidz'),
        amata_stasanas_datums: dateField('amata_stasanas_datums', gettextCatalog.getString("Amatā stāšanās datums", null, 'Personāls'), 'zin_darba_vieta_amata_stasanas_datums_no', 'zin_darba_vieta_amata_stasanas_datums_lidz'),
        amata_beigu_termins: dateField('amata_beigu_termins', gettextCatalog.getString("Amata beigu termiņš", null, 'Personāls'), 'zin_darba_vieta_amata_beigu_termins_no', 'zin_darba_vieta_amata_beigu_termins_lidz'),
        zin_darba_vieta_ir_amatu_parklasanas: checkBoxField('zin_darba_vieta_ir_amatu_parklasanas', gettextCatalog.getString("Vairāki amati vienlaicīgi (zinātniskajā institūcijā)", null, 'Personāls')),
        zin_darba_vieta_zinatnes_nozare_id: choiceField('zin_darba_vieta_zinatnes_nozare_id', gettextCatalog.getString("Zin. amata zinātnes nozare", null, 'Personāls'), 'science_branch_full'),
        zin_darba_vieta_lzp_ekspertu_komisija: textField('zin_darba_vieta_lzp_ekspertu_komisija', gettextCatalog.getString("LZP ekspertu komisija", null, 'Personāls')),
        zin_darba_vieta_lzp_eksperts_atslegvardi: textField('zin_darba_vieta_lzp_eksperts_atslegvardi', gettextCatalog.getString("LZP ekspertu atslēgvārdi", null, 'Personāls')),
        zin_darba_vieta_h2020_eksperts_darbibas_joma: textField('zin_darba_vieta_h2020_eksperts_darbibas_joma', gettextCatalog.getString("Horizon 2020 eksperta joma", null, 'Personāls')),
        h2020_eksperts_datums_no: dateField('h2020_eksperts_datums_no', gettextCatalog.getString("Horizon 2020 eksperta statuss no", null, 'Personāls')),
        h2020_eksperts_datums_lidz: dateField('h2020_eksperts_datums_lidz', gettextCatalog.getString("Horizon 2020 eksperta statuss līdz", null, 'Personāls')),
        radit_vesturiskos_datus: checkBoxField('radit_vesturiskos_datus', gettextCatalog.getString("Rādīt vēsturiskos datus", null, 'Personāls'), true)
      },
      'FP_IMP': {
        institucija_id: choiceField('institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'Datu apstiprināšana'), 'institutions'),
        iesniedzejs: textField('iesniedzejs', gettextCatalog.getString('Iesniedzējs', null, 'Datu apstiprināšana')),
        tips: codifierField('tips', gettextCatalog.getString("Datu tips", null, 'Datu apstiprināšana'), 'import_data_type', true),
        augsupielades_laiks: dateField('augsupielades_laiks', gettextCatalog.getString("Augšupielādes laiks", null, 'Datu apstiprināšana')),
        izpildes_laiks: dateField('izpildes_laiks', gettextCatalog.getString("Izpildes laiks", null, 'Datu apstiprināšana')),
        xls_filename: textField('xls_filename', gettextCatalog.getString('XLSX datnes nosaukums', null, 'Datu apstiprināšana'))
      },
      'FP_XIMP': {
        institucija_id: choiceField('institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'XLSX imports'), 'institutions'),
        iesniedzejs: textField('iesniedzejs', gettextCatalog.getString('Iesniedzējs', null, 'XLSX imports')),
        tips: codifierField('tips', gettextCatalog.getString("Datu tips", null, 'XLSX imports'), 'import_data_type', true),
        statuss: codifierField('statuss', gettextCatalog.getString("Statuss", null, 'XLSX imports'), 'import_status'),
        augsupielades_laiks: dateField('augsupielades_laiks', gettextCatalog.getString("Augšupielādes laiks", null, 'XLSX imports')),
        izpildes_laiks: dateField('izpildes_laiks', gettextCatalog.getString("Izpildes laiks", null, 'XLSX imports')),
        xls_filename: textField('xls_filename', gettextCatalog.getString('XLSX datnes nosaukums', null, 'XLSX imports')),
        komentars: textField('komentars', gettextCatalog.getString('Komentāri', null, 'XLSX imports'))
      },
      'FP_ZDR': {
        nosaukums: textField('nosaukums', gettextCatalog.getString('Zinātniskās darbības rezultāta nosaukums', null, 'Rezultāti'), true),
        zin_rezultati_ar_vienadiem_nosaukumiem: checkBoxField('zin_rezultati_ar_vienadiem_nosaukumiem', gettextCatalog.getString("Zinātniskās darbības rezultāti ar līdzīgiem nosaukumiem", null, 'Rezultāti')),
        veids: codifierField('veids', gettextCatalog.getString("Zinātniskās darbības rezultāta veids", null, 'Rezultāti'), 'result_type', true),
        zin_rezultati_no_citam_institucijam: searchFields.zin_rezultati_no_citam_institucijam('zin_rezultats_list', gettextCatalog.getString("Rādīt citu institūciju publikācijas", null, 'Rezultāti')),
        zin_institucija_id: choiceField('zin_institucija_id', gettextCatalog.getString("Zinātniskā institūcija", null, 'Rezultāti'), 'institutions'),
        institucija_nos: textField('institucija_nos', gettextCatalog.getString("Zinātniskās institūcijas/organizācijas nosaukums", null, 'Rezultāti'), true),
        projekta_nosaukums: textField('projekta_nosaukums', gettextCatalog.getString('Projekta nosaukums', null, 'Rezultāti')),
        personals_personas_kods: textField('personals_personas_kods', gettextCatalog.getString("Autora personas kods", null, 'Rezultāti')),
        personals_vards: textField('personals_vards', gettextCatalog.getString("Autora vārds", null, 'Rezultāti')),
        personals_uzvards: textField('personals_uzvards', gettextCatalog.getString("Autora uzvārds", null, 'Rezultāti')),
        autora_institucija_id: choiceField('autora_institucija_id', gettextCatalog.getString('Autora zinātniskā institūcija', null, 'Rezultāti'), 'institutions'),
        autora_institucija_nos: textField('autora_institucija_nos', gettextCatalog.getString("Autora zinātniskās institūcijas nosaukums", null, 'Rezultāti')),
        created_date: dateField('created_date', gettextCatalog.getString("Pievienošanas datums", null, 'Rezultāti')),
        last_modified_date: dateField('last_modified_date', gettextCatalog.getString("Labošanas datums", null, 'Rezultāti')),
        zrva_tips_id: codifierField('zrva_tips_id', gettextCatalog.getString("Zinātniskās publikācijas tips", null, 'Rezultāti'), 'article_type'),
        zrva_izdosanas_gads: textField('zrva_izdosanas_gads', gettextCatalog.getString('Zinātniskā raksta izdošanas gads', null, 'Rezultāti')),
        zurnals: textField('zurnals', gettextCatalog.getString('Žurnāls', null, 'Rezultāti')),
        doi: textField('doi', gettextCatalog.getString('DOI', null, 'Rezultāti')),
        isbn13: textField('isbn13', gettextCatalog.getString('ISBN 13', null, 'Rezultāti')),
        issn: textField('issn', gettextCatalog.getString('ISSN', null, 'Rezultāti')),
        scopus_url: textField('scopus_url', gettextCatalog.getString('Saite uz Scopus', null, 'Rezultāti')),
        wos_url: textField('wos_url', gettextCatalog.getString('Saite uz Web of Science', null, 'Rezultāti')),
        sejums: textField('sejums', gettextCatalog.getString('Sējums', null, 'Rezultāti')),
        avota_url: textField('avota_url', gettextCatalog.getString('Saite uz publikācijas avotu', null, 'Rezultāti')),
        atslegvardi: textField('atslegvardi', gettextCatalog.getString('Atslēgvārdi', null, 'Rezultāti')),
        anotacija: textField('anotacija', gettextCatalog.getString('Anotācija', null, 'Rezultāti')),
        zrvb_tips_id: codifierField('zrvb_tips_id', gettextCatalog.getString("Intelektuālā īpašuma tips", null, 'Rezultāti'), 'intellectual_property_type'),
        zrvb_veids_id: codifierField('zrvb_veids_id', gettextCatalog.getString("Intelektuālā īpašuma veids", null, 'Rezultāti'), 'intellectual_property_form'),
        registracijas_nr: textField('registracijas_nr', gettextCatalog.getString('Reģistrācijas nr.', null, 'Rezultāti')),
        registra_nosaukums: textField('registra_nosaukums', gettextCatalog.getString('Reģistra nosaukums', null, 'Rezultāti')),
        registracijas_datums: dateField('registracijas_datums', gettextCatalog.getString("Reģistrācijas datums no", null, 'Rezultāti')),
        registracija_lidz: dateField('registracija_lidz', gettextCatalog.getString("Reģistrācijas datums līdz", null, 'Rezultāti')),
        intel_info_url: textField('intel_info_url', gettextCatalog.getString('Saite uz intelektuālā īpašuma avotu', null, 'Rezultāti')),
        zrvc_pasakums_veids_id: codifierField('zrvc_pasakums_veids_id', gettextCatalog.getString("Pasākuma veids", null, 'Rezultāti'), 'event_type'),
        zrvc_merogs_id: codifierField('zrvc_merogs_id', gettextCatalog.getString("Pasākuma mērogs", null, 'Rezultāti'), 'event_scale'),
        konference_no: dateField('konference_no', gettextCatalog.getString("Konference no", null, 'Rezultāti')),
        konference_lidz: dateField('konference_lidz', gettextCatalog.getString("Konference līdz", null, 'Rezultāti')),
        zrvc_norises_valsts_id: codifierField('zrvc_norises_valsts_id', gettextCatalog.getString("Pasākuma norises valsts", null, 'Rezultāti'), 'countries'),
        norises_pilseta: textField('norises_pilseta', gettextCatalog.getString('Pasākuma norises pilsēta', null, 'Rezultāti')),
        konferences_org: textField('konferences_org', gettextCatalog.getString('Pasākuma organizētājs', null, 'Rezultāti')),
        apraksts: textField('apraksts', gettextCatalog.getString('Pasākuma apraksts', null, 'Rezultāti'))
      },
      'FP_AUD': {
        lietotajs_id: textField('lietotajs_id', gettextCatalog.getString("Lietotāja ID", null, 'Darbību vēsture')),
        lietotajvards: textField('lietotajvards', gettextCatalog.getString("Lietotājvārds", null, 'Darbību vēsture'), true),
        pers_code: textField('pers_code', gettextCatalog.getString("Personas kods", null, 'Darbību vēsture'), true),
        entity_id: textField('entity_id', gettextCatalog.getString("Ieraksta ID", null, 'Darbību vēsture')),
        entity: textField('entity', gettextCatalog.getString("Skata nosaukums", null, 'Darbību vēsture'), true),
        ip_address: textField('ip_address', gettextCatalog.getString("IP adrese", null, 'Darbību vēsture')),
        time: dateField('time', gettextCatalog.getString("Darbības laiks", null, 'Darbību vēsture'), 'datums_no', 'datums_lidz'),
        action: codifierField('action', gettextCatalog.getString("Darbība", null, 'Darbību vēsture'), 'history_action', true)
      }
    };
    dataOp.advancedSearchObject = advancedSearchObject;
  };

  dataOp.initAdvancedSearchObject();

  dataOp.ArchiveData = function (type, data) {
    $rootScope.showLoader = true;
    var req = {
      method: 'POST',
      url: '/data/' + type + '_archive',
      data: data,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.UnarchiveData = function (type, data) {
    $rootScope.showLoader = true;
    var req = {
      method: 'POST',
      url: '/data/' + type + '_unarchive',
      data: data,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.advancedSearch = function (key) {
    var deferred = $q.defer();
    var req = {
      method: 'GET',
      url: '/query_params/' + dataOp.getGridConfig(key).url,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $http(req).then(function (response) {
      var asoInit = advancedSearchObject[key];
      var allowedFields = response.data;
      var aso = {};
      angular.forEach(asoInit, function (val, key) {
        if (allowedFields[key]) {
          aso[key] = val;
        }
      });
      deferred.resolve(aso);
    }, function (response) {
      deferred.resolve({});
    });
    return deferred.promise;
  };

  dataOp.translateObject = function (model, dataObject) {
    var returnObj = angular.copy(dataObject);
    var is_admin = null;

    if ($rootScope.currentUserRights.hasOwnProperty('lietotajs_editable_admin')) {
      is_admin = true;
    }

    if (is_admin) {
      returnObj.is_admin = is_admin;
    }

    var deferred = $q.defer();
    deferred.resolve(returnObj);
    return deferred.promise;
  };

  dataOp.mapDbCols = function (langObj, dataObj, fromFrontToDb) {
    if (fromFrontToDb) {
      var tmpLangObj = dataOp.translateToDB(langObj);
      langObj = tmpLangObj;
    }

    for (var key in dataObj) {
      if (typeof langObj[key] != "undefined") {
        if (key != langObj[key]) {
          dataObj[langObj[key]] = dataObj[key];
          delete dataObj[key];

          if (Object.prototype.toString.call(dataObj[langObj[key]]) == '[object Array]' || typeof dataObj[langObj[key]] == 'Array') {
            for (var i = 0; dataObj[langObj[key]].length > i; i++) {
              dataOp.mapDbCols(langObj, dataObj[langObj[key]][i]);
            }
          }

          if (Object.prototype.toString.call(dataObj[langObj[key]]) == '[object Object]') {
            dataOp.mapDbCols(langObj, dataObj[langObj[key]]);
          }
        }
      }
    }
  };

  dataOp.translateToDB = function (langObj) {
    var tmpLangObj = {};
    var i = 0;

    for (var key in langObj) {
      i++;

      if (key != langObj[key]) {
        tmpLangObj[langObj[key]] = key;
      } else {
        tmpLangObj[key] = key;
      }

      if (Object.keys(langObj).length == i) {
        return tmpLangObj;
      }
    }
  };

  dataOp.concatParams = function (params) {
    var query = '';

    if (params) {
      angular.forEach(params, function (val, key) {
        if (val && val != null) {
          if (query.length <= 0) {
            query = query + '?';
          } else {
            query = query + '&';
          }

          query = query + key + '=' + val;
        }
      });
    }

    return query;
  };

  dataOp.listDefault = function (viewName, params) {
    $rootScope.showLoader = true;
    var reqUrl = '/data/' + viewName + dataOp.concatParams(params);
    var ld = {};
    var req = {
      method: 'GET',
      url: reqUrl,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response.data;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveListDefault = function (listData, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(listData);
    return dataOp.saveGroup(viewName, saveObj).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      return response;
    });
  };

  dataOp.getTranslationsOrigByLanguage = function (lang) {
    $rootScope.showLoader = true;
    var translations = {};
    var req = {
      method: 'GET',
      url: 'assets/translations/' + lang + '.json',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response.data;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.getCodificator = function (id, params) {
    var getId;
    var mapper;
    var query = {};
    var searchCol;
    var textVal;
    var deferred;

    switch (id) {
      case "countries":
        getId = "VALSTS";
        break;

      case "countries2":
        getId = "VALSTS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "pers_status":
        getId = "STATUSS_VALSTI";
        break;

      case "komisija_id":
        getId = "EKSPERTU_KOMISIJA";
        break;

      case "ekspertu_komisija":
        getId = "EKSPERTU_KOMISIJA_B";
        break;

      case "vieda_specializacija":
        getId = "VIEDA_SPECIALIZACIJU";
        break;

      case "work_types":
        getId = "AMATA_VEIDS";
        break;

      case "institution_types":
        getId = "ZINATNISKAS_INSTITUCIJAS_TIPS";
        break;

      case "contact_info_types":
        getId = "KONTAKTINFO_VEIDS";
        break;

      case "project_statuses":
        getId = "PROJEKTA_STATUSS";
        break;

      case "project_category":
        getId = "PROJEKTA_KATEGORIJA";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "project_types":
        getId = "PROJEKTA_VEIDS";
        break;

      case "research_work_types":
        getId = "PETNIECIBAS_DARBIBAS_RAKSTURS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "overview_types":
        getId = "PARSKATA_VEIDS";
        break;

      case "zinatniskais_amata_tips":
        getId = "ZINATNISKAIS_AMATA_TIPS";
        break;

      case "zin_izglitibas_amata_tips":
        getId = "ZIN_IZGLITIBAS_AMATA_TIPS";
        break;

      case "akademiskais_amata_tips":
        getId = "AKADEMISKAIS_AMATA_TIPS";
        break;

      case "article_type":
        getId = "RAKSTA_SASNIEGUMA_TIPS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "intellectual_property_type":
        getId = "INTEL_IPASUMA_SASNIEGUMA_TIPS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "intellectual_property_form":
        getId = "INTEL_IPASUMA_SASNIEGUMA_VEIDS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "event_scale":
        getId = "PASAKUMA_MEROGS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "event_type":
        getId = "PASAKUMA_VEIDS";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "report_type":
        getId = "ATSKAITES_VEIDS";
        break;

      case "legal_status":
        getId = "JURIDISKAIS_STATUSS";
        break;

      case "equip_group":
        getId = "IEKARTU_GRUPA";
        break;

      case "b_using_legal_status":
        getId = "TELPU_IZM_JUR_STATUSS";
        break;

      case "qualification_types":
        getId = "KVALIFIKACIJAS_VEIDS";
        break;

      case "expert_commission":
        getId = "EKSPERTU_KOMISIJA";
        break;

      case "overview_period":
        getId = "PARSKATA_PERIODS";
        break;

      case "gender":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'vīrietis',
            title: gettextCatalog.getString('Vīrietis', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'sieviete',
            title: gettextCatalog.getString('Sieviete', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "import_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'INICIALIZĒTS',
            title: gettextCatalog.getString('Inicializēts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IZPILDĪTS',
            title: gettextCatalog.getString('Izpildīts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'ATCELTS',
            title: gettextCatalog.getString('Atcelts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "result_type":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: '1',
            title: gettextCatalog.getString('Zinātniskais raksts, monogrāfija', null, 'Iebūvētie klasifikatori')
          }, {
            id: '2',
            title: gettextCatalog.getString('Intelektuālais īpašums', null, 'Iebūvētie klasifikatori')
          }, {
            id: '3',
            title: gettextCatalog.getString('Ar zinātni saistīts pasākums', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "import_data_type":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'Personāls',
            title: gettextCatalog.getString('Personāls', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'Slodzes dati',
            title: gettextCatalog.getString('Slodzes dati', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'Projekti',
            title: gettextCatalog.getString('Zinātniskās darbības projekti', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'Zinātniskie rezultāti',
            title: gettextCatalog.getString('Zinātniskie rezultāti', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'Zinātniskās iekārtas',
            title: gettextCatalog.getString('Zinātniskās iekārtas', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'Starptautisko datubāzu identifikatori',
            title: gettextCatalog.getString('Starptautisko datubāzu identifikatori', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "expert_application_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'NODOTS',
            title: gettextCatalog.getString('Nodots izskatīšanai LZP komisijai', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'NORAIDITS',
            title: gettextCatalog.getString('Noraidīts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'AKCEPTETS',
            title: gettextCatalog.getString('Apstiprināts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "expert_application_status_short":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'NODOTS',
            title: gettextCatalog.getString('Nodots izskatīšanai LZP komisijai', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'NORAIDITS',
            title: gettextCatalog.getString('Noraidīts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'AKCEPTETS',
            title: gettextCatalog.getString('Apstiprināts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "election_application_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'NORAIDITS',
            title: gettextCatalog.getString('Noraidīts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'AKCEPTETS',
            title: gettextCatalog.getString('Apstiprināts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "scientific_institution_report_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'PUBLICETS',
            title: gettextCatalog.getString('Publicēts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'APSTIPRINATS',
            title: gettextCatalog.getString('Apstiprināts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "scientific_institution_report_part_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'SAGATAVOTS',
            title: gettextCatalog.getString('Sagatavots', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "project_overview_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'PV_SASKANOSANA',
            title: gettextCatalog.getString('Saskaņošanā pie projekta vadītāja', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'SASKANOSANA',
            title: gettextCatalog.getString('Saskaņošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IZSKATITS',
            title: gettextCatalog.getString('Izskatīts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'APSTIPRINATS',
            title: gettextCatalog.getString('Apstiprināts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "project_overview_type":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'LS_KALKULACIJA',
            title: gettextCatalog.getString('Līgumsummas kalkulācija', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'ZIN_GR_SASTAVS',
            title: gettextCatalog.getString('Zinātniskās grupas sastāvs', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'FIN_PARSKATS',
            title: gettextCatalog.getString('Finanšu pārskats', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'FIN_PLANS',
            title: gettextCatalog.getString('Finansēšanas plāns', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'SAT_ATSKAITE',
            title: gettextCatalog.getString('Saturiskā atskaite', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "institution_evaluation_status":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'SAGATAVOSANA',
            title: gettextCatalog.getString('Sagatavošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'SASKANOSANA',
            title: gettextCatalog.getString('Saskaņošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'SASKANOTS',
            title: gettextCatalog.getString('Saskaņots', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IESNIEGTS',
            title: gettextCatalog.getString('Iesniegts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'ADM_APSTIPRINATS',
            title: gettextCatalog.getString('Administratīvi apstiprināts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'ES_SASKANOSANA',
            title: gettextCatalog.getString('Ekspertu saraksts saskaņošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'ES_APSTIPRINATS',
            title: gettextCatalog.getString('Ekspertu saraksts apstiprināts', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IP_SASKANOSANA',
            title: gettextCatalog.getString('Individuālie pārskati saskaņošanā', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'IP_SASKANOTI',
            title: gettextCatalog.getString('Individuālie pārskati saskaņoti', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'KV_SAGATAVOTS',
            title: gettextCatalog.getString('Sagatavots konsolidētais vērtējums', null, 'Iebūvētie klasifikatori')
          }, {
            id: 'PUBLICETS',
            title: gettextCatalog.getString('Publicēts', null, 'Iebūvētie klasifikatori')
          }]
        });
        return deferred.promise;

      case "history_action":
        deferred = $q.defer();
        deferred.resolve({
          data: [{
            id: 'create',
            title: 'create'
          }, {
            id: 'save',
            title: 'save'
          }, {
            id: 'view',
            title: 'view'
          }, {
            id: 'list',
            title: 'list'
          }, {
            id: 'remove',
            title: 'remove'
          }, {
            id: 'login',
            title: 'login'
          }, {
            id: 'api',
            title: 'api'
          }, {
            id: 'logout',
            title: 'logout'
          }]
        });
        return deferred.promise;

      case "research_category":
        getId = "PETNIECIBAS_KATEGORIJA";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;
    }

    if (params) {
      mapper = dataOp.translateToDB(langObj.choice);
      angular.forEach(params, function (searchVal, searchKey) {
        switch (searchKey) {
          case 'offset':
            query[searchKey] = searchVal;
            break;

          case 'limit':
            query[searchKey] = searchVal;
            break;

          case 'term':
            if (searchVal) {
              query[searchCol] = searchVal;
            }

            break;

          case '_count':
            query[searchKey] = searchVal;
            break;

          default:
            if (mapper[searchKey]) {
              query[mapper[searchKey]] = searchVal;
            }

            break;
        }
      });
    }

    var req = {
      method: 'GET',
      params: query,
      url: '/data/kodifikatora_ieraksts_choice?kods=' + getId,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    var defer = $q.defer();
    var promises = [];
    promises.push($http(req));
    req.params = {
      _count: true
    };
    promises.push($http(req));
    return $q.all(promises).then(function (dataArr) {
      for (var i = 0; dataArr[0].data.length > i; i++) {
        dataOp.mapDbCols(langObj.choice, dataArr[0].data[i]);

        if (dataArr[0].data[i][textVal]) {
          dataArr[0].data[i].text = dataArr[0].data[i][textVal];
        }
      }

      return {
        data: dataArr[0].data,
        total: dataArr[1].data.total_count
      };
    });
  };

  dataOp.saveGroup = function (url, data) {
    var promises = [];
    angular.forEach(data, function (d) {
      var req = {
        method: 'POST',
        url: '/data/' + url,
        data: d,
        headers: {
          "Content-Type": 'application/json; charset=utf-8'
        }
      };
      var result = $http(req);
      promises.push(result);
    });
    return $q.all(promises);
  };

  dataOp.importXlsx = function (xlsxObj, type) {
    var saveObj = angular.copy(xlsxObj);
    var req = {
      method: 'POST',
      url: '/data/xlsx/' + type,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getChoices = function (id, params) {
    var getId;
    var mapper;
    var query = {};
    var searchCol;
    var textVal;

    switch (id) {
      case "sso_full":
        getId = "sso_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "scientific_institution_works":
        getId = "zin_darba_vieta_choice";
        searchCol = 'amats';
        textVal = 'amats';
        break;

      case "business_choice":
        getId = "komersants_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "scientific_institutions":
        getId = "zin_institucija_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "scientific_institutions_ctx_full":
        getId = "zin_institucija_ctx_all_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "scientific_institutions_ctx_scopus":
        getId = "zin_institucija_ctx_scopus_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "scientific_institutions_ctx_wos":
        getId = "zin_institucija_ctx_wos_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "aii_choice":
        getId = "aii_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "institutions":
        getId = "institucija_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "projects":
        getId = "projekts_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "vpp_projects":
        getId = "vpp_projekts_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "supervisory_boards":
        getId = "uzraudzibas_komisija_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "science_branch_full":
        getId = "zinatnes_nozares_all_choice";
        break;

      case "science_branch":
        getId = "zinatnes_nozares_choice";
        break;

      case "science_root_branch":
        getId = "zinatnes_pamatnozares_choice";
        break;

      case "science_branch_full_lzp":
        getId = "zinatnes_nozares_all_lzp_choice";
        break;

      case "scientific_personal":
        getId = "zi_personals_choice";
        searchCol = 'pilns_vards';
        textVal = 'pilns_vards';
        break;

      case "roles_choice":
        getId = "loma_choice";
        searchCol = 'nosaukums';
        textVal = 'title';
        break;

      case "sub_roles_choice":
        getId = "apaksloma_choice";
        break;

      case "personal_choice":
        getId = "personals_choice";
        break;

      case "lietotajs_choice":
        getId = "lietotajs_choice";
        break;

      case "committee_elections":
        getId = "komisiju_velesanas_choice";
        break;
    }

    if (id == "roles_choice" && !$rootScope.currentUserRights.hasOwnProperty(getId)) {
      var deferred = $q.defer();
      deferred.resolve(false);
      return deferred.promise;
    }

    if (params) {
      mapper = dataOp.translateToDB(langObj.choice);
      angular.forEach(params, function (searchVal, searchKey) {
        switch (searchKey) {
          case 'offset':
            query[searchKey] = searchVal;
            break;

          case 'limit':
            query[searchKey] = searchVal;
            break;

          case 'term':
            if (searchVal) {
              query[searchCol] = searchVal;
            }

            break;

          case '_count':
            query[searchKey] = searchVal;
            break;

          case 'id':
            query.id = searchVal;
            break;

          default:
            if (mapper[searchKey]) {
              query[mapper[searchKey]] = searchVal;
            }

            break;
        }
      });
    }

    var req = {
      method: 'GET',
      params: query,
      url: '/data/' + getId,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    var defer = $q.defer();
    var promises = [];
    promises.push($http(req));
    req.params = {
      _count: true
    };
    promises.push($http(req));
    return $q.all(promises).then(function (dataArr) {
      for (var i = 0; dataArr[0].data.length > i; i++) {
        dataOp.mapDbCols(langObj.choice, dataArr[0].data[i]);

        if (dataArr[0].data[i][textVal]) {
          dataArr[0].data[i].text = dataArr[0].data[i][textVal];
        }
      }

      return {
        data: dataArr[0].data,
        total: dataArr[1].data.total_count
      };
    });
  };

  dataOp.getUserById = function (id) {
    $rootScope.showLoader = true; // checking for permission so regular user dont see admin fields

    var viewName = 'lietotajs';
    var is_admin = null;

    if ($rootScope.currentUserRights !== null && $rootScope.currentUserRights.hasOwnProperty('lietotajs_editable_admin')) {
      viewName = 'lietotajs_editable_admin';
      is_admin = true;
    }

    var user = {};
    var req = {
      method: 'GET',
      url: '/data/' + viewName + '/' + id,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;

      if (response.data) {
        if (is_admin) {
          response.data.is_admin = is_admin;
        }

        return response.data;
      }
    }, function (response) {
      $rootScope.showLoader = false;
      return authOp.getCurrentUserData().then(function (data) {
        return dataOp.translateObject('FP_LP', data.data).then(function (data) {
          delete data.lomas;
          return data;
        });
      });
    });
  };

  dataOp.saveUserPassword = function (userPass) {
    var saveObj = angular.copy(userPass);
    var viewName = 'paroles_maina_lietotajs';

    if ($rootScope.currentUserRights.hasOwnProperty('lietotajs_editable_admin') && saveObj.id != $rootScope.currentUser.id) {
      viewName = 'paroles_maina_admin';
    }

    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      return response;
    }, function (response) {
      throw response;
    });
  };

  dataOp.saveScientificOverviewById = function (scientific_overview, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(scientific_overview);
    dataOp.patchData(saveObj, viewName);
    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      timeout: 60000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.patchData = function (data, viewName) {
    //console.log('Processing ' + viewName);
    var md = $rootScope.metadata[viewName]; //console.log(md);

    if (md && md.fields) {
      angular.forEach(md.fields, function (fld) {
        if (fld.type && fld.name) {
          if (fld.type == 'date') {
            //console.log('Processing ' + viewName + '-> ' + fld.name);
            if (data[fld.name]) {
              data[fld.name] = $filter('date')(data[fld.name], "yyyy-MM-dd");
            }
          } else if (fld.type != 'string' && fld.type != 'long' && fld.type != 'decimal' && fld.type != 'int' && fld.type != 'boolean' && $rootScope.metadata[fld.type] && data[fld.name]) {
            if (angular.isArray(data[fld.name])) {
              angular.forEach(data[fld.name], function (dTmp) {
                dataOp.patchData(dTmp, fld.type);
              });
            } else if (angular.isObject(data[fld.name])) {
              dataOp.patchData(data[fld.name], fld.type);
            }
          }
        }
      });
    }
  };

  dataOp.saveExpertApplicationById = function (expert_application, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(expert_application);
    dataOp.patchData(saveObj, viewName);
    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveElectionApplicationById = function (election_application, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(election_application);
    dataOp.patchData(saveObj, viewName);
    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveScientificInstitutionReportById = function (report, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(report);
    dataOp.patchData(saveObj, viewName);
    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveScientificInstitutionEvaluationById = function (ev, viewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(ev);
    dataOp.patchData(saveObj, viewName);
    var req = {
      method: 'POST',
      url: '/data/' + viewName,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.voteCommitteeElections = function (velesanas_id, kandidats_id) {
    $rootScope.showLoader = true;
    var req = {
      method: 'POST',
      url: '/data/pub_velesanas_balsot_action',
      data: {
        velesanas_id: velesanas_id,
        kandidats_id: kandidats_id
      },
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (res) {
      $rootScope.showLoader = false;
      return res;
    }, function (err) {
      $rootScope.showLoader = false;
      throw err;
    });
  };

  dataOp.getDefaultById = function (id, viewName, params) {
    $rootScope.showLoader = true;
    var reqUrl = '/data/' + viewName + '/' + id + dataOp.concatParams(params);
    var req = {
      method: 'GET',
      url: reqUrl,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response.data;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveDefault = function (obj, viewName, normalize) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(obj);

    if (normalize) {
      dataOp.patchData(saveObj, viewName);
    }

    var reqUrl = '/data/' + viewName;
    var req = {
      method: 'POST',
      url: reqUrl,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.api = function (api_name, data) {
    $rootScope.showLoader = true;
    return $http({
      method: 'POST',
      url: "/data/".concat(api_name),
      data: data,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    }).then(function (resp) {
      $rootScope.showLoader = false;
      return resp;
    })["catch"](function (e) {
      $rootScope.handleError(e);
      throw e; // lai izsaucējam neliktos, ka viss ir labi
    });
  };

  dataOp.saveScientificResultById = function (scientificResult, baseViewName) {
    $rootScope.showLoader = true;
    var saveObj = angular.copy(scientificResult);
    dataOp.patchData(saveObj, baseViewName + scientificResult.veids);
    var req = {
      method: 'POST',
      url: '/data/' + baseViewName + scientificResult.veids,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.confirmOrCancelImport = function (importObj, type, id) {
    var saveObj = angular.copy(importObj);
    var req = {
      method: 'POST',
      url: '/data/' + type + '_import/' + id,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.saveNotificationById = function (notifObj) {
    var saveObj = angular.copy(notifObj);
    var req = {
      method: 'POST',
      url: '/data/pazinojums_' + saveObj.id,
      data: saveObj,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getAttachmentsByIdNT = function (id, view, idField) {
    $rootScope.showLoader = true;
    var pielikumi = {};
    var req = {
      method: 'GET',
      url: '/data/' + view + '_pielikumi?' + idField + '_id=' + id,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req).then(function (response) {
      $rootScope.showLoader = false;
      return response.data;
    }, function (response) {
      $rootScope.showLoader = false;
      throw response;
    });
  };

  dataOp.saveAttachmentsByIdNT = function (attachObj, view) {
    var saveObj = angular.copy(attachObj);
    dataOp.patchData(saveObj, view + '_pielikumi');
    return dataOp.saveGroup(view + '_pielikumi', saveObj).then(function (response) {
      return response;
    }, function (response) {
      return response;
    });
  };

  dataOp.checkPmlpPersonByPersonCode = function (pk) {
    var req = {
      method: 'GET',
      url: '/data/pmlp/person_by_person_code/' + pk,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getViisData = function () {
    var req = {
      method: 'GET',
      url: '/data/viis_dv',
      timeout: 10000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getViisDataStats = function () {
    var req = {
      method: 'GET',
      url: '/data/stats_viis_dv',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getViisEduData = function (pk) {
    var reqUrl = '/data/viis_izgl';

    if (pk) {
      reqUrl = '/data/viis_izgl?pk=' + pk;
    }

    var req = {
      method: 'GET',
      url: reqUrl,
      timeout: 10000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getViisEduDataStats = function () {
    var req = {
      method: 'GET',
      url: '/data/stats_viis_izgl',
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getScopusData = function (fieldValue, fieldName, personalsId, institucijaId, gads) {
    var reqUrl = '/data/scopus_sci_res?1=1';

    if (fieldValue) {
      reqUrl = reqUrl + '&val=' + fieldValue;
    }

    if (fieldName) {
      reqUrl = reqUrl + '&field=' + fieldName;
    }

    if (personalsId) {
      reqUrl = reqUrl + '&personals_id=' + personalsId;
    }

    if (institucijaId) {
      reqUrl = reqUrl + '&institucija_id=' + institucijaId;
    }

    if (gads) {
      reqUrl = reqUrl + '&gads=' + gads;
    }

    var req = {
      method: 'GET',
      url: reqUrl,
      timeout: 60000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.getWosData = function (fieldValue, fieldName, personalsId, institucijaId, gads) {
    var reqUrl = '/data/wos_sci_res?1=1';

    if (fieldValue) {
      reqUrl = reqUrl + '&val=' + fieldValue;
    }

    if (fieldName) {
      reqUrl = reqUrl + '&field=' + fieldName;
    }

    if (personalsId) {
      reqUrl = reqUrl + '&personals_id=' + personalsId;
    }

    if (institucijaId) {
      reqUrl = reqUrl + '&institucija_id=' + institucijaId;
    }

    if (gads) {
      reqUrl = reqUrl + '&gads=' + gads;
    }

    var req = {
      method: 'GET',
      url: reqUrl,
      timeout: 60000,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    return $http(req);
  };

  dataOp.exportData = function (gridId, fileType, checkedRows, total, searchParams) {
    var firstKey = true;
    var fileExt = fileType;

    if (fileType === 'xlsx') {
      fileExt = 'xml';
    }

    if (!Object.keys(checkedRows).length) {
      ngDialog.openConfirm({
        template: 'shared/data/tpls/exportDialog.html',
        className: 'ngdialog-theme-default dialog400',
        data: {
          count: total,
          fileType: fileType,
          fileExt: fileExt,
          url: langObj.gridUrlConstants[gridId].exportUrl,
          fileName: langObj.gridUrlConstants[gridId].exportTitle,
          searchParams: searchParams,
          module: gridId
        }
      }).then(function () {});
    }
  };

  dataOp.prepareQueryParams = function (params, method) {
    var query_params = {};

    if (params.search) {
      angular.forEach(params.search, function (searchVal, searchKey) {
        if (searchVal !== '' && searchKey != 'search') {
          if (searchVal.value) {
            query_params[searchKey] = searchVal.value;
          } else {
            if (searchVal.date_from) {
              query_params[advancedSearchObject[method][searchKey].dateFrom] = searchVal.date_from;
            }

            if (searchVal.date_till) {
              query_params[advancedSearchObject[method][searchKey].dateTill] = searchVal.date_till;
            }

            if (searchVal.range_from) {
              query_params[advancedSearchObject[method][searchKey].rangeFrom] = searchVal.range_from;
            }

            if (searchVal.range_till) {
              query_params[advancedSearchObject[method][searchKey].rangeTill] = searchVal.range_till;
            }
          }
        } else if (searchKey == 'search') {
          query_params.search = searchVal;
        }
      });
    }

    var orderBy = 'id';

    if (params.order_by && params.order_by != orderBy) {
      orderBy = params.order_by;
    }

    query_params.sort = (params.order_dir == 'desc' ? '~' : '') + [orderBy];
    query_params.limit = params.limit;
    query_params.offset = params.offset;
    return query_params;
  };

  function loadGridData(url, params, method, callbackFunc) {
    var query_params = dataOp.prepareQueryParams(params, method);
    var req = {
      method: 'GET',
      params: query_params,
      url: '/data/' + url,
      headers: {
        "Content-Type": 'application/json; charset=utf-8',
        'AuthToken': $cookies.get("session-id")
      }
    };
    return $http(req).then(function (response) {
      if (callbackFunc) {
        response.data = callbackFunc(response.data);
      } // count params


      delete query_params.sort;
      delete query_params.limit;
      delete query_params.offset;
      var countReq = {
        method: 'GET',
        params: query_params,
        url: '/data/' + url + '?_count',
        headers: {
          "Content-Type": 'application/json; charset=utf-8',
          'AuthToken': $cookies.get("session-id")
        }
      };
      return $http(countReq).then(function (countResponse) {
        var export_link = null;
        var export_title = null;
        var grid_title = null;

        if (langObj.gridUrlConstants[method]) {
          if (langObj.gridUrlConstants[method].exportUrl) {
            export_link = langObj.gridUrlConstants[method].exportUrl;
          }

          if (langObj.gridUrlConstants[method].exportTitle) {
            export_title = langObj.gridUrlConstants[method].exportTitle;
          }

          if (langObj.gridUrlConstants[method].gridTitle) {
            grid_title = langObj.gridUrlConstants[method].gridTitle;
          }
        }

        if (langObj.gridUrlConstants[method] && langObj.gridUrlConstants[method].exportUrl) {
          export_link = langObj.gridUrlConstants[method].exportUrl;
        }

        var returnData = {
          rows: response.data,
          total_count: parseInt(countResponse.data.total_count, 10),
          export_link: export_link,
          file_name: export_title,
          grid_title: grid_title
        };
        return returnData;
      }, function (response) {
        return response;
      });
    });
  }

  dataOp.get = function (view, id) {
    var req = {
      method: 'GET',
      url: '/data/' + view + '/' + id,
      headers: {
        "Content-Type": 'application/json; charset=utf-8'
      }
    };
    $rootScope.showLoader = true;
    return $http(req).then(function (res) {
      $rootScope.showLoader = false;
      return res.data;
    }, function (err) {
      $rootScope.showLoader = false;
      throw err;
    });
  };

  dataOp.getContext = function () {
    var user = $rootScope.u;

    if (user.context.indexOf('zi_') != -1) {
      return {
        id: parseInt(user.context.substring(3), 10),
        text: user.contextName
      };
    } else {
      return -1;
    }
  };

  dataOp.alterSciId = function (data) {
    for (var i = 0; data.length > i; i++) {
      data[i].open_id = data[i].id;
      data[i].id = data[i].zin_darba_vieta_id;
    }

    return data;
  };

  dataOp.alterAcadId = function (data) {
    for (var i = 0; data.length > i; i++) {
      data[i].open_id = data[i].id;
      data[i].id = data[i].akad_darba_vieta_id;
    }

    return data;
  };

  dataOp.getData = function (method, params) {
    var data = [];
    var total = 0;

    if (method == 'FP_ZKK') {
      return loadGridData(dataOp.getGridConfig(method).url, params, method, dataOp.alterSciId);
    } else if (method == 'FP_APK') {
      return loadGridData(dataOp.getGridConfig(method).url, params, method, dataOp.alterAcadId);
    } else {
      return loadGridData(dataOp.getGridConfig(method).url, params, method);
    }
  };

  dataOp.getGridConfig = function (method) {
    switch (method) {
      case "FP_FPK":
        return {
          url: 'projekts_list',
          title: gettextCatalog.getString('Projekti', null, 'Projekti')
        };

      case "FP_BUS":
        return {
          url: 'komersants_list',
          title: gettextCatalog.getString('Komersanti', null, 'Komersanti')
        };

      case "FP_CRE":
        return {
          url: 'ligumpetijums_list',
          title: gettextCatalog.getString('Līgumpētījumi', null, 'Projektu konkursi')
        };

      case "FP_EQ":
        return {
          url: 'iekarta_list',
          title: gettextCatalog.getString('Zinātnisko iekārtu datubāze', null, 'Iekārtas')
        };

      case "FP_HEI":
        return {
          url: 'aii_list',
          title: gettextCatalog.getString('Augstākās izglītības iestādes', null, 'AII')
        };

      case 'FP_ZKK':
        return {
          url: 'zin_personals_list',
          title: gettextCatalog.getString('Zinātniskie darbinieki', null, 'Personāls')
        };

      case 'FP_ZNK':
        return {
          url: 'zinatnes_nozares_list',
          title: gettextCatalog.getString('Zinātnisko nozaru klasifikators', null, 'Zinātņu nozares')
        };

      case 'FP_ZIK':
        return {
          url: 'institucija_list',
          title: gettextCatalog.getString('Zinātniskās institūcijas', null, 'Institūcijas')
        };

      case 'FP_APK':
        return {
          url: 'akad_personals_list',
          title: gettextCatalog.getString('Akadēmiskais personāls', null, 'Ak. personāls')
        };

      case 'FP_P':
        return {
          url: 'personals_list',
          title: gettextCatalog.getString('Personāls', null, 'Personāls')
        };

      case 'FP_AUTH':
        return {
          url: 'autori_list',
          title: gettextCatalog.getString('Zinātniskās darbības rezultātu autori', null, 'Personāls')
        };

      case 'FP_EKS':
        return {
          url: 'lzp_eksperti_list',
          title: gettextCatalog.getString('Eksperti', null, 'Eksperti')
        };

      case 'FP_EKSP':
        return {
          url: 'pieteikums_list',
          title: gettextCatalog.getString('LZP eksperta tiesību pieteikumi', null, 'Eksperta tiesību pieteikumi')
        };

      case 'FP_LEKSP':
        return {
          url: 'pieteikumsl_list',
          title: gettextCatalog.getString('Mani LZP eksperta tiesību pieteikumi', null, 'Eksperta tiesību pieteikumi')
        };

      case 'FP_KV':
        return {
          url: 'komisiju_velesanas_list',
          title: gettextCatalog.getString('LZP ekspertu komisiju vēlēšanas', null, 'Komisiju vēlēšanas')
        };

      case 'FP_LKVP':
        return {
          url: 'velesanu_pieteikumsl_list',
          title: gettextCatalog.getString('Mani LZP ekspertu komisiju vēlēšanu pieteikumi', null, 'Komisiju vēlēšanas')
        };

      case 'FP_EPAZ':
        return {
          url: 'epasta_pazinojums_list',
          title: gettextCatalog.getString('Epasta paziņojumi', null, 'E-pasta paziņojumi')
        };

      case 'FP_PUK':
        return {
          url: 'uzraudzibas_komisija_list',
          title: gettextCatalog.getString('Projektu uzraudzības komisijas', null, 'Projektu uzraudzības komisijas')
        };

      case 'FP_BIK':
        return {
          url: 'budzeta_izdevumu_klasifikacija_list',
          title: gettextCatalog.getString('Budžeta izdevumu klasifikators', null, 'Budžeta izdevumu klasifikators')
        };

      case 'FP_ZIGP':
        return {
          url: 'institucijas_gada_parskats_list',
          title: gettextCatalog.getString('Zinātnisko institūciju gada pārskati', null, 'Gada pārskati')
        };

      case 'FP_ZIPP':
        return {
          url: 'institucijas_publ_parskats_list',
          title: gettextCatalog.getString('Zinātnisko institūciju publiskie pārskati', null, 'Gada pārskati')
        };

      case 'FP_ZISN':
        return {
          url: 'institucijas_novertejums_list',
          title: gettextCatalog.getString('Zinātnisko institūciju starptautiskie novērtējumi', null, 'Institūciju novērtējumi')
        };

      case 'FP_C':
        return {
          url: 'kodifikators_list',
          title: gettextCatalog.getString('Kodifikatori', null, 'Kodifikatori')
        };

      case 'FP_ZDP':
        return {
          url: 'projekta_parskats_list',
          title: gettextCatalog.getString('Projektu īstenošanas dokumentācija', null, 'Projektu īstenošanas dokumentācija')
        };

      case 'FP_LP':
        return {
          url: 'lietotajs_list',
          title: gettextCatalog.getString('Lietotāji', null, 'Lietotāji')
        };

      case 'FP_LPF':
        return {
          url: 'lietotajs_finder',
          title: gettextCatalog.getString('Lietotāji', null, 'Lietotāji')
        };

      case 'FP_RC':
        return {
          url: 'loma_list',
          title: gettextCatalog.getString('Lomas', null, 'Lomas')
        };

      case 'FP_IMP':
        return {
          url: 'imports_list',
          title: gettextCatalog.getString('Ielādētie dati', null, 'Datu apstiprināšana')
        };

      case 'FP_XIMP':
        return {
          url: 'xlsx_imports_list',
          title: gettextCatalog.getString('Ielādes vēsture', null, 'XLSX imports')
        };

      case 'FP_ZDR':
        return {
          url: 'zin_rezultats_list',
          title: gettextCatalog.getString('Zinātniskās darbības rezultāti', null, 'Rezultāti')
        };

      case 'FP_AUD':
        return {
          url: 'history',
          title: gettextCatalog.getString('Darbību vēsture', null, 'Darbību vēsture')
        };

      case 'FP_SSO':
        return {
          url: 'sso',
          title: gettextCatalog.getString('Ārējās sistēmas', null, 'Ārējās sistēmas')
        };

      case 'FP_UMT':
        return {
          url: 'lietotaja_materiali_list',
          title: gettextCatalog.getString('Sistēmas lietotāja materiāli', null, 'Lietotāja materiāli')
        };

      case 'FP_NTF':
        return {
          url: 'pazinojums',
          title: 'pazinojums'
        };

      case 'FP_LZP':
        return {
          url: 'zinatnes_nozare_lzp_list',
          title: gettextCatalog.getString('LZP Zinātnisko nozaru klasifikators', null, 'Zinātņu nozares')
        };
    }
  };

  return dataOp;
}]);
angular.module('myApp').directive('zinatnesNozare', function ($injector, $parse) {
  var config;
  config = {
    restrict: 'E',
    replace: true,
    templateUrl: 'shared/directives/tpl/branch.directive.html',
    scope: {
      dto: '=ngModel',
      disabled: '=ngDisabled',
      editMode: '='
    },
    controller: 'ZinatnesNozaresController as ctl'
  };
  return config;
}).controller('ZinatnesNozaresController', function (dataService, $scope) {
  var ctl;
  ctl = this;
  ctl.tmp_nozare = undefined;
  ctl.used = {};
  ctl.nozares_assoc = {};
  dataService.getChoices('science_branch_full').then(function (response) {
    ctl.nozares = response.data;
    angular.forEach(response.data, function (n) {
      ctl.nozares_assoc[n.id] = n.title;
    });
    ctl.update_used();
  });

  ctl.removeNozare = function (d) {
    _.pull($scope.dto, d);

    return ctl.update_used();
  };

  ctl.addNozare = function (zinatnes_nozare_id) {
    var elem;

    if (!zinatnes_nozare_id) {
      return;
    }

    elem = {
      zinatnes_nozare_id: zinatnes_nozare_id
    };

    if (!_.find($scope.dto, elem)) {
      $scope.dto.push(elem);
      return ctl.update_used();
    }
  };

  ctl.addNozareFromSelect = function () {
    ctl.addNozare(ctl.tmp_nozare);
    return ctl.tmp_nozare = undefined;
  };

  ctl.update_used = function () {
    angular.forEach(ctl.used, function (e, k) {
      ctl.used[k] = false;
    });
    angular.forEach($scope.dto, function (e) {
      ctl.used[e.zinatnes_nozare_id] = true;
    });
  };
});
angular.module('myApp').directive('zinatnesNozareNt', function ($injector, $parse) {
  var config;
  config = {
    restrict: 'E',
    replace: true,
    templateUrl: 'shared/directives/tpl/branchNt.directive.html',
    scope: {
      dto: '=ngModel',
      disabled: '=ngDisabled',
      editMode: '='
    },
    controller: 'ZinatnesNozaresNtController as ctl'
  };
  return config;
}).controller('ZinatnesNozaresNtController', function (dataService, $scope) {
  var ctl;
  ctl = this;
  ctl.tmp_nozare = undefined;
  ctl.used = {};
  ctl.nozares_assoc = {};
  dataService.getChoices('science_branch_full').then(function (response) {
    ctl.nozares = response.data;
    angular.forEach(response.data, function (n) {
      ctl.nozares_assoc[n.id] = n.title;
    });
    ctl.update_used();
  });

  ctl.removeNozare = function (d) {
    _.pull($scope.dto, d);

    return ctl.update_used();
  };

  ctl.addNozare = function (zinatnes_nozare_id) {
    var elem;

    if (!zinatnes_nozare_id) {
      return;
    }

    elem = {
      zinatnes_nozare_id: zinatnes_nozare_id
    };

    if (!_.find($scope.dto, elem)) {
      $scope.dto.push(elem);
      return ctl.update_used();
    }
  };

  ctl.addNozareFromSelect = function () {
    ctl.addNozare(ctl.tmp_nozare);
    return ctl.tmp_nozare = undefined;
  };

  ctl.update_used = function () {
    angular.forEach(ctl.used, function (e, k) {
      ctl.used[k] = false;
    });
    angular.forEach($scope.dto, function (e) {
      ctl.used[e.zinatnes_nozare_id] = true;
    });
  };
});
angular.module('myApp').directive('codifMultiple', function ($injector, $parse) {
  var config;
  config = {
    restrict: 'E',
    replace: true,
    templateUrl: 'shared/directives/tpl/codif.directive.html',
    scope: {
      'dto': '=ngModel',
      'codif': '=',
      'recIdAttr': '=',
      'disabled': '=ngDisabled',
      'editMode': '='
    },
    controller: 'codifMultipleController as ctl'
  };
  return config;
}).controller('codifMultipleController', function (dataService, $scope) {
  var ctl;
  ctl = this;
  ctl.tmp_codif = undefined;
  ctl.used = {};
  ctl.codifs_assoc = {};
  dataService.getCodificator($scope.codif).then(function (response) {
    ctl.codifs = response.data;
    angular.forEach(response.data, function (n) {
      ctl.codifs_assoc[n.id] = n.title;
    });
    ctl.update_used();
  });

  ctl.removeCodif = function (d) {
    _.pull($scope.dto, d);

    return ctl.update_used();
  };

  ctl.addCodif = function (codif_id) {
    var elem;

    if (!codif_id) {
      return;
    }

    elem = {};
    elem[$scope.recIdAttr] = codif_id;

    if (!_.find($scope.dto, elem)) {
      $scope.dto.push(elem);
      return ctl.update_used();
    }
  };

  ctl.addCodifFromSelect = function () {
    ctl.addCodif(ctl.tmp_codif);
    return ctl.tmp_codif = undefined;
  };

  ctl.update_used = function () {
    angular.forEach(ctl.used, function (e, k) {
      ctl.used[k] = false;
    });
    angular.forEach($scope.dto, function (e) {
      ctl.used[e[$scope.recIdAttr]] = true;
    });
  };
});
angular.module('myApp').config(function ($provide) {
  return $provide.decorator('$state', function ($delegate, $rootScope) {
    $delegate.orig_go = $delegate.go;

    $delegate.go = function (to, params, opts) {
      opts = opts || {};
      opts.context = $rootScope.u.context;
      return $delegate.orig_go(to, params, opts);
    };

    return $delegate;
  });
});
angular.module('myApp').directive('date', function ($rootScope, $state, gettext, gettextCatalog, $filter) {
  var dateString = gettext("Datums");
  var invalidDateYear;
  var invalidDateMonth;
  var invalidDateDay;
  var invalidDate;

  function tillDate(modelValue, tillDateVal, $element, ngModel) {
    ngModel.$setValidity('tillDate', true);

    if (modelValue !== '' && typeof modelValue !== 'undefined' && modelValue !== null && tillDateVal !== '' && typeof tillDateVal !== 'undefined' && tillDateVal !== null) {
      if (modelValue > tillDateVal) {
        ngModel.$setValidity('tillDate', false);
      }
    }
  }

  function fromDate(modelValue, fromDateVal, $attrs, $element, ngModel) {
    ngModel.$setValidity('fromDate', true);

    if ($attrs.dateErrorBaloon) {
      $element.parent().find('.baloonWrap.directiveMsg.fromDate').remove();
    } else {
      $element.parent().nextAll('.errorMsg.directiveMsg').remove();
    }

    if (modelValue !== '' && typeof modelValue !== 'undefined' && modelValue !== null && fromDateVal !== '' && typeof fromDateVal !== 'undefined' && fromDateVal !== null) {
      if (modelValue < fromDateVal) {
        invalidDateYear = fromDateVal.substr(0, 4); // Year

        invalidDateMonth = fromDateVal.substr(5, 2); // Month

        invalidDateDay = fromDateVal.substr(8, 2); // Day

        invalidDate = invalidDateDay + '.' + invalidDateMonth + '.' + invalidDateYear;
        ngModel.$setValidity('fromDate', false);

        if ($attrs.dateErrorBaloon) {
          $element.parent().find('.errorBalloon').after('<div class="baloonWrap directiveMsg fromDate">' + gettextCatalog.getString('Nedrīkst būt agrāks par {{ dateString }}!</sic>', {
            dateString: invalidDate
          }));
        } else {
          $element.parent().after('<span class="errorMsg directiveMsg">' + gettextCatalog.getString('Nedrīkst būt agrāks par {{ dateString }}!</span>', {
            dateString: invalidDate
          }));
        }

        return false;
      } else {
        return true;
      }
    }
  }

  function validateFromDate(modelValue, fromDateVal, $attrs, $element, ngModel) {
    if (fromDateVal.indexOf("||") > -1) {
      var fromDateArr = fromDateVal.split("||");

      for (var i = 0; fromDateArr.length > i; i++) {
        if (!fromDateArr[i]) {
          continue;
        }

        var isValid = fromDate(modelValue, fromDateArr[i], $attrs, $element, ngModel);

        if (!isValid) {
          break;
        }
      }
    } else {
      fromDate(modelValue, fromDateVal, $attrs, $element, ngModel);
    }
  }

  function link($scope, $element, $attrs, ngModel) {
    if (!ngModel) {
      return;
    }

    var modelValue;
    $scope.$watch($attrs.ngModel, function (nv, ov) {
      modelValue = $filter('date')(ngModel.$modelValue, 'yyyy-MM-dd');

      if ($attrs.tillDate) {
        tillDate(modelValue, $attrs.tillDate, $element, ngModel);
      }

      if ($attrs.fromDate) {
        validateFromDate(modelValue, $attrs.fromDate, $attrs, $element, ngModel);
      }
    });
    $attrs.$observe('tillDate', function () {
      tillDate(modelValue, $attrs.tillDate, $element, ngModel);
    });
    $attrs.$observe('fromDate', function () {
      validateFromDate(modelValue, $attrs.fromDate, $attrs, $element, ngModel);
    });
  }

  return {
    restrict: 'A',
    require: '?ngModel',
    link: link
  };
});
angular.module('myApp').directive('exportGrid', function ($rootScope, $state, $filter, dataService) {
  function setHref($attrs) {
    if ($attrs.exportAllowAll && $attrs.exportAllowAll == "true") {
      ext = $attrs.exportFile;

      if ($attrs.exportSearchParams !== null && $attrs.exportSearchParams !== '' && typeof $attrs.exportSearchParams !== 'undefined' && JSON.parse($attrs.exportSearchParams)) {
        var query_params = {};
        var advancedSearchObject = dataService.getAdvancedSearchObject($attrs.exportModel);
        angular.forEach(JSON.parse($attrs.exportSearchParams), function (searchVal, searchKey) {
          if (searchVal.value) {
            query_params[advancedSearchObject[searchKey].alias] = searchVal.value;
          } else {
            if (searchVal.date_from) {
              query_params[advancedSearchObject[searchKey].dateFrom] = searchVal.date_from;
            }

            if (searchVal.date_till) {
              query_params[advancedSearchObject[searchKey].dateTill] = searchVal.date_till;
            }
          }
        });

        if ($.isEmptyObject(query_params) === false) {
          var query_string = $.param(query_params);
          $attrs.$set('href', '/data/export_' + ext + '/' + $attrs.exportGrid + '?' + query_string);
        } else {
          $attrs.$set('href', '/data/export_' + ext + '/' + $attrs.exportGrid);
        }
      } else {
        $attrs.$set('href', '/data/export_' + ext + '/' + $attrs.exportGrid);
      }
    } else {
      var idStr = $filter('cocnat_export_ids')(JSON.parse($attrs.exportIds), $attrs.exportModel);
      var ext = null;
      ext = $attrs.exportFile;

      if (typeof idStr !== "undefined" && idStr.length) {
        $attrs.$set('href', '/data/export_' + ext + '/' + $attrs.exportGrid + idStr);
      } else {
        $attrs.$set('href', '');
      }
    }
  }

  function link($scope, $element, $attrs) {
    $attrs.$observe('exportGrid', function () {
      setHref($attrs);
    });
    $attrs.$observe('exportFile', function () {
      setHref($attrs);
    });
    $attrs.$observe('exportSearchParams', function () {
      setHref($attrs);
    });
    $attrs.$observe('exportIds', function () {
      setHref($attrs);
    });
  }

  return {
    restrict: 'A',
    replace: true,
    link: link,
    scope: {
      exportGrid: "@exportGrid",
      exportFile: "@exportFile",
      exportIds: "@exportIds",
      exportModel: "@exportModel",
      exportSearchParams: "@exportSearchParams"
    }
  };
});
angular.module('myApp').directive('form', function ($timeout) {
  function focus(element, attrs) {
    $timeout(function () {
      if (attrs.focusInput == 'true') {
        var formElem = element;
        var searchScope;
        var focusElement;
        searchScope = formElem.find('.tab-pane.active');
        focusElement = searchScope.find('.form-control').first(); // fix for login

        if (typeof focusElement.attr('type') == "undefined") {
          searchScope = $('#login-form');
          focusElement = searchScope.find('.form-control').first();
        }

        if (focusElement.attr('type') == 'text') {
          focusElement.focus();
        }
      }
    });
  }

  function link(scope, element, attrs) {
    $timeout(function () {
      attrs.$observe('focusInput', function () {
        if (attrs.focusInput == 'true') {
          focus(element, attrs);
        }
      });
    });
    $timeout(function () {
      if (attrs.focusInput == 'true') {
        focus(element, attrs);
      }
    });
  }

  return {
    link: link,
    restrict: 'E'
  };
});
angular.module('myApp').directive('formEditBtn', function ($rootScope) {
  function link($scope, $element, $attrs, ngModel) {
    $scope.$watch('formEditBtn', function () {
      if ($scope.formEditBtn) {
        $rootScope.checkUnsavedData = false;
      } else {
        $rootScope.checkUnsavedData = true;
      }
    });
    $element.click(function () {
      $rootScope.checkUnsavedData = false;
    });
  }

  return {
    restrict: 'A',
    link: link,
    scope: {
      formEditBtn: '=formEditBtn'
    }
  };
});
/**
 * @name formAccessibility
 * @description Direktīva personāla formu objektīvo rediģēšanas ierobežojumi apstrāde
 * @param  {boolean} is_delete_relevant Vai atļauts dzēst objektu
 * @param  {boolean} is_update_relevant Vai atļauts labot objektu
 *
 * @returns {HTML} manipulācijas disabled / hide un pretēji
 */
angular.module('myApp').directive('formEditDisable', ['$filter', formAccessibility]);

function formAccessibility($filter) {
  return {
    restrict: 'A',
    scope: {
      formEditDisable: '=',
      formEditData: '='
    },
    link: function link($scope, $element, $attributes) {
      // Watch table data inside block
      var tableDataWatcher = $scope.$watch(function () {
        // Reach last row of table - enable lock mode
        if ($scope.formEditData.slodze) {
          if ($element.find('table tr').length - 1 === $scope.formEditData.slodze.length) {
            formState.locked();
            formState.lockedWithUpdateRelevant();
            formState.lockedWithDeleteRelevant(); // Clear watcher for performance improment

            tableDataWatcher();
          } else if ($scope.formEditData.slodze.length === 0) {
            // Clear watcher when none row of element
            tableDataWatcher();
          }
        }
      });
      var formState = {
        editable: function editable() {
          $element.find('input, select').removeAttr('disabled');
          $element.find('.select2-wrap').removeClass('select2-disabled');
        },
        editableWithUpdateRelvant: function editableWithUpdateRelvant() {
          $element.find('.update-relevant-disable').removeAttr('disabled');
          $element.find('.update-relevant-hide').show();
        },
        editableWithDeleteRelvant: function editableWithDeleteRelvant() {
          $element.find('.delete-relevant-hide').show();
        },
        locked: function locked() {
          $element.find('input, select').prop('disabled', 'disabled');
          $element.find('.select2-wrap').addClass('select2-disabled');
        },
        lockedWithUpdateRelevant: function lockedWithUpdateRelevant() {
          formState.locked();
          $element.find('.update-relevant-disable').prop('disabled', 'disabled');
          $element.find('.update-relevant-hide').hide();
        },
        lockedWithDeleteRelevant: function lockedWithDeleteRelevant() {
          $element.find('.delete-relevant-hide').hide();
        }
      }; // Watch form toogle changes - editable / locked

      $scope.$watch('formEditDisable', function (formEditDisable) {
        // Check is_update_relevant
        if (formEditDisable === false) {
          // On edit mode
          formState.editable(); // Relevant update

          if (typeof $scope.formEditData.is_update_relevant !== "undefined" && $scope.formEditData.is_update_relevant === true) {
            formState.editableWithUpdateRelvant();
          } else {
            formState.lockedWithUpdateRelevant();
          } // Relevant delete


          if (typeof $scope.formEditData.is_delete_relevant !== "undefined" && $scope.formEditData.is_delete_relevant === true) {
            formState.editableWithDeleteRelvant();
          } else {
            formState.lockedWithDeleteRelevant();
          }
        } else {
          // On lock mode
          formState.locked();
          formState.lockedWithUpdateRelevant();
          formState.lockedWithDeleteRelevant();
        }
      });
    }
  };
}
angular.module('myApp').directive('cPattern', function ($rootScope, $state, gettextCatalog) {
  function getMessageWrapp(attrs, text) {
    switch (attrs.displayError) {
      case 'baloon':
        return '<div class="errorBalloon errorMsg" ng-messages="projectStaffForm.planota_posma_dd_vsaoi.$error">' + '<div class="baloonWrap">' + '<div translate>' + text + ' </div>' + '</div>' + '</div>';

      default:
        return '<span class="errorMsg">' + text + ' </span>';
    }
  }

  function checkLength(ngModel, $element, $attrs, nv, valLength, allow_shorter) {
    ngModel.$setValidity('pattenr', true);

    if (nv && nv.toString().length < valLength && !allow_shorter) {
      $element.addClass('has-error-border');
      ngModel.$setValidity('minlength', false);
      $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Vērtība ir par īsu!') + ' ' + gettextCatalog.getString('Nepieciešami') + ' ' + valLength + ' ' + gettextCatalog.getString('simboli')));
      return 0;
    } else {
      ngModel.$setValidity('minlength', true);
    }

    if (nv && nv.toString().length > valLength) {
      $element.addClass('has-error-border');
      ngModel.$setValidity('maxlength', false);
      $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Pārsniegts atļauto simbolu skaits!')));
      return 0;
    } else {
      ngModel.$setValidity('maxlength', true);
    }

    return 1;
  }

  function link($scope, $element, $attrs, ngModel) {
    if (!ngModel) {
      return;
    }

    switch ($attrs.cPattern) {
      case 'decimal_7_4':
        ngModel.$formatters.push(function (value) {
          if (angular.isNumber(value) && value >= 0 && typeof value !== 'undefined') {
            return parseFloat(value).toFixed(4);
          } else {
            return;
          }
        });
        break;

      case 'decimal_7_2':
        ngModel.$formatters.push(function (value) {
          if (angular.isNumber(value) && value >= 0 && typeof value !== 'undefined') {
            return parseFloat(value).toFixed(2);
          } else {
            return;
          }
        });
        break;

      case 'np_decimal_7_2':
        ngModel.$formatters.push(function (value) {
          if (angular.isNumber(value) && typeof value !== 'undefined') {
            return parseFloat(value).toFixed(2);
          } else {
            return;
          }
        });
        break;

      case 'decimal_11_2':
        ngModel.$formatters.push(function (value) {
          if (angular.isNumber(value) && value >= 0 && typeof value !== 'undefined') {
            return parseFloat(value).toFixed(2);
          } else {
            return;
          }
        });
        break;

      default:
        if ($attrs.cPattern.substr(0, 4) == 'int_') {
          ngModel.$parsers.push(function (value) {
            if (value) {
              return parseInt(value);
            }
          });
        }

        break;
    }

    var actions = null;
    var pattertn = null;
    var validVal = null;
    var valLength = null;
    var allow_shorter = false;
    var type = null;
    var allowNextValidation;
    $scope.$watch($attrs.ngModel, function (nv, ov) {
      validVal = false;

      switch ($attrs.cPattern) {
        case 'decimal_7_4':
          pattertn = /^\d{0,7}(\.\d*)?$/;
          type = 'decimal';
          valLength = 12;
          allow_shorter = true;
          break;

        case 'decimal_7_2':
          pattertn = /^\d{0,7}(\.\d*)?$/;
          type = 'decimal';
          valLength = 10;
          allow_shorter = true;
          break;

        case 'np_decimal_7_2':
          pattertn = /^-?\d{0,7}(\.\d*)?$/;
          type = 'decimal';
          valLength = 10;
          allow_shorter = true;
          break;

        case 'decimal_11_2':
          pattertn = /^[0-9]{0,9}(\.{1}([0-9]{1,2})?)?$/;
          type = 'decimal';
          valLength = 12;
          allow_shorter = true;
          break;

        case 'decimal_11_4':
          pattertn = /^[0-9]{0,7}(\.{1}([0-9]{1,4})?)?$/;
          type = 'decimal';
          valLength = 12;
          allow_shorter = true;
          break;

        case 'personas_kods':
          pattertn = /^[0-9]{0,6}(\-{1}([0-9]{0,5})?)?$/;
          type = 'personas_kods';
          valLength = 12;
          break;

        case 'year':
          pattertn = /^([0-9]{0,4})?$/;
          validVal = true;
          valLength = 4;
          type = 'year';
          break;

        case 'year_range':
          pattertn = /^[0-9]{4}(\-{1}[0-9]{4})?$/;
          validVal = true;
          valLength = 9;
          type = 'varchar';
          allow_shorter = true;
          break;

        case 'minutes':
          pattertn = /^([0-5]{0,1}[0-9]{1,1})?$/;
          validVal = true;
          valLength = 2;
          allow_shorter = true;
          break;

        case 'int_4':
          pattertn = /^([0-9]{0,4})?$/;
          validVal = true;
          valLength = 4;
          type = 'int';
          break;

        case 'int_6':
          pattertn = /^([0-9]{0,6})?$/;
          validVal = true;
          valLength = 6;
          type = 'int';
          break;

        case 'int_6_shorter':
          pattertn = /^([0-9]{0,6})?$/;
          validVal = true;
          valLength = 6;
          allow_shorter = true;
          type = 'int';
          break;

        case 'int_7':
          pattertn = /^([0-9]{0,7})?$/;
          validVal = true;
          valLength = 7;
          type = 'int';
          break;

        case 'int_7_shorter':
          pattertn = /^([0-9]{0,7})?$/;
          validVal = true;
          valLength = 7;
          allow_shorter = true;
          type = 'int';
          break;

        case 'int_9_shorter':
          pattertn = /^([0-9]{0,9})?$/;
          validVal = true;
          valLength = 9;
          allow_shorter = true;
          type = 'int';
          break;

        case 'int_10':
          pattertn = /^([0-9]{0,10})?$/;
          validVal = true;
          valLength = 10;
          type = 'int';
          break;

        case 'code_10':
          valLength = 10;
          pattertn = /^([0-9]{0,10})?$/;
          validVal = true;
          type = 'int';
          break;

        case 'int_10_shorter':
          pattertn = /^([0-9]{0,10})?$/;
          validVal = true;
          valLength = 10;
          allow_shorter = true;
          type = 'int';
          break;

        case 'int_11':
          pattertn = /^([0-9]{0,11})?$/;
          validVal = true;
          valLength = 11;
          type = 'int';
          break;

        case 'code_11':
          pattertn = /^([0-9]{0,11})?$/;
          validVal = true;
          valLength = 11;
          type = 'int';
          break;

        case 'int_13':
          pattertn = /^([0-9]{0,13})?$/;
          validVal = true;
          valLength = 13;
          type = 'int';
          break;

        case 'varchar_6_shorter':
          pattertn = /^(.{0,6})?$/;
          validVal = true;
          valLength = 6;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'varchar_11_shorter':
          pattertn = /^(.{0,11})?$/;
          validVal = true;
          valLength = 11;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'varchar_12':
          pattertn = /^([0-9a-zA-Z]{0,12})?$/;
          validVal = true;
          valLength = 12;
          type = 'varchar';
          break;

        case 'varchar_13':
          pattertn = /^([0-9a-zA-Z]{0,13})?$/;
          validVal = true;
          valLength = 13;
          type = 'varchar';
          break;

        case 'varchar_12_shorter':
          pattertn = /^([0-9a-zA-Z]{0,12})?$/;
          validVal = true;
          valLength = 12;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'varchar_75_shorter':
          pattertn = /^([0-9a-zA-Z]{0,75})?$/;
          validVal = true;
          valLength = 75;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'varchar_250_shorter':
          pattertn = /^(.{0,250})?$/;
          validVal = true;
          valLength = 250;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'email':
          pattertn = /^([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?)?$/;
          validVal = true;
          valLength = 255;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'phone_prefix':
          pattertn = /^([+][0-9]{3,3})?$/;
          validVal = true;
          valLength = 4;
          allow_shorter = false;
          type = 'varchar';
          break;

        case 'phone':
          pattertn = /^([0-9]{8,10})?$/;
          validVal = true;
          valLength = 10;
          allow_shorter = true;
          type = 'varchar';
          break;

        case 'orcid':
          pattertn = /^([0-9]{4}[-]{1}[0-9]{4}[-]{1}[0-9]{4}[-]{1}[0-9]{3}[0-9a-zA-Z]{1})?$/;
          validVal = true;
          valLength = 19;
          allow_shorter = false;
          type = 'varchar';
          break;
      } // https://docs.angularjs.org/api/ng/type/ngModel.NgModelController


      if (typeof nv == "undefined" || nv === null) {
        nv = '';
      }

      $element.removeClass('has-error-border');
      $element.nextAll('.errorMsg').remove();

      if (!nv) {
        if ($attrs.required) {
          $element.addClass('has-error-border');
          ngModel.$setValidity('required', false);
          $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Lauks ir obligāts!')));
          return;
        } else {
          // not required un tukšs. zbs
          ngModel.$setValidity('pattenr', true);
          ngModel.$setValidity('minlength', true);
          ngModel.$setValidity('maxlength', true);
          ngModel.$setValidity('parse', true);
          return;
        }
      }

      if (pattertn && !pattertn.test(nv)) {
        ngModel.$setValidity('minlength', true);
        ngModel.$setValidity('maxlength', true);

        switch (type) {
          case "int":
            allowNextValidation = checkLength(ngModel, $element, $attrs, nv, valLength, allow_shorter);

            if (allowNextValidation) {
              $element.addClass('has-error-border');
              ngModel.$setValidity('pattenr', false);
              $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Vērtībai jāsastāv tikai no cipariem!')));
            }

            return;

          default:
            $element.addClass('has-error-border');
            ngModel.$setValidity('pattenr', false);
            $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Vērtība ievadīta nepareizi!')));
        }
      } else {
        checkLength(ngModel, $element, $attrs, nv, valLength, allow_shorter);
      } // if (validVal && (valLength > nv.length && nv.length !== 0) && !allow_shorter) {
      //     ngModel.$setValidity('minlength', false);
      //     $element.addClass('has-error-border');
      //     $element.nextAll('.errorMsg').remove();
      //     if ($attrs.displayError == 'baloon') {
      //         $element.blur(function() {
      //             $element.nextAll('.errorMsg').remove();
      //             $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Vērtība ir pa īsu!') + ' ' + gettextCatalog.getString('Nepieciešams') + ' ' + valLength + ' ' + gettextCatalog.getString('simboli')));
      //         });
      //     } else {
      //         $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Vērtība ir pa īsu!') + ' ' + gettextCatalog.getString('Nepieciešams') + ' ' + valLength + ' ' + gettextCatalog.getString('simboli')));
      //     }
      // } else if ($attrs.required && nv.length === 0) {
      //     $element.addClass('has-error-border');
      //     $element.nextAll('.errorMsg').remove();
      //     if ($attrs.displayError == 'baloon') {
      //         $element.blur(function() {
      //             $element.nextAll('.errorMsg').remove();
      //             $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Lauks ir obligāts!')));
      //         });
      //     } else {
      //         $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Lauks ir obligāts!')));
      //     }
      // }

    });
  }

  return {
    restrict: 'A',
    require: 'ngModel',
    link: link
  };
});
angular.module('myApp').directive('institucijaMultiple', function ($injector, $parse) {
  var config;
  config = {
    restrict: 'E',
    replace: true,
    templateUrl: 'shared/directives/tpl/institution.directive.html',
    scope: {
      dto: '=ngModel',
      disabled: '=ngDisabled',
      editMode: '='
    },
    controller: 'InstitucijaMultipleController as ctl'
  };
  return config;
}).controller('InstitucijaMultipleController', function (dataService, $scope) {
  var ctl;
  ctl = this;
  ctl.tmp_institucija = undefined;
  ctl.used = {};
  ctl.institucijas_assoc = {};
  dataService.getChoices('institutions').then(function (response) {
    ctl.institucijas = response.data;
    angular.forEach(response.data, function (n) {
      ctl.institucijas_assoc[n.id] = n.title;
    });
    ctl.update_used();
  });

  ctl.removeInstitucija = function (d) {
    _.pull($scope.dto, d);

    return ctl.update_used();
  };

  ctl.addInstitucija = function (institucija_id) {
    var elem;

    if (!institucija_id) {
      return;
    }

    elem = {
      institucija_id: institucija_id
    };

    if (!_.find($scope.dto, elem)) {
      $scope.dto.push(elem);
      return ctl.update_used();
    }
  };

  ctl.addInstitucijaFromSelect = function () {
    ctl.addInstitucija(ctl.tmp_institucija);
    return ctl.tmp_institucija = undefined;
  };

  ctl.update_used = function () {
    angular.forEach(ctl.used, function (e, k) {
      ctl.used[k] = false;
    });
    angular.forEach($scope.dto, function (e) {
      ctl.used[e.institucija_id] = true;
    });
  };
});
angular.module('myApp').directive('parseUrl', function () {
  //var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/gi;
  var urlPattern = /^(http|https?|ftp):\/\//; // NB: not '.*'

  return {
    restrict: 'A',
    require: 'ngModel',
    replace: true,
    scope: {
      props: '=parseUrl',
      ngModel: '=ngModel'
    },
    link: function compile(scope, $element) {
      scope.$watch('ngModel', function (value) {
        if (value) {
          var html = value.replace(urlPattern, '');
          $element.addClass('btn-link');
          $element.text(html);
        }
      });
    }
  };
});
angular.module('myApp').directive('password', function ($rootScope, $state, gettextCatalog) {
  function getMessageWrapp(attrs, text) {
    switch (attrs.displayError) {
      case 'baloon':
        return '<div class="errorBalloon errorMsg" ng-messages="projectStaffForm.planota_posma_dd_vsaoi.$error">' + '<div class="baloonWrap">' + '<div translate>' + text + '</div>' + '</div>' + '</div>';

      default:
        return '<span class="errorMsg">' + text + '</span>';
    }
  }

  function link($scope, $element, $attrs, ngModel) {
    if (!ngModel) {
      return;
    }

    var pattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(_|[^\w])).+$/;
    $scope.$watch('model', function (nv) {
      if (pattern.test(nv)) {
        ngModel.$setValidity('pattern', true);
        $element.removeClass('has-error-border');
        $element.nextAll('.errorMsg').remove();

        if (nv && nv.length < 9) {
          ngModel.$setValidity('minlength', false);
          $element.addClass('has-error-border');
          $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Parolei ir jābūt vismaz 9 simbolus garai!')));
        } else {
          ngModel.$setValidity('minlength', true);
        }
      } else if (nv && nv.length > 0) {
        ngModel.$setValidity('pattern', false);
        ngModel.$setValidity('minlength', true);
        $element.addClass('has-error-border');
        $element.nextAll('.errorMsg').remove();
        $element.after(getMessageWrapp($attrs, gettextCatalog.getString('Parolei ir jāsatur vismaz vienu mazo burtu, lielo burtu, ciparu un simbolu!')));
      }

      if ($scope.selectValue) {
        $element.select();
      }
    });
  }

  return {
    restrict: 'A',
    require: 'ngModel',
    link: link,
    scope: {
      password: '=password',
      model: '=ngModel',
      selectValue: '=selectValue'
    }
  };
});
angular.module('myApp').directive('permission', function ($rootScope, $state, authService) {
  function link(scope, element, attrs) {
    authService.promise.then(function () {
      return link_(scope, element, attrs);
    });
  }

  function link_(scope, element, attrs) {
    var actions = [],
        p = _.clone(authService.perms[$state.current.gridPermission ? $state.current.gridPermission : $state.current.permission]);

    if (p) {
      if ($state.current.permission === 'akad_personals_list' && authService.perms["delete"].akad_darba_vieta_delete) {
        p["delete"] = true;
      }

      _.each(p, function (elem, k) {
        actions.push(k);
      });
    }

    if (attrs.permissionSet) {
      permissionSetCheck(element, attrs.permission, attrs.permissionSet);
      $rootScope.$watch('currentUserRights', function () {
        permissionSetCheck(element, attrs.permission, attrs.permissionSet, attrs.disableUrl);
      });
    } else {
      var permissionArr = [];
      permissionArr = attrs.permission.split('||');

      for (var z = 0; permissionArr.length > z; z++) {
        if ($.inArray(permissionArr[z], actions) > -1) {
          element.show();

          if ($state.current.gridPermission && $state.current.gridPermission == 'lietotajs_editable' && !$rootScope.currentUserRights.hasOwnProperty('lietotajs_editable_admin')) {
            element.bind('click', function (e) {
              e.stopImmediatePropagation();
              return false;
            });
          }

          break;
        } else {
          if (element.prop("tagName").toLowerCase() == 'td') {
            element.addClass('cursorDefault');

            if (!element.find('input[type="checkbox"]').length) {
              element.bind('click', function (e) {
                e.stopImmediatePropagation();
                return false;
              });
            } else if (permissionArr[z] == 'delete' || permissionArr[z] == 'get') {
              element.hide();
            }
          } else {
            element.hide();
          }
        }
      }
    }
  }

  function permissionSetCheck(element, permission, permissionSet, disableUrl) {
    disableUrl = disableUrl == "true";

    if ($rootScope.currentUserRights && $rootScope.currentUserRights[permissionSet]) {
      for (var y = 0; $rootScope.currentUserRights[permissionSet].length > y; y++) {
        if (typeof $rootScope.currentUserRights[permissionSet] != "undefined" && $rootScope.currentUserRights[permissionSet][y] == permission) {
          element.show();
          return;
        } else {
          if (disableUrl) {
            element.show();
            element.removeClass('link');
            element.bind('click', function (e) {
              e.preventDefault();
            });
          } else {
            element.hide();
          }
        }
      }
    } else {
      if (disableUrl) {
        element.show();
        element.removeClass('link');
        element.bind('click', function (e) {
          e.preventDefault();
        });
      } else {
        element.hide();
      }

      return;
    }
  }

  return {
    restrict: 'A',
    replace: true,
    link: link
  };
});
angular.module('myApp').directive('ngPrint', function ($document, $window) {
  var printSection = $document.getElementById('printSection'); // if there is no printing section, create one

  if (!printSection) {
    printSection = $document.createElement('div');
    printSection.id = 'printSection';
    $document.body.appendChild(printSection);
  }

  function link(scope, element, attrs) {
    element.on('click', function () {
      var elemToPrint = $document.getElementById(attrs.printElementId);

      if (elemToPrint) {
        printElement(elemToPrint);
      }
    });

    $window.onafterprint = function () {
      // clean the print section before adding new content
      printSection.innerHTML = '';
    };
  }

  function printElement(elem) {
    // clones the element you want to print
    var domClone = elem.cloneNode(true);
    printSection.appendChild(domClone);
    $window.print();
  }

  return {
    link: link,
    restrict: 'A'
  };
});
angular.module('myApp').directive('scrollUp', function () {
  function link(scope, element) {
    element.on('click', function () {
      $("html, body").animate({
        scrollTop: 0
      }, "slow");
    });
    $(document).scroll(function () {
      var y = $(this).scrollTop();

      if (y > 100) {
        element.fadeIn();
      } else {
        element.fadeOut();
      }
    });
  }

  return {
    link: link,
    restrict: 'C'
  };
});
angular.module('myApp').directive('setPrint', function ($rootScope) {
  function link($scope, $element, $attrs) {
    switch ($attrs.setPrint) {
      case 'edit':
        $element.click(function () {
          $rootScope.allowPrint = false;
        });
        break;

      case 'cancel':
        $element.click(function () {
          $rootScope.allowPrint = true;
        });
        break;
    }
  }

  return {
    restrict: 'A',
    link: link
  };
});
angular.module('myApp').directive('showCopyButton', function ($timeout, clipboard, gettextCatalog) {
  function renderButton($attrs) {
    switch ($attrs.showCopyButton) {
      case 'false':
        // Hide copy buttons
        $('.copy-value-button').remove();
        break;

      case 'true':
        // Show copy buttons
        $timeout(function () {
          var copy_text = gettextCatalog.getString('Kopēt');
          $('input, textarea, select', '.form-group, td, .panel-heading, input.datepicker').after('<button type="button" title="' + copy_text + '" class="copy-value-button"><i class="fa fa-clipboard"></i></button>');
          $('.form-group .copy-value-button, td .copy-value-button, .panel-heading .copy-value-button').on('click', function () {
            var $prev_element = $(this).prev();

            switch ($prev_element.prop("tagName").toLowerCase()) {
              case 'select':
                clipboard.copyText($prev_element.find('option:selected').text());
                break;

              default:
                clipboard.copyText($prev_element.val());
                break;
            }
          });
        });
        break;
    }
  }

  function link($scope, $element, $attrs) {
    $attrs.$observe('showCopyButton', function () {
      $timeout(function () {
        renderButton($attrs);
      });
    });
  }

  return {
    restrict: 'A',
    replace: true,
    link: link,
    scope: {
      showCopyButton: "@showCopyButton"
    }
  };
});
angular.module('myApp').factory('Password', ['$state', '$stateParams', function ($state, $stateParams) {
  var ps = this;
  ps.generatePassword = generatePassword;

  function generatePassword() {
    var charRange = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ1234567890!@#$%^&*()_+-=<>?';
    var rangeLength = charRange.length;
    var selectedChars = [];

    for (var i = 9; i > 0; i--) {
      selectedChars.push(charRange.charAt(Math.floor(Math.random() * rangeLength)));
    }

    var pattertn = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(_|[^\w])).+$/;
    var passStr = selectedChars.join('');

    if (!pattertn.test(passStr)) {
      return ps.generatePassword();
    } else {
      return passStr;
    }
  }

  return ps;
}]);
angular.module('myApp').factory('PermissionService', ['$rootScope', function ($rootScope) {
  var us = {
    hasPermission: hasPermission
  };

  function hasPermission(permission_set, permission) {
    if ($rootScope.currentUserRights) {
      return $rootScope.currentUserRights.hasOwnProperty(permission_set) && $rootScope.currentUserRights[permission_set].indexOf(permission) != -1;
    } else return false;
  }

  return us;
}]);
angular.module('myApp').factory('SearchNewUser', ['$http', 'ngDialog', '$state', '$stateParams', 'dataService', '$q', 'SearchPerson', function ($http, ngDialog, $state, $stateParams, dataOp, $q, SearchPerson) {
  var sp = this;
  sp.search = search;

  function search(code, idArr, successCallBackFunc, errorCallBackFunc, showDialog) {
    if (showDialog !== false) {
      showDialog = true;
    }

    if (code && code.length == 11) {
      return dataOp.getData('FP_LP', {
        search: {
          personas_kods: {
            value: code
          }
        }
      }).then(function (response) {
        var tplFile;
        var callBackFunc = null;

        if (response.total_count == 0 || response.total_count !== "undefined") {
          SearchPerson.search(code, idArr, successCallBackFunc, errorCallBackFunc, showDialog);
        } else {
          tplFile = 'shared/factories/discardLoadPersonalDataDialog.html';
          callBackFunc = errorCallBackFunc;
          showDialog = true;
        }

        if (tplFile && showDialog) {
          ngDialog.openConfirm({
            template: tplFile,
            className: 'ngdialog-theme-default dialog400'
          }).then(function () {
            if (callBackFunc) {
              callBackFunc();
            }
          });
        }
      });
    } else {
      var deferred = $q.defer();
      deferred.resolve(null);
      return deferred.promise;
    }
  }

  return sp;
}]);
angular.module('myApp').factory('SearchPerson', ['$http', 'ngDialog', '$state', '$stateParams', 'dataService', '$q', function ($http, ngDialog, $state, $stateParams, dataOp, $q) {
  var sp = this;
  sp.search = search;
  sp.searchByParams = searchByParams;

  function search(code, idArr, successCallBackFunc, errorCallBackFunc, showDialog, subLevelIndex, fillLietotajsView) {
    if (showDialog !== false) {
      showDialog = true;
    }

    if (code && code.length == 11) {
      return dataOp.getChoices('personal_choice', {
        personas_kods: code
      }).then(function (response) {
        var tplFile;
        var callbackFunc = null;
        var r = null; // persona kuru atgriezīsim

        if (response.data.length && (!idArr.length || idArr.indexOf(response.data[0].id.toString()) === -1)) {
          r = response.data[0];
          tplFile = r.ir_arhivets ? 'shared/factories/loadPersonalDataArchivedDialog.html' : 'shared/factories/loadPersonalDataDialog.html';
          callbackFunc = successCallBackFunc;

          if (fillLietotajsView) {
            r.personas_kods = code;
            r.personals_id = r.id;
            r.ir_anonims = false;
            r.ir_arhivets = r.ir_arhivets;
            delete r.id;
          }
        } else if (typeof errorCallBackFunc != "undefined" && response.data[0] && idArr.indexOf(response.data[0].id.toString()) > -1) {
          tplFile = 'shared/factories/discardLoadPersonalDataDialog.html';
          callbackFunc = errorCallBackFunc;
          showDialog = true;
        } else if (typeof errorCallBackFunc == "undefined") {
          return null;
        }

        if (tplFile && showDialog) {
          ngDialog.openConfirm({
            template: tplFile,
            className: 'ngdialog-theme-default dialog400',
            data: r
          }).then(function () {
            if (callbackFunc) {
              if (subLevelIndex || subLevelIndex == 0) {
                callbackFunc(r, subLevelIndex);
              } else {
                callbackFunc(r);
              }
            }
          });
        } else {
          if (callbackFunc) {
            if (subLevelIndex || subLevelIndex == 0) {
              callbackFunc(r, subLevelIndex);
            } else {
              callbackFunc(r);
            }
          }
        }

        return r;
      });
    } else {
      var deferred = $q.defer();
      deferred.resolve(null);
      return deferred.promise;
    }
  }

  function searchByParams(key, value, foundUserId, successCallBackFunc, errorCallBackFunc) {
    var obj = {};
    obj[key] = {
      value: value
    };
    return dataOp.getData('FP_LPF', {
      search: obj
    }).then(function (response) {
      if (response.rows && response.rows.length) {
        var r = response.rows[0];

        if (r.id != foundUserId) {
          var paramObj = {};
          paramObj[key] = value;
          r.params = paramObj;
          ngDialog.openConfirm({
            template: r.ir_arhivets ? 'shared/factories/loadPersonalDataArchivedDialog.html' : 'shared/factories/loadPersonalDataDialog.html',
            className: 'ngdialog-theme-default dialog400',
            data: r
          }).then(function () {
            successCallBackFunc && successCallBackFunc(r);
          });
        }
      } else if (key == 'personas_kods') {
        search(value, [], successCallBackFunc, errorCallBackFunc, true, null, true);
      } else {
        errorCallBackFunc();
      }
    }, function () {
      errorCallBackFunc();
    });
  }

  return sp;
}]);
angular.module('myApp').factory('Select2Data', ['dataService', '$rootScope', Select2Data]);

function Select2Data(dataOp, $rootScope) {
  var constructor = function constructor(type, dataId, dataObj) {
    var s2d = this;
    s2d.offset = 0;
    s2d.limit = 10;
    $.extend($.fn.select2.defaults, $.fn.select2.locales[$rootScope.current_language]);
    s2d.selectData = {};
    s2d.selectType = type;
    s2d.selectTypeDataId = dataId;
    s2d.dataCount = 0;
    s2d.query = query;

    function query(queryParams) {
      if (queryParams.page && queryParams.page > 1) {
        s2d.offset = s2d.offset + s2d.limit;
      } else {
        s2d.offset = 0;
      }

      queryParams.offset = s2d.offset;
      queryParams.limit = s2d.limit;

      switch (s2d.selectType) {
        case "codificator":
          dataOp.getCodificator(s2d.selectTypeDataId, queryParams).then(function (response) {
            var more = response.data.length >= s2d.limit;

            if (queryParams.allowFreeText && queryParams.term && queryParams.term.length > 0 && s2d.offset <= 0) {
              var result = {
                id: -1,
                text: queryParams.term,
                isFreeText: true
              };
              response.data.unshift(result);
            }

            s2d.selectData = {
              results: response.data,
              more: more
            };
            queryParams.callback(s2d.selectData);
          });
          break;

        case "choices":
          dataOp.getChoices(s2d.selectTypeDataId, queryParams).then(function (response) {
            var more = response.data.length >= s2d.limit;

            if (queryParams.allowFreeText && queryParams.term && queryParams.term.length > 0 && s2d.offset <= 0) {
              var result = {
                id: -1,
                text: queryParams.term,
                isFreeText: true
              };
              response.data.unshift(result);
            }

            s2d.selectData = {
              results: response.data,
              more: more
            };
            queryParams.callback(s2d.selectData);
          });
          break;

        case "array":
          {
            var more = dataObj.data.length >= s2d.limit;
            var dataTmp = dataObj.data.slice();

            if (queryParams.allowFreeText && queryParams.term && queryParams.term.length > 0 && s2d.offset <= 0) {
              var result = {
                id: -1,
                text: queryParams.term,
                isFreeText: true
              };
              dataTmp.unshift(result);
            }

            s2d.selectData = {
              results: dataTmp,
              more: more
            };
            queryParams.callback(s2d.selectData);
          }
          break;
      }
    }
  };

  return constructor;
}
angular.module('myApp').factory('UploadService', function UploadService($http, $cookies, $rootScope, $timeout, Upload, Notification, $q) {
  var us = {
    uploadFiles: uploadFiles,
    files: null,
    progress: 100
  };

  function uploadFiles(files, errFiles, __unused_index, attachmentObj, callback) {
    us.files = files;
    attachmentObj.errFiles = [];
    attachmentObj.errFiles = errFiles;
    if (typeof attachmentObj.pielikuma_faili === 'undefined') attachmentObj.pielikuma_faili = [];
    var promises = [];
    var extensions = ['jpg', 'jpeg', 'tif', 'tiff', 'png', 'gif', 'bmp', 'odt', 'fodt', 'ods', 'fods', 'odp', 'fodp', 'odb', 'odg', 'fodg', 'odf', 'doc', 'dot', 'xls', 'xlt', 'xlm', 'ppt', 'pot', 'pps', 'docx', 'docm', 'dotx', 'dotm', 'docb', 'xlsx', 'xlsm', 'xltx', 'xltm', 'pptx', 'pptm', 'potx', 'potm', 'ppsx', 'sldx', 'sldm', 'pdf', 'rtf', 'txt', 'svg', 'wpd', 'wps', 'csv', 'epub', 'edoc'];
    angular.forEach(files, function (file) {
      var file_ext = file.name.split('.').pop().toLowerCase();

      if (extensions.includes(file_ext)) {
        file.upload = Upload.upload({
          url: '/upload',
          data: {
            file: file
          }
        });
        promises.push(file.upload.then(function (response) {
          response.data.sha256 = response.data.sha_256;

          if (attachmentObj.pielikuma_faili) {
            response.data.pielikuma_id = response.data.id;
            attachmentObj.pielikuma_faili.push(response.data);
          }

          if (!attachmentObj.title) {
            attachmentObj.title = angular.copy(response.data.filename);
          }

          if (!attachmentObj.nosaukums) {
            attachmentObj.nosaukums = angular.copy(response.data.filename);
          }

          $timeout(function () {
            file.result = response.data;
          });
        }, function (response) {
          Notification.error("Faila izmērs nedrīks pārsniegt 50MB");
          msg({
            response: response
          });
          if (response.status > 0) us.errorMsg = response.status + ': ' + response.data;
        }, function (evt) {
          file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
        }));
      } else {
        attachmentObj.errFiles.push({
          name: file.name,
          $error: 'extensionNotSupported'
        });
      }
    });

    if (typeof callback === 'function') {
      if (promises.length > 0) {
        $q.all(promises).then(function () {
          callback(attachmentObj);
        });
      } else {
        callback(attachmentObj);
      }
    }
  }

  return us;
}); // vim: ts=4:sw=4
angular.module('myApp').directive('fileModel', function () {
  return {
    scope: {
      'fileModel': '='
    },
    link: function link(scope, element, attributes) {
      element.bind('change', function (evt) {
        return scope.$apply(function () {
          return scope.fileModel = evt.target.files[0];
        });
      });
      return scope.$on('$destroy', function () {
        return element.unbind('change');
      });
    }
  };
});
angular.module('myApp').filter('cocnat_export_ids', function () {
  return function concatValues(idsObj, gridId) {
    var firstKey = true;
    var keyString = '';

    for (var iKey in idsObj) {
      if (!idsObj[iKey] || !idsObj[iKey].object) {
        return;
      }

      if (firstKey) {
        if (gridId == 'FP_APK' || gridId == 'FP_ZKK') {
          keyString = '/' + idsObj[iKey].object.open_id;
        } else {
          keyString = '/' + idsObj[iKey].object.id;
        }

        firstKey = false;
      } else {
        if (gridId == 'FP_APK' || gridId == 'FP_ZKK') {
          keyString += ',' + idsObj[iKey].object.open_id;
        } else {
          keyString += ',' + idsObj[iKey].object.id;
        }
      }
    }

    return keyString;
  };
});
angular.module('myApp').filter('is_equal', function () {
  return function (formDataObj, originDataObj) {
    var a;

    function setUndefined(dataObj) {
      for (var key in dataObj) {
        if (Object.prototype.toString.call(dataObj[key]) === '[object Array]' || typeof dataObj[key] === 'Array') {
          for (var i = 0; dataObj[key].length > i; i++) {
            setUndefined(dataObj[key][i]);
          }
        }

        if (Object.prototype.toString.call(dataObj[key]) == '[object Object]') {
          setUndefined(dataObj[key]);
        }

        if (typeof dataObj[key] == 'string' && !dataObj[key] || Object.prototype.toString.call(dataObj[key]) == "[object Null]") {
          dataObj[key] = a;
        }

        if (typeof dataObj[key] == 'boolean' && key.indexOf("date") > -1 && key.indexOf("_edit") > -1 && !dataObj[key]) {
          dataObj[key] = a;
        }
      }
    }

    setUndefined(formDataObj);
    setUndefined(originDataObj);
    return angular.toJson(formDataObj) == angular.toJson(originDataObj);
  };
});
angular.module("dm.select2", []).value("select2Config", {}).factory("select2Stack", function () {
  var stack = [];
  return {
    $register: function $register(callbackElem) {
      stack.push(callbackElem);
    },
    $unregister: function $unregister(callbackElem) {
      var idx = stack.indexOf(callbackElem);

      if (idx !== -1) {
        stack.splice(idx, 1);
      }
    },
    closeAll: function closeAll() {
      stack.forEach(function (elem) {
        elem.close();
      });
    }
  };
}).directive("select2", ["$rootScope", "$timeout", "$parse", "$filter", "select2Config", "select2Stack", function ($rootScope, $timeout, $parse, $filter, select2Config, select2Stack) {
  var filter = $filter("filter");

  function sortedKeys(obj) {
    var keys = [];

    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }

    return keys.sort();
  }

  var defaultOptions = {}; //0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888

  var NG_OPTIONS_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/;

  if (select2Config) {
    angular.extend(defaultOptions, select2Config);
  }

  return {
    require: "ngModel",
    priority: 1,
    restrict: "E",
    template: '<input type=\"hidden\"></input>',
    replace: true,
    link: function link(scope, element, attrs, controller) {
      var getOptions;
      var opts = angular.extend({}, defaultOptions, scope.$eval(attrs.options));
      var isMultiple = angular.isDefined(attrs.multiple) || opts.multiple;
      opts.multiple = isMultiple;

      if (attrs.placeholder) {
        opts.placeholder = attrs.placeholder;
      }

      var freetext = false;

      if (attrs.freetext) {
        freetext = attrs.freetext;
      }

      var filterOptions = $parse(attrs.optionsFilter); // All values returned from Select2 are strings. This is a
      // problem if you supply integer indexes: they'll become
      // strings once passing through this directive. We keep a
      // mapping between string keys and values through the
      // optionItems object, to be able to return the correctly typed
      // value.

      var optionItems = {};

      function filterValues(values) {
        if (filterOptions) {
          var filterParams = filterOptions(scope);

          if (filterParams) {
            return filter(values, filterParams);
          }
        }

        return values;
      }

      if (opts.onlyId) {
        controller.$parsers.push(function (value) {
          if (!value) {
            return null;
          }

          return value.id ? value.id : value;
        });
      }

      if (attrs.s2Options) {
        var match;

        if (!(match = attrs.s2Options.match(NG_OPTIONS_REGEXP))) {
          throw new Error("Invalid s2Options encountered!");
        }

        var displayFn = $parse(match[2] || match[1]);
        var valuesFn = $parse(match[7]);
        var valueName = match[4] || match[6];
        var valueFn = $parse(match[2] ? match[1] : valueName);
        var keyName = match[5];

        getOptions = function getOptions(callback) {
          optionItems = {};
          var values = filterValues(valuesFn(scope));
          var keys = (keyName ? sortedKeys(values) : values) || [];
          var options = [];

          for (var i = 0; i < keys.length; i++) {
            var locals = {};
            var key = i;

            if (keyName) {
              key = keys[i];
              locals[keyName] = key;
            }

            locals[valueName] = values[key];
            var value = valueFn(scope, locals);
            var label = displayFn(scope, locals) || ""; // Select2 returns strings, we use a dictionary to get
            // back to the original value.

            optionItems[value] = {
              id: value,
              text: label,
              moreData: values[key]
            };
            options.push(optionItems[value]);
          }

          callback(options);
        };

        opts.query = function (query) {
          var values = filterValues(valuesFn(scope));
          var keys = (keyName ? sortedKeys(values) : values) || [];

          for (var i = 0; i < keys.length; i++) {
            var locals = {};
            var key = i;

            if (keyName) {
              key = keys[i];
              locals[keyName] = key;
            }

            locals[valueName] = values[key];
            var value = valueFn(scope, locals);
            var label = displayFn(scope, locals) || "";

            if (label.toLowerCase().indexOf(query.term.toLowerCase()) > -1) {
              optionItems[value] = {
                id: value,
                text: label,
                moreData: values[key]
              };
              options.push({
                id: value,
                text: label,
                moreData: values[key]
              });
            }
          }

          query.callback({
            results: options
          });
        };

        controller.$render = function () {
          var select_options = {};
          getOptions(function () {
            select_options = optionItems;
          });
          getSelection(function (selection) {
            if (!angular.isObject(selection)) {
              element.select2("data", select_options[selection]);
            } else {
              element.select2("data", selection);
            }
          });
        }; // Make sure changes to the options get filled in


        scope.$watch(match[7], function () {
          controller.$render();
        });
      } else {
        if (!opts.query) {
          throw new Error("You need to supply a query function!");
        }

        scope.$watch(attrs.ngModel + ".length", function () {
          controller.$render();
        });
        var queryFn = opts.query;

        opts.query = function (query) {
          query.allowFreeText = freetext;
          var cb = query.callback;

          query.callback = function (data) {
            for (var i = 0; i < data.results.length; i++) {
              var result = data.results[i];
              optionItems[result.id] = result;
            }

            cb(data);
          };

          queryFn(query);
        };

        getOptions = function getOptions(_callback) {
          opts.query({
            term: "",
            callback: function callback(query) {
              _callback(query.results);
            }
          });
        };

        controller.$render = function () {
          getSelection(function (selection) {
            element.select2("data", selection);
          });
        };
      }

      function getSelection(callback) {
        callback(controller.$viewValue);
      }

      if (!opts.initSelection) {
        opts.initSelection = function (element, callback) {
          getSelection(callback);
        };
      } else {
        var _initSelection = opts.initSelection;

        opts.initSelection = function (element, callback) {
          _initSelection(element, function (result) {
            optionItems[result.id] = result;
            callback(result);
          });
        };
      } // register with the select2stack


      var controlObj = {
        close: function close() {
          element.select2("close");
        }
      };
      select2Stack.$register(controlObj);
      scope.$on("destroy", function () {
        select2Stack.$unregister(controlObj);
      });
      $timeout(function () {
        element.select2(opts);
        element.on("change", function (e) {
          scope.$apply(function () {
            var val;

            if (isMultiple) {
              var vals = [];

              for (var i = 0; i < e.val.length; i++) {
                val = optionItems[e.val[i]];

                if (val) {
                  vals.push({
                    id: val.id,
                    text: val.text,
                    moreData: val.moreData
                  });
                } else {
                  if (controller.$viewValue.filter) {
                    vals.push(controller.$viewValue.filter(function (el) {
                      if (el.id == e.val[i]) {
                        return true;
                      } else {
                        return false;
                      }
                    })[0]);
                  }
                }
              }

              controller.$setViewValue(vals);
            } else {
              val = optionItems[e.val];
              controller.$setViewValue(val ? {
                id: val.id >= 0 ? val.id : null,
                text: val.text,
                moreData: val.moreData
              } : null);
            }

            controller.$render();
          });
        });
        element.on("select2-blur", function () {
          if (controller.$touched) {
            return;
          }

          scope.$apply(controller.$setTouched);
        });
        controller.$render();
      });
    }
  };
}]);
angular.module('myApp').directive('ngEnter', function () {
  return function (scope, element, attrs) {
    element.bind("keydown keypress", function (event) {
      if (event.which === 13) {
        scope.$apply(function () {
          scope.$eval(attrs.ngEnter);
        });
        event.preventDefault();
      }
    });
  };
});
angular.module('myApp').directive("compareTo", compareTo);

function compareTo() {
  return {
    require: "ngModel",
    scope: {
      otherModelValue: "=compareTo"
    },
    link: function link(scope, element, attributes, ngModel) {
      ngModel.$validators.compareTo = function (modelValue) {
        return modelValue == scope.otherModelValue;
      };

      scope.$watch("otherModelValue", function () {
        ngModel.$validate();
      });
    }
  };
}
angular.module('myApp').directive("required", function () {
  return {
    restrict: 'A',
    // only for attributes
    compile: function compile(element) {
      // insert asterisk after elment
      element.closest('div[class*="col"]').addClass('has-asterisk');
    }
  };
});
/*
 * uniso-data
 * http://www.uniso.lv
 * Version: 0.0.4 - 2016-08-26
 * License: MIT
 */
(function () {
  angular.module("uniso-data", []);
}).call(this);
(function () {
  angular.module("uniso-data").service("uuiMD", function () {
    return function (data) {
      var $this;
      $this = this;
      $this.columnOrder = [];
      angular.forEach(data, function (el) {
        $this[el.name] = el;

        if (el.visible && el.name !== "id") {
          return $this.columnOrder.push(el.name);
        }
      });
      return $this;
    };
  }).provider("uuiDataConfig", function () {
    var cfg;
    cfg = {
      deferredPath: "./data/deferred/",
      deferredPathPostfix: "",
      dataPath: "./data/",
      countPath: "./data/count/",
      warehousingToken: "statistic_list",
      warehousingDataPath: "./statistika/data/",
      warehousingCountPath: "./statistika/data/count/"
    };

    cfg.$get = function () {
      return cfg;
    };

    return cfg;
  }).service("uuiData", ["$injector", "$rootScope", "$http", "$q", "$resource", "uuiMD", "uuiWebsocket", "uuiDataConfig", function ($injector, $rootScope, $http, $q, $resource, uuiMD, uuiWebsocket, uuiDataConfig) {
    var $confirm, processData, processDeferred, srvc;

    if ($injector.has("$confirm")) {
      $confirm = $injector.get("$confirm");
    }

    processData = function processData(data, result, def, R) {
      angular.forEach(data, function (r) {
        return result.push(new R(r));
      });
      result.$resolved = true;
      return def.resolve(result);
    };

    processDeferred = function processDeferred(defId, result, def, R) {
      var _wsResponse;

      _wsResponse = function wsResponse(resp) {
        var _ref;

        if ((_ref = resp.status) === 'OK' || _ref === 'ERR') {
          uuiWebsocket.unsubscribe(defId, _wsResponse);
          return $http.get(uuiDataConfig.deferredPath + defId + uuiDataConfig.deferredPathPostfix).then(function (succ) {
            var data;
            data = succ.data;

            if (resp.status === 'OK') {
              if (angular.isArray(data)) {
                return processData(succ.data, result, def, R);
              } else {
                result.count = data;
                result.$resolved = true;
                return def.resolve(result);
              }
            } else {
              result.$resolved = true;
              return def.reject(data);
            }
          }, function (err) {
            result.$resolved = true;
            return def.reject(err);
          });
        }
      };

      return uuiWebsocket.subscribe(defId, _wsResponse);
    };

    srvc = {
      $cache: {},
      $api: null,
      defer: undefined,
      preloadMd: function preloadMd() {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var $this;

        if (Object.keys(this.$cache).length && !force) {
          return;
        }

        $this = this;

        if ($this.defer !== undefined && !force) {
          return $this.defer.promise;
        }

        $this.defer = $q.defer();
        $http.get("./metadata/*").then(function (apis) {
          angular.forEach(apis.data, function (v, k) {
            return $this.$cache[k] = new uuiMD(v.fields);
          });
          $http.get("./api").then(function (api) {
            $this.$api = api.data;
            $rootScope.$broadcast('api.loaded');
            return $this.defer.resolve();
          })["catch"](function (resp) {
            $this.defer.reject();
            throw new Error("Kļūda api ielādē!\n" + resp);
          });
          return $rootScope.$broadcast('metadata.loaded');
        })["catch"](function (resp) {
          $this.defer.reject();
          throw new Error("Kļūda metadatu ielādē!\n" + resp);
        });
        return $this.defer.promise;
      },
      reloadMd: function reloadMd() {
        return this.preloadMd(true);
      },
      metadata: function metadata(code) {
        if (this.$cache[code]) {
          return this.$cache[code];
        } else {
          throw new Error("Nav metadatu objektam \"" + code + "\"");
        }
      },
      list: function list(code, params, succ, err, shouldConfirm) {
        var R, def, result, url;

        if (angular.isFunction(params)) {
          err = succ;
          succ = params;
          params = {};
        }

        shouldConfirm = shouldConfirm !== false ? true : false;
        url = this['$api'] != null && this.$api[code] != null && this.$api[code][0] === uuiDataConfig.warehousingToken ? uuiDataConfig.warehousingDataPath + code : uuiDataConfig.dataPath + code;
        def = $q.defer();
        result = [];
        result.$promise = def.promise.then(succ, err);

        result.$cancelRequest = function () {
          return true;
        };

        result.shouldConfirm = shouldConfirm;
        R = $resource(url);
        $http.get(url, {
          params: params
        }).then(function (resp) {
          if (!resp) {
            console.log("Undefined response while getting ".concat(url, " with params ").concat(JSON.stringify(params)));
            resp = {
              data: []
            };
          }

          var data = resp.data;

          if (angular.isArray(data)) {
            return processData(data, result, def, R);
          } else {
            return processDeferred(data.deferred, result, def, R);
          }
        }, function (err) {
          if (err.status === 500 && err.data === 'Pieprasījums atcelts, jo neiekļāvās tam paredzētajā laikā') {
            if ($confirm && shouldConfirm) {
              return $confirm({
                text: 'Pieprasījumam nepieciešams vairāk laika. Vai turpināt datu izgūšanu?'
              }).then(function () {
                result.shouldConfirm = false;
                return $http.get(url, {
                  params: params,
                  headers: {
                    'X-Deferred': true
                  }
                }).then(function (resp) {
                  return processDeferred(resp.data.deferred, result, def, R);
                });
              }, function () {
                result.$resolved = true;
                return def.reject('Pieprasījums atcelts, jo neiekļāvās tam paredzētajā laikā');
              });
            } else {
              return $http.get(url, {
                params: params,
                headers: {
                  'X-Deferred': true
                }
              }).then(function (resp) {
                return processDeferred(resp.data.deferred, result, def, R);
              });
            }
          } else {
            result.$resolved = true;
            return def.reject(err);
          }
        });
        return result;
      },
      count: function count(code, params) {
        var def, result, url;
        url = this['$api'] != null && this.$api[code] != null && this.$api[code][0] === uuiDataConfig.warehousingToken ? uuiDataConfig.warehousingCountPath + code : uuiDataConfig.countPath + code;
        result = {};
        def = $q.defer();
        result.$promise = def.promise;

        result.$cancelRequest = function () {
          return true;
        };

        $http.get(url, {
          params: params
        }).then(function (resp) {
          var data;
          data = resp.data;
          return processDeferred(data.deferred, result, def);
        }, function (err) {
          return def.reject('Problēma datu ielādē');
        });
        return result;
      },
      record: function record(code, id, params, succ, err) {
        if (angular.isFunction(params)) {
          err = succ;
          succ = params;
          params = {};
        }

        return $resource(uuiDataConfig.dataPath + code + "/:id").get(angular.extend({
          id: id
        }, params), succ, err);
      },
      taPromise: function taPromise(code, params) {
        return $resource(uuiDataConfig.dataPath + code).query(params).$promise;
      },
      clear: function clear() {
        this.$cache = {};
        this.$api = {};
      }
    };
    $rootScope.$on("cacheClear", function () {
      srvc.$cache = {};
      return srvc.$api = {};
    });
    return srvc;
  }]);
}).call(this);
(function () {
  angular.module("uniso-data").provider("uuiWebsocketConfig", function () {
    var cfg;
    cfg = {
      websocketPath: "/ws"
    };

    cfg.$get = function () {
      return cfg;
    };

    return cfg;
  }).service("uuiWebsocket", ["$http", "$interval", "$timeout", "uuiWebsocketConfig", function ($http, $interval, $timeout, uuiWebsocketConfig) {
    var cfg, ws, wsKeepAlive;
    ws = void 0;
    wsKeepAlive = void 0;
    cfg = {};
    cfg.subscribers = {};

    cfg.subscribe = function (topic, callback) {
      if (!cfg.subscribers[topic]) {
        cfg.subscribers[topic] = [];
      }

      if (cfg.subscribers[topic].indexOf(callback) !== -1) {
        return;
      }

      cfg.subscribers[topic].push(callback);
    };

    cfg.unsubscribe = function (topic, callback) {
      if (!cfg.subscribers[topic]) {
        return;
      }

      if (cfg.subscribers[topic].indexOf(callback) === -1) {
        return;
      }

      cfg.subscribers[topic] = _.without(cfg.subscribers[topic], callback);

      if (!cfg.subscribers[topic].length) {
        delete cfg.subscribers[topic];
      }
    };

    cfg.destroyWebsocket = function () {
      if (angular.isDefined(wsKeepAlive)) {
        $interval.cancel(wsKeepAlive);
        wsKeepAlive = void 0;
      }

      if (ws && ws.readyState === WebSocket.OPEN) {
        ws.close();
      }
    };

    cfg.createWebsocket = function () {
      var createWebSocketAfter30Sec, newWs, newWsKeepAlive;

      if ("WebSocket" in window) {
        cfg.destroyWebsocket();

        createWebSocketAfter30Sec = function createWebSocketAfter30Sec() {
          $timeout(function () {
            cfg.createWebsocket();
          }, 30 * 1000);
        };

        newWs = new WebSocket((window.location.protocol === "https:" ? "wss:" : "ws:") + "//" + window.location.host + uuiWebsocketConfig.websocketPath);
        newWsKeepAlive = $interval(function () {
          if (newWs.readyState === WebSocket.OPEN) {
            newWs.send("alive");
          } else {
            createWebSocketAfter30Sec();
          }
        }, 45 * 1000);

        newWs.onmessage = function (msg) {
          var obj;

          if (msg.data) {
            obj = angular.fromJson(msg.data);
            angular.forEach(obj, function (value, key) {
              if (cfg.subscribers[key]) {
                angular.forEach(cfg.subscribers[key], function (f) {
                  f(value);
                });
              }
            });
          }
        };

        newWs.onerror = function () {
          createWebSocketAfter30Sec();
        };

        ws = newWs;
        wsKeepAlive = newWsKeepAlive;
      } else {
        throw new Error("WebSocket not supported");
      }
    };

    return cfg;
  }]);
}).call(this);
//# sourceMappingURL=main.compiled.js.map
